type BoardGame {
    gameId: Int!
    name:String!
    year: Int
}

type Id {
    id:Int!
}

input BoardGameDetailInput {
    gameId: Int!
    name: String!
    thumb: String
    image: String
    description: String
    year: Int
    minPlayers: Int
    maxPlayers: Int
    minPlayTime: Int
    maxPlayTime: Int
    minAge: Int
    designers: String
    artists: String
    publisher: String
    numOfRaters: Int
    averageScore: Float
    rank: Int
    categories: String
}

type BoardGameDetail {
    id: Int,
    gameId: Int!
    name: String!
    thumb: String
    image: String
    description: String
    year: Int
    minPlayers: Int
    maxPlayers: Int
    minPlayTime: Int
    maxPlayTime: Int
    minAge: Int
    designers: String
    artists: String
    publisher: String
    numOfRaters: Int
    averageScore: Float
    rank: Int
    categories: String
    scores: [ScoreSheet]
}

type ScoreSheet {
    id:Int!
    players: [String],
    scores: [Int],
    jsonData: String,
    createdOn: Int
}

input ScoreSheetInput {
    players: [String],
    scores: [Int],
    jsonData: String
}

type User {
    id: Int!,
    username: String!
}

type IdGameId {
    id: Int!,
    gameId: Int!
}

type NumberResults {
    result: Int!
}

##### top level declarations
type Query {
    findBoardGames(query:String!): [BoardGame]
    getBoardGameDetails(gameId:Int!): BoardGameDetail
    findUsers: [User]
    getMyBoardGameCollection(userId: Int): [BoardGameDetail]
}

type Mutation {
    addToMyCollection(userId: Int, boardGame: BoardGameDetailInput): IdGameId
    removeFromMyCollection(userId: Int, boardGameId: Int):NumberResults
    addScoreSheetToBoardGame(userId: Int, boardGameId: Int, sheet: ScoreSheetInput): ScoreSheet
}
