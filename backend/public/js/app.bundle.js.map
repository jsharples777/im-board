{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BlogEntryView.tsx","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/DetailsSidebarView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","entries","selectedEntry","applyUserFilter","stateNames","users","comments","recentUserSearches","apis","entry","login","ui","draggable","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyFavourites","boardGameSearchId","userSearchId","chatId","blogEntry","entryDetailsSideBar","dom","sideBarId","formId","changedOnId","resultDataKeyId","isDraggable","isClickable","chatSideBar","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDeleteable","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","extra","fastSearchInputId","uiPrefs","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleShowMyEntries","handleSelectEntryComments","handleShowEditEntry","handleUpdateEntry","handleAddEntry","handleAddComment","handleDeleteEntry","handleDeleteComment","handleShowUserSearch","handleShowChat","connectToApplication","window","localStorage","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","entriesToDisplay","filter","createdBy","blog","map","index","event","preventDefault","entryId","getAttribute","parseInt","getStateManager","findItemInState","id","isSame","deleteEntry","removeItemFromState","componentDidMount","chatView","ChatSidebarView","document","onDocumentLoaded","detailsView","DetailsSidebarView","userSearchView","UserSearchSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","initialise","hideAllSideBars","href","setState","handleAllEntries","eventShow","creator","changedOn","moment","format","Comments","User","username","setStateByName","getStateByName","length","commentEl","commentSideBar","value","trim","comment","commentOn","addComment","target","commentView","setAttribute","deleteComment","updateEntry","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","socketListerDelegate","socketManager","chatManager","ChatManager","chatNotificationController","NotificationController","getServerAPIURL","result","getLoggedInUsername","handleMessage","composeBlogEntry","user","allComments","composeAllBlogEntries","stateChangedItemAdded","updatedEntry","itemAdded","stateChangedItemRemoved","itemRemoved","stateChangedItemUpdated","stateChanged","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","stateObj","changedEntry","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventStartDrag","data","JSON","createResultForItem","dataSource","domConfig","legacyDataKeyId","childEl","browserUtil","textEl","badgeValue","badgeEl","deleteButtonEl","iconEl","displayText","modifier","secondModifier","createResultsForState","viewEl","newState","item","beLogger","BlogEntryView","showCommentsHandler","editEntryHandler","deleteEntryHandler","editButton","deleteButton","width","csLogger","csLoggerDetail","selectedChatLog","handleUserDrop","draggedObjectJSON","draggedObject","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","messageEl","checkCanComment","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","getModifierForStateItem","getSecondaryModifierForStateItem","getBadgeValue","addChatMessage","chatMessageEl","messageSenderEl","reRenderChatMessages","chatLog","renderChatLog","eventClickItem","room","updateView","getDragData","eventDeleteClickItem","handleChatLogsUpdated","handleChatStarted","handleOfflineMessagesReceived","SidebarView","viewLogger","stateManager","sidePanelEl","closeButtonEl","showHide","eventHide","vLogger","vLoggerDetail","handleFavouriteUserDrop","handleBlockedUserDrop","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","fastSearchEl","$","userId","eventUserSelected","label","reRenderView","name","myUsername","fastSearchValues","searchValue","source","disabled","minLength","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","apiLogger","ApiUtil","fetchJSON","fetch","response","callback","apiFetchJSONWithPost","request","postParameters","method","headers","body","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addApiRequest","isPriority","requestId","uuid","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","RequestType","downloader","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","parentEl","UserStatus","cmLogger","currentUsername","blockedList","favouriteList","loggedInUsers","receiveUserList","listener","blocked","favourite","savedLogs","roomName","messages","lastViewed","numOfNewMessages","foundLog","receiveJoinedRoom","receivedLeftRoom","receiveInvitation","invite","receiveLogin","receiveLogout","receiveMessage","wasOffline","receiveQueuedInvites","invites","receiveQueuedMessages","joinChat","leaveChat","logout","sendInvite","sendMessage","created","sent","from","chatLogKey","blockedListKey","favouriteListKey","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","SocketManager","setChatReceiver","callbackForMessage","dataObj","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForData","setListener","io","to","getUserList","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","stateValueObj","informListeners","addNewItemToState","isPersisted","testForEqualityFunction","isItemInState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","getInstance","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","msManager","apiSMLogger","configuration","results","config","setCompletedRun","runsComplete","status","jsonRequest","url","type","params","associatedStateName","Error","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAGA;AAEA;AAGA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,aAAO,EAAE,EAHA;AAITC,mBAAa,EAAE,EAJN;AAKTC,qBAAe,EAAC,KALP;AAMTC,gBAAU,EAAE;AACRC,aAAK,E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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport moment from 'moment';\n\nimport controller from './Controller';\nimport CommentSidebarView from \"./component/CommentSidebarView\";\nimport BlogEntryView from \"./component/BlogEntryView\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport DetailsSidebarView from \"./component/DetailsSidebarView\";\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            entries: [],\n            selectedEntry: {},\n            applyUserFilter:false,\n            stateNames: {\n                users: 'users',\n                entries: 'entries',\n                comments: 'comments',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n            },\n            apis: {\n                users: '/users',\n                entries: '/blog',\n                entry: '/blog',\n                comments: '/comment',\n                login: '/login',\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyFavourites: 'navigationItemShowMyFavourites',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat'\n                },\n                blogEntry: {},\n                entryDetailsSideBar: {\n                    dom: {\n                        sideBarId: 'detailsSideBar',\n                        formId: 'details',\n                        titleId: 'title',\n                        contentId: 'content',\n                        changedOnId: 'changedOn',\n                        resultDataKeyId: 'id',\n                        isDraggable: false,\n                        isClickable: true,\n                    },\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: false,\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                entryDetailsSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                }\n            },\n            controller: {\n                events: {\n                    entry: {\n                        eventDataKeyId: 'entry-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowMyEntries = this.handleShowMyEntries.bind(this);\n        this.handleSelectEntryComments = this.handleSelectEntryComments.bind(this);\n        this.handleShowEditEntry = this.handleShowEditEntry.bind(this);\n        this.handleUpdateEntry = this.handleUpdateEntry.bind(this);\n        this.handleAddEntry = this.handleAddEntry.bind(this);\n        this.handleAddComment = this.handleAddComment.bind(this);\n        this.handleDeleteEntry = this.handleDeleteEntry.bind(this);\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\n\n\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        logger(this.state.entries);\n        // @ts-ignore\n        logger(`User filter ${this.state.applyUserFilter}`);\n\n        // @ts-ignore\n        let entriesToDisplay = this.state.entries;\n        // @ts-ignore\n        if (this.state.applyUserFilter && controller.isLoggedIn() && (controller.getLoggedInUserId() > 0)) {\n            logger(`fitlering entries`);\n            entriesToDisplay = entriesToDisplay.filter((entry:any) => {\n                return (entry.createdBy === controller.getLoggedInUserId());\n            });\n        }\n        const blog = entriesToDisplay.map((entry:any, index:number) =>\n            <BlogEntryView\n                key={index}\n                entry={entry}\n                showCommentsHandler={this.handleSelectEntryComments}\n                editEntryHandler={this.handleShowEditEntry}\n                deleteEntryHandler={this.handleDeleteEntry}\n            />\n        );\n        return (\n            <div className=\"Root row ml-1\">\n                {blog}\n            </div>\n        );\n    }\n\n    cancelDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let entryId = this.modalEl.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            if (entry) {\n                // delete the entry using the controller and remove the state manager\n                controller.deleteEntry(entry);\n                // @ts-ignore\n                controller.getStateManager().removeItemFromState(this.state.stateNames.entries,entry,isSame);\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n        // add the additional views and configure them\n        //this.commentView = new CommentSidebarView(this, document,controller.getStateManager());\n        //this.commentView.onDocumentLoaded(); // reset the view state\n\n        this.chatView = new ChatSidebarView(this,document,controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.detailsView = new DetailsSidebarView(this,document,controller.getStateManager());\n        this.detailsView.onDocumentLoaded();\n\n\n        this.userSearchView = new UserSearchSidebarView(this,document,controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyFavourites).addEventListener('click', () => {});\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', () => {});\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.chatId).addEventListener('click', this.handleShowChat);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        //this.commentView.eventHide(null);\n        //this.detailsView.eventHide(null);\n    }\n\n    handleShowMyEntries(event:Event) {\n        logger('Handling Show My Entries');\n        this.hideAllSideBars();\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.setState({applyUserFilter:true});\n    }\n\n    handleAllEntries(event:Event) {\n        logger('Handling Show All Entries');\n        this.setState({applyUserFilter:false});\n        this.hideAllSideBars();\n    }\n\n    handleShowUserSearch(event:Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowChat(event:Event) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n    }\n\n    handleAddEntry(event:Event) {\n        logger('Handling Add Entry');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n             isSame);\n        logger(creator);\n        // create an empty entry\n        let entry = {\n            title: '',\n            content: '',\n            createdBy: creator.id,\n            changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n            Comments: [],\n            User: {\n                id: creator.id,\n                username: creator.username\n            }\n        }\n        logger(entry);\n        this.setState({selectedEntry:entry});\n        // @ts-ignore\n        controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n        this.detailsView.eventShow(event);\n    }\n\n    handleAddComment(event:Event) {\n        logger('Handling Add Comment');\n        event.preventDefault();\n        logger('entry comments');\n        // @ts-ignore\n        let entry = controller.getStateManager().getStateByName(this.state.stateNames.selectedEntry);\n        logger(entry.comments.length);\n\n        // get the comment element\n        // @ts-ignore\n        let commentEl:HTMLInputElement = document.getElementById(this.state.ui.commentSideBar.dom.commentId);\n        if (commentEl && commentEl.value.trim().length === 0) return;\n\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n                  isSame);\n        logger('user');\n        logger(creator);\n        // find the selected entry\n        if (entry && commentEl) {\n            // create an empty comment\n            // @ts-ignore\n\n            let comment = {\n                createdBy: creator.id,\n                commentOn: entry.id,\n                changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n                content: commentEl.value.trim()\n            }\n            commentEl.value = '';\n            logger('comment');\n            logger(comment);\n            controller.addComment(comment);\n\n        }\n    }\n\n    handleSelectEntryComments(event:MouseEvent) {\n        logger('Handling Select Entry Comments');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.commentView.eventShow(event);\n            }\n        }\n    }\n\n    handleShowEditEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.detailsView.eventShow(event);\n            }\n        }\n    }\n\n    handleDeleteEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,entryId);\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            this.alert(entry.title,\"Are you sure you want to delete this blog entry?\")\n        }\n    }\n\n    handleDeleteComment(id:number):void {\n        controller.deleteComment(id);\n    }\n\n    // @ts-ignore\n    handleUpdateEntry(entry:any) {\n        this.hideAllSideBars();\n        controller.updateEntry(entry);\n    }\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\nlocalStorage.debug = 'app controller-ts socket-ts socket-listener notification-controller chat-manager chat-sidebar chat-sidebar:detail';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.users,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.entries,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.comments,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        // let indexedDBSM = IndexedDBStateManager.getInstance();\n        // indexedDBSM.initialise([\n        //     {\n        //         name:this.config.stateNames.users,\n        //         keyField:\"id\"\n        //     },\n        //     {\n        //         name:this.config.stateNames.entries,\n        //         keyField:\"id\"\n        //     },\n        //     {\n        //         name:this.config.stateNames.comments,\n        //         keyField:\"id\"\n        //     }\n        // ]);\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        //aggregateSM.addStateManager(new BrowserStorageStateManager(true), [], false);\n        //aggregateSM.addStateManager(indexedDBSM,[this.config.stateNames.selectedEntry],false );\n        aggregateSM.addStateManager(asyncSM, [this.config.stateNames.selectedEntry,this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.entries, this);\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.comments, this);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            let chatNotificationController = NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            chatManager.login();\n        }\n\n\n        // load the entries\n        this.getStateManager().getStateByName(this.config.stateNames.entries);\n        // load the users\n        this.getStateManager().getStateByName(this.config.stateNames.users);\n        // load the comments\n        this.getStateManager().getStateByName(this.config.stateNames.comments);\n        // load the recent user searches\n        this.getStateManager().getStateByName(this.config.stateNames.recentUserSearches);\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"/api\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n\n    // Lets delete a comment\n    deleteComment(id: number) {\n        let entry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        if (entry) {\n            cLogger(`Handling delete comment for ${entry.id} and comment ${id}`);\n            this.getStateManager().removeItemFromState(this.config.stateNames.comments, {id: id}, isSame, false)\n            // send the api call\n            //this.asyncSM.removeItemFromState(this.config.stateNames.comments,{id:id},isSame);\n        }\n    }\n\n    public deleteEntry(entry: any): void {\n        if (entry) {\n            cLogger(`Handling delete entry for ${entry.id}`);\n            // update the state manager\n            this.getStateManager().removeItemFromState(this.config.stateNames.entries, entry, isSame, false);\n            // send the api call\n            //this.asyncSM.removeItemFromState(this.config.stateNames.entries,{id:entry.id},isSame);\n        }\n    }\n\n    public updateEntry(entry: any): void {\n        if (entry) {\n            cLogger(entry);\n            if (entry.id) {\n                cLogger(`Handling update for entry ${entry.id}`);\n                // update the state manager\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame, false);\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame, false);\n                // send the api call\n                //this.asyncSM.updateItemInState(this.config.stateNames.entries,entry,isSame);\n\n            } else {\n                cLogger(`Handling create for entry`);\n                // send the api call and let the completed entry with id come back asynchronously\n                this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry, false);\n                //this.asyncSM.addNewItemToState(this.config.stateNames.entries,entry, false);\n            }\n        }\n    }\n\n    public addComment(comment: any): void {\n        if (comment) {\n            cLogger(comment);\n            cLogger(`Handling create for comment`);\n            // send the api call and let the completed entry with id come back asynchronously\n            this.getStateManager().addNewItemToState(this.config.stateNames.comments, comment, false);\n            //this.asyncSM.addNewItemToState(this.config.stateNames.comments,comment, false);\n        }\n    }\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    /* Compositing Blod Entries from the state functions */\n    private composeBlogEntry(entry: any) {\n        if (!entry) return;\n        // find the user for the entry\n        let user: any = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: entry.createdBy}, isSame);\n        if (!user) user = {id: -1, username: 'unknown'};\n\n        const allComments: any[] = controller.getStateManager().getStateByName(this.config.stateNames.comments);\n        // get the comments for the entry\n        let comments = allComments.filter((comment: any) => comment.commentOn === entry.id);\n        if (!comments) comments = [];\n\n        entry.user = user;\n        entry.comments = comments;\n    }\n\n    private composeAllBlogEntries() {\n        let entries = this.getStateManager().getStateByName(this.config.stateNames.entries);\n        entries.forEach((entry: any) => {\n            this.composeBlogEntry(entry);\n        });\n    }\n\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeBlogEntry(itemAdded);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        let updatedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries, {id: itemAdded.commentOn}, isSame);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n                        cLogger(updatedEntry);\n                        this.composeBlogEntry(updatedEntry);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n                        cLogger(updatedEntry);\n                        this.composeBlogEntry(selectedEntry);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, selectedEntry, true);\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        if (selectedEntry) {\n                            if (isSame(selectedEntry, itemRemoved)) {\n                                selectedEntry = {};\n                                this.applicationView.hideAllSideBars();\n                            }\n                        }\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, selectedEntry, true);\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        let updatedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries, {id: itemRemoved.commentOn}, isSame);\n                        this.composeBlogEntry(updatedEntry);\n                        this.composeBlogEntry(selectedEntry);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, selectedEntry, true);\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeBlogEntry(itemNewValue);\n                        this.composeBlogEntry(selectedEntry);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeAllBlogEntries();\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        this.composeAllBlogEntries();\n                        cLogger(this.getStateManager().getStateByName(this.config.stateNames.entries));\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: {},\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected abstract getDragData(event: DragEvent): any;\n    protected abstract getIdForStateItem(name: string, item: any): string;\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n    protected abstract getBadgeValue(name:string, item:any): number;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource:any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl:HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl:HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name,item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    contentEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl:HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type','button');\n                browserUtil.addRemoveClasses(deleteButtonEl,domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length() > 0) {\n                        domConfig.innerText = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl,domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click',this.eventDeleteClickItem);\n                contentEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name,item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\n\nconst beLogger = debug('view-ts:blogentry');\n\n\n// @ts-ignore\nexport default function BlogEntryView({entry, showCommentsHandler, editEntryHandler, deleteEntryHandler}) {\n    if (entry) {\n        beLogger(`Entry ${entry.createdBy} === ${controller.getLoggedInUserId()}`);\n\n        let editButton;\n        let deleteButton;\n        if (entry.user.id === controller.getLoggedInUserId()) {\n            editButton =\n                <button type=\"button\"\n                        className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={editEntryHandler}>\n                    &nbsp;&nbsp;Edit &nbsp;\n                    <i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n                </button>\n            deleteButton =\n                <button type=\"button\"\n                        className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={deleteEntryHandler}>\n                    &nbsp;&nbsp;Delete &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        } else {\n            editButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2 \"\n                                 disabled>&nbsp;&nbsp;Edit &nbsp;<i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n            </button>\n            deleteButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2\"\n                                   disabled>&nbsp;&nbsp;Delete &nbsp;\n                <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n            </button>\n        }\n\n\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className={\"card\"} style={{width: \"350px\"}}>\n                    <div className={\"card-header\"}>\n                        {entry.title}&nbsp;&nbsp;&nbsp;&nbsp;<a className=\"text-decoration-none\">\n                        <i className=\"fas fa-comments text-secondary\" entry-id={entry.id}\n                           onClick={showCommentsHandler}></i>&nbsp;&nbsp;\n                        <span className=\"badge badge-pill badge-primary text-right\" entry-id={entry.id}\n                              onClick={showCommentsHandler}>&nbsp;{entry.comments.length}&nbsp;</span></a>\n                    </div>\n                    <div className={\"card-body\"}>\n                        <p className={\"card-text\"}>{entry.content}</p>\n                        {editButton}\n                        {deleteButton}\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        {entry.user.username} on {moment(entry.changedOn, 'YYYYMMDDHHmmss').format('DD/MM/YYYY')}\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatLog, ChatManager} from \"../socket/ChatManager\";\nimport {Message} from \"../socket/ChatReceiver\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    handleUserDrop(event:Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username,this.selectedChatLog.roomName);\n            }\n        }\n\n    }\n\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('',{})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage:Message|null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent);\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {csLoggerDetail('Dragged over'); if (this.selectedChatLog) event.preventDefault();});\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n\n        this.checkCanComment();\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        if (message.from === ChatManager.getInstance().getCurrentUser()) {\n            browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n        }\n        else {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n            chatMessageEl.appendChild(messageSenderEl);\n        }\n\n        let contentEl = document.createElement('div');\n        if (message.from === ChatManager.getInstance().getCurrentUser()) {\n            browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n        }\n        else {\n            browserUtil.addRemoveClasses(contentEl, 'message-content');\n        }\n        contentEl.innerText = message.message;\n        chatMessageEl.appendChild(contentEl);\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl:HTMLElement|null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        this.checkCanComment();\n        this.renderChatLog(this.selectedChatLog);\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        this.createResultsForState(name, newState);\n        this.checkCanComment();\n    }\n\n    getDragData(event: DragEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {}\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('',{});\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import moment from 'moment';\nimport debug from 'debug';\n\nimport SidebarView from './SidebarView';\nimport {StateManager} from \"../state/StateManager\";\n\nconst viewLogger = debug('view-ts:details');\n\nclass DetailsSidebarView extends SidebarView{\n  protected formEl:HTMLElement|null;\n  protected titleEl:HTMLInputElement|null;\n  protected contentEl:HTMLTextAreaElement|null;\n  protected changeOnEl:HTMLLabelElement|null;\n\n  constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:StateManager) {\n    super(applicationView, htmlDocument, applicationView.state.ui.entryDetailsSideBar, applicationView.state.uiPrefs.entryDetailsSideBar,stateManager);\n\n    // handler binding\n    this.updateView = this.updateView.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n\n    // field and form elements\n    this.formEl = document.getElementById(this.uiConfig.dom.formId);\n    this.titleEl = <HTMLInputElement>document.getElementById(this.uiConfig.dom.titleId);\n    this.contentEl = <HTMLTextAreaElement>document.getElementById(this.uiConfig.dom.contentId);\n    this.changeOnEl = <HTMLLabelElement>document.getElementById(this.uiConfig.dom.changedOnId);\n\n    // register state change listening\n    stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n\n    // listen for form submissions\n    if (this.formEl) { // @ts-ignore\n      this.formEl.addEventListener('submit',this.eventClickItem);\n    }\n  }\n\n  getIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  getLegacyIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  eventClickItem(event:MouseEvent) {\n    event.preventDefault();\n    viewLogger('Handling submit Details Sidebar View');\n    viewLogger(event.target);\n    let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n    viewLogger(entry);\n    entry.title = (this.titleEl)?this.titleEl.value.trim():'';\n    entry.content = (this.contentEl)?this.contentEl.value.trim():'';\n    entry.changedOn = parseInt(moment().format('YYYYMMDDHHmmss'));\n    viewLogger(entry);\n    if (this.titleEl) this.titleEl.value = '';\n    if (this.contentEl) this.contentEl.value = '';\n    if (this.changeOnEl) this.changeOnEl.innerText = 'Last Changed On:';\n    this.applicationView.handleUpdateEntry(entry);\n  }\n\n\n  updateView(name:string, newState:any) {\n    viewLogger('Handling update of Details Sidebar View');\n    viewLogger(newState);\n    let entry = newState;\n    if (entry && entry.title) {\n      if (this.titleEl) this.titleEl.value = entry.title;\n      if (this.contentEl) this.contentEl.value = entry.content;\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \" + moment(entry.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n    }\n    else {\n      if (this.titleEl) this.titleEl.value = '';\n      if (this.contentEl) this.contentEl.value = '';\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \";\n    }\n  }\n\n  protected getDisplayValueForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getDragData(event: DragEvent): any {\n  }\n\n  protected getModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getSecondaryModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected eventDeleteClickItem(event: MouseEvent): void {\n  }\n\n  protected getBadgeValue(name: string, item: any): number {\n    return 0;\n  }\n\n}\n\nexport default DetailsSidebarView;\n","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {\n    this.showHide(this.uiPrefs.view.expandedSize);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone:HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event:Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n             switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event:Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceBlockedUsers);\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event);\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    deleteFavouriteUser(user:any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user:any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user:any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches,user,isSame,true);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport moment from \"moment\";\n\nimport {ChatReceiver, Invitation, JoinLeft, Message} from \"./ChatReceiver\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport socketManager from \"./SocketManager\";\nimport {ChatEventListener, ChatUserEventListener} from \"./ChatEventListener\";\nimport uuid from \"../util/UUID\";\n\nexport type ChatLog = {\n    roomName: string,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver,ChatEmitter {\n    private static _instance: ChatManager;\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage:StateManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private currentUsername = '';\n    protected blockedList: string[] = [];\n    private static blockedListKey = 'im-board-blocked-list';\n    protected favouriteList: string[] = [];\n    private static favouriteListKey = 'im-board-favourite-list';\n\n\n    protected loggedInUsers: string[] = [];\n\n\n    protected chatListeners:ChatEventListener[];\n    protected chatUserListeners:ChatUserEventListener[];\n\n    public addChatEventHandler(receiver:ChatEventListener):void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver:ChatUserEventListener):void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.setChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public isUserLoggedIn(username:string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    private saveLogs():void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey+this.currentUsername,this.chatLogs,false);\n    }\n\n    private saveBlockedList():void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey+this.currentUsername,this.blockedList, false);\n    }\n\n    private saveFavouriteList():void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey+this.currentUsername,this.favouriteList, false);\n    }\n\n    public addUserToBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index,1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username:string):boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n\n    public addUserToFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index,1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username:string):boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList():string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList():string[] {\n        return [...this.blockedList];\n    }\n\n\n    public setCurrentUser(username:string):void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey+this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey+this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey+this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    private ensureChatLogExists(room:string):ChatLog {\n        let log:ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        }\n        else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username:string):ChatLog {\n        let foundLog:ChatLog|null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(),username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        let index = this.chatLogs.findIndex((log) => log.roomName === users.room);\n        if (index >= 0) {\n            cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n            let log = this.chatLogs[index];\n            log.users = users.userList;\n            this.saveLogs();\n        }\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        this.receiveJoinedRoom(users);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            let chatLog:ChatLog = this.ensureChatLogExists(invite.room);\n            // add the inviter to the user list for the room, if not already added\n            if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n            this.saveLogs();\n            cmLogger(`Joining chat ${invite.room}`);\n            cmLogger(invite);\n            socketManager.joinChat(this.getCurrentUser(),invite.room);\n            this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n        }\n        else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index,1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    private addMessageToChatLog(log:ChatLog, message:Message) {\n        log.numOfNewMessages ++;\n        log.messages.push(message);\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        }\n        else {\n            this.saveLogs();\n        }\n    }\n\n    public touchChatLog(room:string):void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n        this.saveLogs();\n    }\n\n    public getChatLog(room:string):ChatLog {\n        return this.ensureChatLogExists(room);\n    }\n\n    receiveMessage(message: Message,wasOffline:boolean = false): void {\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,wasOffline));\n        }\n        else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite:Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message:Message) => {\n           this.receiveMessage(message,true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(),room);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // this.removeChatLog(room);  // leave the chat log for now (essentially history)\n        socketManager.leaveChat(this.getCurrentUser(),room);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            socketManager.joinChat(this.currentUsername,log.roomName);\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    sendInvite(to: string, room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log:ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) =>  user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(),to, room);\n        }\n    }\n\n    sendMessage(room: string, content: string): Message|null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(),room, content, created);\n\n        // add the message to the chat log\n        let sent:Message = {\n            from:this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs():ChatLog[] {\n        return this.chatLogs;\n    }\n\n\n    public startChatWithUser(username:string) {\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName);\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName);\n        }\n    }\n}\n","import {ChatLog, ChatManager} from \"./ChatManager\";\nimport {ChatEventListener, ChatUserEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {Message} from \"./ChatReceiver\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener,ChatUserEventListener {\n    private static _instance: NotificationController;\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    private doNotDisturb:boolean = false;\n    private chatManager:ChatManager;\n    private chatListeners:ChatEventListener[];\n    private chatUserListeners:ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public addListener(listener:ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n    public addUserListener(listener:ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username:string, isBlackedListed:boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        }\n        else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username:string, isFavourited:boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        }\n        else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username:string):boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username:string):boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog,wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            const displayMessage = log.messages[log.messages.length - 1];\n            notifier.show(displayMessage.from,displayMessage.message,'message',3000);\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged in.`,'warning',5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged out.`,'priority',4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username:string) {\n        ChatManager.getInstance().startChatWithUser(username);\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\",`You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n    protected chatReceiver:ChatReceiver|null;\n\n    public setChatReceiver(receiver:ChatReceiver):void {\n        this.chatReceiver = receiver;\n    }\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceiver = null;\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n    }\n\n    private callbackForMessage(content:any):void {\n        sDebug(`Received message : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    private callbackForLogin(message:any):void {\n        sDebug(`Received login : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogin(message);\n    }\n\n\n    private callbackForUserList(message:any):void {\n        sDebug(`Received user list : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveUserList(message);\n    }\n\n    private callbackForLogout(message:any):void {\n        sDebug(`Received logout : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogout(message);\n    }\n\n    private callbackForJoinRoom(data:any):void {\n        sDebug(`Received joined room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveJoinedRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data:any):void {\n        sDebug(`Received left room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receivedLeftRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data:any):void {\n        sDebug(`Received invite : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveInvitation(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content:any):void {\n        sDebug(`Received chat : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data:any):void {\n        sDebug(`Received queued items : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceiver.receiveQueuedInvites(dataObj.invites);\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceiver.receiveQueuedMessages(dataObj.messages);\n            }\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData);\n        this.socket.on('login',this.callbackForLogin);\n        this.socket.on('logout',this.callbackForLogout);\n        this.socket.on('joinroom',this.callbackForJoinRoom);\n        this.socket.on('exitroom',this.callbackForExitRoom);\n        this.socket.on('invite',this.callbackForInvite);\n        this.socket.on('chat',this.callbackForChat);\n        this.socket.on('queue',this.callbackForQueue);\n        this.socket.on('userlist',this.callbackForUserList);\n    }\n\n    public login(username:string): void {\n        this.socket.emit('login',{username});\n    }\n\n    public logout(username:string):void {\n        this.socket.emit('logout',{username});\n    }\n\n    public joinChat(username:string, room:string):void {\n        this.socket.emit('joinroom',{username,room});\n    }\n\n    public leaveChat(username:string, room:string):void {\n        this.socket.emit('exitroom', {username,room});\n    }\n\n    public sendInvite(from:string, to:string, room:string) {\n        this.socket.emit('invite', {from,to,room});\n    }\n\n    public sendMessage(from:string, room:string, message:string,created:number) {\n        this.socket.emit('chat',{from, room, message,created});\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager{\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  public constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  forceResetForGet(stateName: string): void {\n  }\n\n  getConfiguredStateNames(): string[] {\n    return this.configuration;\n  }\n\n  hasCompletedRun(stateName: string): boolean {\n    return false;\n  }\n\n  // @ts-ignore\n  private configuration:string[] = [];\n\n  public initialise(config:string[]) {\n    this.configuration = config;\n  }\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  protected constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollToBottomNow (element:HTMLElement):void {\n    if (element) {\n      element.scrollTop = element.scrollHeight - element.clientHeight;\n    }\n  }\n\n  scrollToBottomSmooth (element:HTMLElement):void {\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n      });\n      element.scrollTop = element.scrollHeight - element.clientHeight;\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  scrollTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n\n  addAttributes(element:HTMLElement, attributes:any[]|undefined) {\n     if (attributes) {\n       attributes.forEach((attribute:any) => {\n          element.setAttribute(attribute[0],attribute[1]);\n       });\n     }\n  }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1:any, item2:any):boolean {\n  return (item1.username === item2.username);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}