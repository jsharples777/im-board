{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/Types.ts","webpack:///./src/util/UUID.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/state/StateManagementUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/Controller.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/CommentSidebarView.ts","webpack:///./src/component/BlogEntryView.tsx","webpack:///./src/component/DetailsSidebarView.ts","webpack:///./src/App.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","apiLogger","debug","fetchJSON","fetch","url","response","callback","queueType","apiFetchJSONWithPost","request","JSON","error","postParameters","method","headers","body","this","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","getUniqueId","replace","Math","v","RequestType","dlLogger","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addApiRequest","isPriority","requestId","uuid","jsonRequest","managerRequest","originalRequest","priorityChangeListener","handleEventAddToQueue","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","foundIndex","findIndex","element","item","apiUtil","smLogger","StateManagementUtil","isStatePresent","applicationState","informChangeListenersForStateWithName","stateChangeListeners","changeListenersForName","index","listener","addChangeListenerForName","listenersNameArrayPair","listeners","getStateByName","stateValueObj","addStateByName","setStateByName","stateNameValuePair","stateObjForName","addNewItemToState","state","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","updateItemInState","_instance","isSame","item1","item2","BootstrapNotification","show","topOffset","context","duration","containerId","notificationManager","bgColorClass","containerNode","document","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","createNotification","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","sDebug","callbackForMessage","callbackForData","handleMessage","message","dataObj","err","setListener","io","sendMessage","cLogger","connectToApplication","applicationView","callbackForUsers","callbackForEntries","callbackForCreateEntry","callbackForCreateComment","stateChanged","stateManager","config","stateNames","isLoggedIn","loggedInUserId","selectedEntry","entries","users","status","cbUsers","user","cbUser","username","convertJSONCommentToComment","jsonComment","content","createdBy","changedOn","commentOn","convertJSONUserToUser","jsonUser","convertJSONEntryToBlogEntry","entry","jsonEntry","title","User","Comments","Controller","cbComments","comment","getAllUsers","getServerAPIURL","apis","type","params","downloader","getAllEntries","apiDeleteComment","apiDeleteEntry","apiCreateEntry","apiCreateComment","apiUpdateEntry","getLoggedInUserId","initialise","socketManager","deleteComment","comments","deleteEntry","updateEntry","addComment","getCurrentUser","handleDataChangedByAnotherUser","changeUser","stateObj","changedEntry","currentSelectedEntry","notifier","deletedEntry","scrollSmoothToId","block","behavior","scrollSmoothTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","avLogger","onDocumentLoaded","sidePanelEl","getElementById","uiConfig","dom","closeButtonEl","showHide","uiPrefs","view","eventHide","event","eventShow","eventStartDrag","eventClickItem","getDragData","ui","draggable","createResultsForState","domConfig","viewEl","browserUtil","newState","childEl","displayText","modifier","secondModifier","viewLogger","htmlDocument","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","createdOn","moment","getModifierForStateItem","controller","getSecondaryModifierForStateItem","parseInt","updateView","newCommentTextEl","removeAttribute","newCommentSubmitEl","setAttribute","commentHeaderEl","innerHTML","SidebarView","beLogger","BlogEntryView","editButton","deleteButton","showCommentsHandler","editEntryHandler","deleteEntryHandler","className","entry-id","onClick","disabled","style","width","format","propTypes","PropTypes","any","isRequired","func","titleEl","contentEl","changeOnEl","innerText","logger","Root","applyUserFilter","login","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyEntriesId","addNewEntryId","showAllEntriesId","blogEntry","entryDetailsSideBar","sideBarId","formId","changedOnId","resultDataKeyId","isDraggable","isClickable","commentSideBar","headerId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","newFormId","commentId","submitCommentId","location","expandedSize","events","eventDataKeyId","dataLimit","cancelDelete","confirmDelete","handleShowMyEntries","handleSelectEntryComments","handleShowEditEntry","handleUpdateEntry","handleAddEntry","handleAddComment","handleDeleteEntry","handleDeleteComment","localStorage","textContent","modalEl","classList","remove","add","render","entriesToDisplay","filter","blog","preventDefault","entryId","getAttribute","componentDidMount","commentView","CommentSidebarView","detailsView","DetailsSidebarView","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","hideAllSideBars","setState","href","handleAllEntries","creator","commentEl","trim","target","React","Component","ReactDOM"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([141,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": 5,\n\t\"./af.js\": 5,\n\t\"./ar\": 6,\n\t\"./ar-dz\": 7,\n\t\"./ar-dz.js\": 7,\n\t\"./ar-kw\": 8,\n\t\"./ar-kw.js\": 8,\n\t\"./ar-ly\": 9,\n\t\"./ar-ly.js\": 9,\n\t\"./ar-ma\": 10,\n\t\"./ar-ma.js\": 10,\n\t\"./ar-sa\": 11,\n\t\"./ar-sa.js\": 11,\n\t\"./ar-tn\": 12,\n\t\"./ar-tn.js\": 12,\n\t\"./ar.js\": 6,\n\t\"./az\": 13,\n\t\"./az.js\": 13,\n\t\"./be\": 14,\n\t\"./be.js\": 14,\n\t\"./bg\": 15,\n\t\"./bg.js\": 15,\n\t\"./bm\": 16,\n\t\"./bm.js\": 16,\n\t\"./bn\": 17,\n\t\"./bn-bd\": 18,\n\t\"./bn-bd.js\": 18,\n\t\"./bn.js\": 17,\n\t\"./bo\": 19,\n\t\"./bo.js\": 19,\n\t\"./br\": 20,\n\t\"./br.js\": 20,\n\t\"./bs\": 21,\n\t\"./bs.js\": 21,\n\t\"./ca\": 22,\n\t\"./ca.js\": 22,\n\t\"./cs\": 23,\n\t\"./cs.js\": 23,\n\t\"./cv\": 24,\n\t\"./cv.js\": 24,\n\t\"./cy\": 25,\n\t\"./cy.js\": 25,\n\t\"./da\": 26,\n\t\"./da.js\": 26,\n\t\"./de\": 27,\n\t\"./de-at\": 28,\n\t\"./de-at.js\": 28,\n\t\"./de-ch\": 29,\n\t\"./de-ch.js\": 29,\n\t\"./de.js\": 27,\n\t\"./dv\": 30,\n\t\"./dv.js\": 30,\n\t\"./el\": 31,\n\t\"./el.js\": 31,\n\t\"./en-au\": 32,\n\t\"./en-au.js\": 32,\n\t\"./en-ca\": 33,\n\t\"./en-ca.js\": 33,\n\t\"./en-gb\": 34,\n\t\"./en-gb.js\": 34,\n\t\"./en-ie\": 35,\n\t\"./en-ie.js\": 35,\n\t\"./en-il\": 36,\n\t\"./en-il.js\": 36,\n\t\"./en-in\": 37,\n\t\"./en-in.js\": 37,\n\t\"./en-nz\": 38,\n\t\"./en-nz.js\": 38,\n\t\"./en-sg\": 39,\n\t\"./en-sg.js\": 39,\n\t\"./eo\": 40,\n\t\"./eo.js\": 40,\n\t\"./es\": 41,\n\t\"./es-do\": 42,\n\t\"./es-do.js\": 42,\n\t\"./es-mx\": 43,\n\t\"./es-mx.js\": 43,\n\t\"./es-us\": 44,\n\t\"./es-us.js\": 44,\n\t\"./es.js\": 41,\n\t\"./et\": 45,\n\t\"./et.js\": 45,\n\t\"./eu\": 46,\n\t\"./eu.js\": 46,\n\t\"./fa\": 47,\n\t\"./fa.js\": 47,\n\t\"./fi\": 48,\n\t\"./fi.js\": 48,\n\t\"./fil\": 49,\n\t\"./fil.js\": 49,\n\t\"./fo\": 50,\n\t\"./fo.js\": 50,\n\t\"./fr\": 51,\n\t\"./fr-ca\": 52,\n\t\"./fr-ca.js\": 52,\n\t\"./fr-ch\": 53,\n\t\"./fr-ch.js\": 53,\n\t\"./fr.js\": 51,\n\t\"./fy\": 54,\n\t\"./fy.js\": 54,\n\t\"./ga\": 55,\n\t\"./ga.js\": 55,\n\t\"./gd\": 56,\n\t\"./gd.js\": 56,\n\t\"./gl\": 57,\n\t\"./gl.js\": 57,\n\t\"./gom-deva\": 58,\n\t\"./gom-deva.js\": 58,\n\t\"./gom-latn\": 59,\n\t\"./gom-latn.js\": 59,\n\t\"./gu\": 60,\n\t\"./gu.js\": 60,\n\t\"./he\": 61,\n\t\"./he.js\": 61,\n\t\"./hi\": 62,\n\t\"./hi.js\": 62,\n\t\"./hr\": 63,\n\t\"./hr.js\": 63,\n\t\"./hu\": 64,\n\t\"./hu.js\": 64,\n\t\"./hy-am\": 65,\n\t\"./hy-am.js\": 65,\n\t\"./id\": 66,\n\t\"./id.js\": 66,\n\t\"./is\": 67,\n\t\"./is.js\": 67,\n\t\"./it\": 68,\n\t\"./it-ch\": 69,\n\t\"./it-ch.js\": 69,\n\t\"./it.js\": 68,\n\t\"./ja\": 70,\n\t\"./ja.js\": 70,\n\t\"./jv\": 71,\n\t\"./jv.js\": 71,\n\t\"./ka\": 72,\n\t\"./ka.js\": 72,\n\t\"./kk\": 73,\n\t\"./kk.js\": 73,\n\t\"./km\": 74,\n\t\"./km.js\": 74,\n\t\"./kn\": 75,\n\t\"./kn.js\": 75,\n\t\"./ko\": 76,\n\t\"./ko.js\": 76,\n\t\"./ku\": 77,\n\t\"./ku.js\": 77,\n\t\"./ky\": 78,\n\t\"./ky.js\": 78,\n\t\"./lb\": 79,\n\t\"./lb.js\": 79,\n\t\"./lo\": 80,\n\t\"./lo.js\": 80,\n\t\"./lt\": 81,\n\t\"./lt.js\": 81,\n\t\"./lv\": 82,\n\t\"./lv.js\": 82,\n\t\"./me\": 83,\n\t\"./me.js\": 83,\n\t\"./mi\": 84,\n\t\"./mi.js\": 84,\n\t\"./mk\": 85,\n\t\"./mk.js\": 85,\n\t\"./ml\": 86,\n\t\"./ml.js\": 86,\n\t\"./mn\": 87,\n\t\"./mn.js\": 87,\n\t\"./mr\": 88,\n\t\"./mr.js\": 88,\n\t\"./ms\": 89,\n\t\"./ms-my\": 90,\n\t\"./ms-my.js\": 90,\n\t\"./ms.js\": 89,\n\t\"./mt\": 91,\n\t\"./mt.js\": 91,\n\t\"./my\": 92,\n\t\"./my.js\": 92,\n\t\"./nb\": 93,\n\t\"./nb.js\": 93,\n\t\"./ne\": 94,\n\t\"./ne.js\": 94,\n\t\"./nl\": 95,\n\t\"./nl-be\": 96,\n\t\"./nl-be.js\": 96,\n\t\"./nl.js\": 95,\n\t\"./nn\": 97,\n\t\"./nn.js\": 97,\n\t\"./oc-lnc\": 98,\n\t\"./oc-lnc.js\": 98,\n\t\"./pa-in\": 99,\n\t\"./pa-in.js\": 99,\n\t\"./pl\": 100,\n\t\"./pl.js\": 100,\n\t\"./pt\": 101,\n\t\"./pt-br\": 102,\n\t\"./pt-br.js\": 102,\n\t\"./pt.js\": 101,\n\t\"./ro\": 103,\n\t\"./ro.js\": 103,\n\t\"./ru\": 104,\n\t\"./ru.js\": 104,\n\t\"./sd\": 105,\n\t\"./sd.js\": 105,\n\t\"./se\": 106,\n\t\"./se.js\": 106,\n\t\"./si\": 107,\n\t\"./si.js\": 107,\n\t\"./sk\": 108,\n\t\"./sk.js\": 108,\n\t\"./sl\": 109,\n\t\"./sl.js\": 109,\n\t\"./sq\": 110,\n\t\"./sq.js\": 110,\n\t\"./sr\": 111,\n\t\"./sr-cyrl\": 112,\n\t\"./sr-cyrl.js\": 112,\n\t\"./sr.js\": 111,\n\t\"./ss\": 113,\n\t\"./ss.js\": 113,\n\t\"./sv\": 114,\n\t\"./sv.js\": 114,\n\t\"./sw\": 115,\n\t\"./sw.js\": 115,\n\t\"./ta\": 116,\n\t\"./ta.js\": 116,\n\t\"./te\": 117,\n\t\"./te.js\": 117,\n\t\"./tet\": 118,\n\t\"./tet.js\": 118,\n\t\"./tg\": 119,\n\t\"./tg.js\": 119,\n\t\"./th\": 120,\n\t\"./th.js\": 120,\n\t\"./tk\": 121,\n\t\"./tk.js\": 121,\n\t\"./tl-ph\": 122,\n\t\"./tl-ph.js\": 122,\n\t\"./tlh\": 123,\n\t\"./tlh.js\": 123,\n\t\"./tr\": 124,\n\t\"./tr.js\": 124,\n\t\"./tzl\": 125,\n\t\"./tzl.js\": 125,\n\t\"./tzm\": 126,\n\t\"./tzm-latn\": 127,\n\t\"./tzm-latn.js\": 127,\n\t\"./tzm.js\": 126,\n\t\"./ug-cn\": 128,\n\t\"./ug-cn.js\": 128,\n\t\"./uk\": 129,\n\t\"./uk.js\": 129,\n\t\"./ur\": 130,\n\t\"./ur.js\": 130,\n\t\"./uz\": 131,\n\t\"./uz-latn\": 132,\n\t\"./uz-latn.js\": 132,\n\t\"./uz.js\": 131,\n\t\"./vi\": 133,\n\t\"./vi.js\": 133,\n\t\"./x-pseudo\": 134,\n\t\"./x-pseudo.js\": 134,\n\t\"./yo\": 135,\n\t\"./yo.js\": 135,\n\t\"./zh-cn\": 136,\n\t\"./zh-cn.js\": 136,\n\t\"./zh-hk\": 137,\n\t\"./zh-hk.js\": 137,\n\t\"./zh-mo\": 138,\n\t\"./zh-mo.js\": 138,\n\t\"./zh-tw\": 139,\n\t\"./zh-tw.js\": 139\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 150;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number) => void;","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\n\nconst smLogger = debug('state-manager-ts');\n\nimport {equalityFunction} from '../util/EqualityFunctions';\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass StateManagementUtil {\n  private static _instance:StateManagementUtil|null = null;\n\n  /*\n    Singleton\n   */\n  public static create():StateManagementUtil {\n    if (StateManagementUtil._instance === null) {\n      StateManagementUtil._instance = new StateManagementUtil();\n    }\n    return StateManagementUtil._instance;\n\n  }\n\n  protected applicationState:stateValue[];\n  protected stateChangeListeners:stateListeners[];\n\n  protected constructor() {\n    this.applicationState = [];\n    this.stateChangeListeners = [];\n  }\n\n  private isStatePresent(name:string):boolean {\n    const result = (this.applicationState.findIndex(element => element.name === name) >= 0);\n    smLogger(`State Manager: Checking state of ${name} is present = ${result}`);\n    return result;\n  }\n\n  private informChangeListenersForStateWithName(name:string, stateObjValue:any) {\n    smLogger(`State Manager: Informing state listeners of ${name}`);\n    const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      smLogger(`State Manager: Found state listeners of ${name}`);\n      /* let each state change listener know */\n      const changeListenersForName = this.stateChangeListeners[foundIndex];\n      for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n        smLogger(`State Manager: Found state listener of ${name} - informing`);\n        const listener = changeListenersForName.listeners[index];\n        listener.stateChanged(name, stateObjValue);\n      }\n    }\n  }\n\n\n  /*\n      Add a state listener for a given state name\n      the listener should be a function with two parameters\n      name - string - the name of the state variable that they want to be informed about\n      stateObjValue - object - the new state value\n     */\n  public addChangeListenerForName(name:string, listener:StateChangeListener):void {\n    smLogger(`State Manager: Adding state listener for ${name}`);\n    const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      const changeListenersForName = this.stateChangeListeners[foundIndex];\n      changeListenersForName.listeners.push(listener);\n    } else {\n      smLogger(`State Manager: Adding state listener for ${name} - first occurrence`);\n      const listenersNameArrayPair = {\n        name,\n        listeners: [listener],\n      };\n      this.stateChangeListeners.push(listenersNameArrayPair);\n    }\n  }\n\n  public getStateByName(name:string):any {\n    smLogger(`State Manager: Getting state for ${name}`);\n    let stateValueObj = {};\n    const foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      // get the current state\n      const stateNameValuePair = this.applicationState[foundIndex];\n      stateValueObj = stateNameValuePair.value;\n      smLogger(`State Manager: Found previous state for ${name}`);\n      smLogger(stateValueObj);\n    } else {\n      // create the state if not already present\n      stateValueObj = this.addStateByName(name, []);\n    }\n    return stateValueObj;\n  }\n\n  public setStateByName(name:string, stateObjectForName:any):void {\n    smLogger(`State Manager: Setting state for ${name}`);\n    smLogger(stateObjectForName);\n    const foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      // set the current state\n      const stateNameValuePair = this.applicationState[foundIndex];\n      stateNameValuePair.value = stateObjectForName;\n    } else {\n      // create the state if not already present\n      this.addStateByName(name, stateObjectForName);\n    }\n    this.informChangeListenersForStateWithName(name, stateObjectForName);\n    return stateObjectForName;\n  }\n\n  public addStateByName(name:string, stateObjForName:any):any {\n    /* create a new state attribute for the application state */\n    if (!this.isStatePresent(name)) {\n      smLogger(`State Manager: Adding state for ${name} - first occurrence`);\n      smLogger(stateObjForName, 201);\n      const stateNameValuePair = {\n        name,\n        value: stateObjForName,\n      };\n      this.applicationState.push(stateNameValuePair);\n    } else {\n      /* get the current state value and replace it */\n      this.setStateByName(name, stateObjForName);\n    }\n    return stateObjForName;\n  }\n\n  public addNewItemToState(name:string, item:any):void { // assumes state is an array\n    smLogger(`State Manager: Adding item to state ${name}`);\n    const state = this.getStateByName(name);\n    state.push(item);\n    smLogger(state);\n    this.informChangeListenersForStateWithName(name, state);\n  }\n\n  public findItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):any { // assumes state is an array\n    let result = {};\n    const state = this.getStateByName(name);\n    const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n    smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n    smLogger(item);\n    if (foundIndex >= 0) {\n      result = state[foundIndex];\n    }\n    return result;\n  }\n\n  public isItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean { // assumes state is an array\n    let result = false;\n    const state = this.getStateByName(name);\n    const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n    if (foundIndex >= 0) {\n      result = true;\n    }\n    return result;\n  }\n\n  public removeItemFromState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n    let result = false;\n    const state = this.getStateByName(name);\n    const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n    if (foundIndex >= 0) {\n      result = true;\n      // remove the item from the state\n      smLogger('State Manager: Found item - removing ');\n      state.splice(foundIndex, 1);\n      smLogger(state);\n      this.setStateByName(name, state);\n    }\n    return result;\n  }\n\n  public updateItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n    let result = false;\n    const state = this.getStateByName(name);\n    const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n    if (foundIndex >= 0) {\n      result = true;\n      // remove the item from the state\n      smLogger('State Manager: Found item - replacing ');\n      state.splice(foundIndex, 1, item);\n      //state.push(item);\n      smLogger(state);\n      this.setStateByName(name, state);\n    } else {\n      // add the item to the state\n      this.addNewItemToState(name, item);\n    }\n    return result;\n  }\n}\n\nconst stateManager:StateManagementUtil = StateManagementUtil.create();\nexport default stateManager;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n    }\n\n    private callbackForMessage(message:any):void {\n        sDebug(`Received message : ${message}`);\n        if (this.listener) this.listener.handleMessage(message);\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData)\n    }\n\n    public sendMessage(message:string):void {\n        this.socket.emit('message',message);\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport downloader from \"./network/DownloadManager\";\nimport stateManager from \"./state/StateManagementUtil\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport notifier from \"./notification/NotificationManager\";\nimport SocketListener from \"./socket/SocketListener\";\nimport socketManager from \"./socket/SocketManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {jsonRequest, RequestType} from \"./network/Types\";\nimport {BlogEntry, Comment, User} from \"./AppTypes\";\n\nconst cLogger = debug('controller-ts');\n\nclass Controller implements SocketListener, StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n\n    constructor() {\n    }\n\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n\n        // setup Async callbacks for the fetch requests\n        this.callbackForUsers = this.callbackForUsers.bind(this);\n        this.callbackForEntries = this.callbackForEntries.bind(this);\n        this.callbackForCreateEntry = this.callbackForCreateEntry.bind(this);\n        this.callbackForCreateComment = this.callbackForCreateComment.bind(this);\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n\n        stateManager.addChangeListenerForName(this.config.stateNames.entries, this);\n\n        return this;\n    }\n\n    stateChanged(name: string, value: any) {\n        cLogger(`State changes ${name}`);\n        cLogger(value);\n        this.applicationView.setState({\n            isLoggedIn: this.isLoggedIn(),\n            loggedInUserId: this.getLoggedInUserId(),\n            selectedEntry: {},\n            entries: value\n        });\n    }\n\n    /*\n    *\n    * Call back functions for database operations\n    *\n     */\n    private callbackForUsers(data: any, status: number) {\n        cLogger('callback for all users');\n        let users:User[] = [];\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            let cbUsers = data;\n            // covert the data to the AppType User\n            cbUsers.forEach((cbUser:any) => {\n                let user:User = {\n                    id:cbUser.id,\n                    username:cbUser.username\n                }\n                users.push(user);\n            });\n        }\n        stateManager.setStateByName(this.config.stateNames.users, users);\n    }\n\n    private static convertJSONCommentToComment(jsonComment:any):Comment {\n        let comment:Comment = {\n            id:jsonComment.id,\n            content:jsonComment.content,\n            createdBy:jsonComment.createdBy,\n            changedOn:jsonComment.changedOn,\n            commentOn:jsonComment.commentOn,\n        };\n        return comment;\n    }\n\n    private static convertJSONUserToUser(jsonUser:any):User {\n        let user:User = {\n            id:jsonUser.id,\n            username:jsonUser.username,\n        }\n        return user;\n    }\n\n    private static convertJSONEntryToBlogEntry(jsonEntry:any):BlogEntry {\n        let entry:BlogEntry = {\n            id: jsonEntry.id,\n            title:jsonEntry.title,\n            content:jsonEntry.content,\n            createdBy:jsonEntry.createdBy,\n            changedOn:jsonEntry.changedOn,\n            User:null,\n            Comments:[],\n        }\n        const cbUser:User|null = jsonEntry.user;\n        if (cbUser) {\n            entry.User = Controller.convertJSONUserToUser(cbUser);\n        }\n        const cbComments:Comment[]|null = jsonEntry.comments;\n        if (cbComments) {\n            cbComments.forEach((cbComment:any) => {\n                let comment = Controller.convertJSONCommentToComment(cbComment);\n                entry.Comments.push(comment);\n            });\n        }\n        return entry;\n    }\n\n    private callbackForEntries(data: any, status: number) {\n        cLogger('callback for all entries');\n        let entries:BlogEntry[] = [];\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            data.forEach((cbEntry:any) => {\n                let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(cbEntry);\n                entries.push(entry);\n            });\n        }\n        stateManager.setStateByName(this.config.stateNames.entries, entries);\n    }\n\n    private callbackForCreateEntry(data: any, status: number) {\n        cLogger('callback for create entry');\n        let entry = null;\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(data);\n            stateManager.addNewItemToState(this.config.stateNames.entries, entry);\n        }\n    }\n\n    private callbackForCreateComment(data: any, status: number) {\n        cLogger('callback for create comment');\n        let comment = null;\n        if (status >= 200 && status <= 299) { // do we have any data?\n            let comment:Comment = Controller.convertJSONCommentToComment(data);\n            cLogger(comment);\n            // find the corresponding entry in state\n            let entry = <BlogEntry|null>stateManager.findItemInState(this.config.stateNames.entries, {id: comment.commentOn}, isSame);\n            cLogger(entry);\n            if (entry) {\n                cLogger('callback for create comment - updating entry');\n                // update the entry with the new comment\n                entry.Comments.push(comment);\n                // update the entry in the state manager\n                stateManager.updateItemInState(this.config.stateNames.entries, entry, isSame);\n                // reselect the same entry\n                stateManager.setStateByName(this.config.stateNames.selectedEntry, entry);\n                cLogger(entry);\n            }\n        }\n\n    }\n\n    /*\n    *\n    *   API calls\n    *\n     */\n\n    private getAllUsers(): void {\n        cLogger('Getting All Users');\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.users,\n            type: RequestType.GET,\n            params: {},\n            callback: this.callbackForUsers,\n        };\n        downloader.addApiRequest(jsonRequest, true);\n    }\n\n    private getAllEntries(): void {\n        cLogger('Getting All Entries');\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.entries,\n            type: RequestType.GET,\n            params: {},\n            callback: this.callbackForEntries,\n        };\n        downloader.addApiRequest(jsonRequest, true);\n    }\n\n    private apiDeleteComment(id: number):void {\n        const deleteCommentCB = function (data: any, status: number) {\n            cLogger('callback for delete comment');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.comment,\n            type: RequestType.DELETE,\n            params: {\n                id: id\n            },\n            callback: deleteCommentCB,\n        };\n        downloader.addApiRequest(jsonRequest);\n\n    }\n\n    private apiDeleteEntry(entry: BlogEntry):void {\n        const deleteCB = function (data: any, status: number) {\n            cLogger('callback for delete entry');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.DELETE,\n                params: {\n                    id: entry.id\n                },\n                callback: deleteCB,\n            };\n            downloader.addApiRequest(jsonRequest);\n        }\n    }\n\n    private apiCreateEntry(entry:BlogEntry):void {\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.POST,\n                params: entry,\n                callback: this.callbackForCreateEntry,\n            };\n            downloader.addApiRequest(jsonRequest, true);\n        }\n    }\n\n    private apiCreateComment(comment:Comment):void {\n        if (comment) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.comment,\n                type: RequestType.POST,\n                params: comment,\n                callback: this.callbackForCreateComment,\n            };\n            downloader.addApiRequest(jsonRequest, true);\n        }\n    }\n\n    private apiUpdateEntry(entry:BlogEntry):void {\n        const updateCB = function (data: any, status: number) {\n            cLogger('callback for update entry');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.PUT,\n                params: entry,\n                callback: updateCB,\n            };\n            downloader.addApiRequest(jsonRequest);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL():string {\n        let result = \"/api\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn():boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        cLogger(`Are logged in: ${isLoggedIn}`);\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId():number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLogger(`Logged in user id: ${result}`);\n        return result;\n    }\n\n    /*\n      Get the base data for the application (users, entries)\n     */\n    public initialise():void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        socketManager.setListener(this);\n        // load the users\n        this.getAllUsers();\n        // load the entries\n        this.getAllEntries();\n    }\n\n    // Lets delete a comment\n    deleteComment(id:number) {\n        let entry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n        if (entry) {\n            cLogger(`Handling delete comment for ${entry.id} and comment ${id}`);\n            // find the comment in the entry and remove it from the state\n            let comments = entry.Comments;\n            const foundIndex = comments.findIndex((element: any) => element.id === id);\n            if (foundIndex >= 0) {\n                // remove comment from the array\n                cLogger('Found comment in entry - removing');\n                comments.splice(foundIndex, 1);\n                cLogger(entry);\n                // update the statement manager\n                stateManager.setStateByName(this.config.stateNames.selectedEntry, entry);\n                stateManager.updateItemInState(this.config.stateNames.entries, entry, isSame);\n            }\n        }\n        this.apiDeleteComment(id);\n    }\n\n    public deleteEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(`Handling delete entry for ${entry.id}`);\n            // update the state manager\n            stateManager.removeItemFromState(this.config.stateNames.entries, entry, isSame);\n            // initiate a call to remove from the database\n            this.apiDeleteEntry(entry);\n        }\n    }\n\n    public updateEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(entry);\n            if (entry.id) {\n                cLogger(`Handling update for entry ${entry.id}`);\n                // update the state manager\n                stateManager.updateItemInState(this.config.stateNames.entries, entry, isSame);\n                // update the database\n                this.apiUpdateEntry(entry);\n            } else {\n                cLogger(`Handling create for entry`);\n                // new entry\n                this.apiCreateEntry(entry);\n            }\n        }\n    }\n\n    public addComment(comment:Comment):void  {\n        if (comment) {\n            cLogger(comment);\n            cLogger(`Handling create for comment`);\n            this.apiCreateComment(comment);\n        }\n    }\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message:string):void {\n        cLogger(message);\n    }\n\n    public getCurrentUser():number{\n        return this.getLoggedInUserId();\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        cLogger(`Handling data change ${message.type} on object type ${message.objectType} made by user ${message.user}`);\n        const changeUser = stateManager.findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let stateObj = message.data;\n        cLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.objectType) {\n                        case \"Comment\": {\n                            // updating comments is more tricky as it is a sub object of the blog entry\n                            // find the entry in question\n                            const changedEntry = <BlogEntry|null>stateManager.findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                let comment:Comment = Controller.convertJSONCommentToComment(stateObj);\n                                // add the new comment\n                                changedEntry.Comments.push(comment);\n                                // update the state\n                                stateManager.updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n                                // was this entry current open by the user?\n                                const currentSelectedEntry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n                                if (currentSelectedEntry) {\n                                    if (currentSelectedEntry.id === changedEntry.id) {\n                                        stateManager.setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n                                    }\n                                }\n                                let username = \"unknown\";\n                                if (changeUser) {\n                                    username = changeUser.username;\n                                }\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case \"BlogEntry\": {\n                            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n                            cLogger(\"Converting to BlogEntry type for Create\");\n                            cLogger(entry);\n                            // add the new item to the state\n                            stateManager.addNewItemToState(this.config.stateNames.entries, entry);\n                            let username = \"unknown\";\n                            if (changeUser) {\n                                username = changeUser.username;\n                            }\n\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case \"User\": {\n                            let user:User = Controller.convertJSONUserToUser(stateObj);\n                            // add the new item to the state\n                            stateManager.addNewItemToState(this.config.stateNames.users, user);\n\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.objectType) {\n                        case \"BlogEntry\": {\n                            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n                            cLogger(\"Converting to BlogEntry type for Update\");\n                            cLogger(entry);\n                            // update the item in the state\n                            stateManager.updateItemInState(this.config.stateNames.entries, entry, isSame);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.objectType) {\n                        case \"Comment\": {\n                            // removing comments is more tricky as it is a sub object of the blog entry\n                            // find the entry in question\n                            const changedEntry = <BlogEntry|null>stateManager.findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            cLogger(changedEntry);\n                            if (changedEntry) {\n                                // remove the comment\n                                let comments = changedEntry.Comments;\n                                const foundIndex = comments.findIndex((element:any) => element.id === stateObj.id);\n                                if (foundIndex >= 0) {\n                                    // remove comment from the array\n                                    cLogger('Found comment in entry - removing');\n                                    comments.splice(foundIndex, 1);\n                                    cLogger(changedEntry);\n\n                                    // update the state\n                                    stateManager.updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n                                    // was this entry current open by the user?\n                                    const currentSelectedEntry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n                                    if (currentSelectedEntry) {\n                                        if (currentSelectedEntry.id === changedEntry.id) {\n                                            stateManager.setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n                                        }\n                                    }\n                                }\n\n                            }\n                            break;\n                        }\n                        case \"BlogEntry\": {\n                            cLogger(`Deleting Blog Entry with id ${stateObj.id}`);\n                            const deletedEntry = stateManager.findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            cLogger(deletedEntry);\n                            if (deletedEntry) {\n                                cLogger(`Deleting Blog Entry with id ${deletedEntry.id}`);\n                                stateManager.removeItemFromState(this.config.stateNames.entries, deletedEntry, isSame);\n                                // the current user could be accessing the comments in the entry that was just deleted\n                                const currentSelectedEntry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n                                if (currentSelectedEntry) {\n                                    if (currentSelectedEntry.id === deletedEntry.id) {\n                                        cLogger(`Deleted entry is selected by user, closing sidebars`);\n                                        // ask the application to close any access to the comments\n                                        this.applicationView.hideAllSideBars();\n                                    }\n                                }\n                                notifier.show(deletedEntry.title, `${deletedEntry.User.username} has deleted this entry.`, 'danger');\n                            }\n\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            cLogger(err);\n        }\n\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n  protected applicationView:any;\n  protected document:HTMLDocument;\n  protected uiConfig:any;\n  protected uiPrefs:any;\n\n  protected config: any;\n\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any) {\n    this.applicationView = applicationView;\n    this.document = document;\n    this.uiConfig = uiConfig;\n    this.uiPrefs = uiPrefs;\n    this.config = applicationView.state;\n\n    // state change listening\n    this.stateChanged = this.stateChanged.bind(this);\n\n    // event handlers\n    this.eventStartDrag = this.eventStartDrag.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n  }\n\n  public abstract onDocumentLoaded():void;\n\n\n  /* abstract */\n  protected abstract eventClickItem(event:MouseEvent):void;\n\n  protected abstract getDragData(event:DragEvent):any;\n\n  protected abstract getIdForStateItem(name:string, item:any):string;\n  protected abstract getLegacyIdForStateItem(name:string, item:any):string;\n  protected abstract getDisplayValueForStateItem(name:string, item:any):string;\n  protected abstract getModifierForStateItem(name:string, item:any):string;\n  protected abstract getSecondaryModifierForStateItem(name:string, item:any):string;\n  protected abstract updateView(name:string, newState:any):void;\n\n\n  protected eventStartDrag(event:DragEvent) {\n    avLogger('Abstract View : drag start', 10);\n    const data = JSON.stringify(this.getDragData(event));\n    avLogger(data, 10);\n    // @ts-ignore\n    event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n  }\n\n\n\n  protected createResultsForState(name:string, newState:any):void {\n    avLogger('Abstract View : creating Results', 10);\n    avLogger(newState);\n    const domConfig = this.uiConfig.dom;\n    // remove the previous items from list\n    const viewEl = document.getElementById(domConfig.resultsId);\n    if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n    // add the new children\n    newState.map((item:any, index:number) => {\n\n      const childEl = this.document.createElement(domConfig.resultsElementType);\n      browserUtil.addRemoveClasses(childEl,domConfig.resultsClasses);\n\n      // add the key ids for selection\n      childEl.setAttribute(domConfig.resultDataKeyId, this.getIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultLegacyDataKeyId, this.getLegacyIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultDataSourceId, domConfig.resultDataSourceValue);\n      const displayText = this.getDisplayValueForStateItem(name, item);\n      // add modifiers for patient state\n      const modifier = this.getModifierForStateItem(name, item);\n      const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n      switch (modifier) {\n        case 'normal': {\n          avLogger('Abstract View: normal item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal);\n          if (domConfig.iconNormal !== '') {\n            childEl.innerHTML = displayText + domConfig.iconNormal;\n          } else {\n            childEl.innerText = displayText;\n          }\n\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n\n          break;\n        }\n        case 'active': {\n          avLogger('Abstract View: active item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassActive);\n          if (domConfig.iconActive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconActive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n        case 'inactive': {\n          avLogger('Abstract View: inactive item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassInactive);\n          if (domConfig.iconInactive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconInactive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n      }\n      // add draggable actions\n      if (domConfig.isDraggable) {\n        childEl.setAttribute('draggable', 'true');\n        childEl.addEventListener('dragstart', this.eventStartDrag);\n      }\n      // add selection actions\n      if (domConfig.isClickable) {\n        childEl.addEventListener('click', this.eventClickItem);\n      }\n      avLogger(`Abstract View: Adding child ${item.id}`);\n      if (viewEl) viewEl.appendChild(childEl);\n    });\n  }\n\n  public stateChanged(name: string, newValue: any): void {\n    this.updateView(name, newValue);\n  }\n}\n","import AbstractView from './AbstractView';\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {\n    this.showHide(this.uiPrefs.view.expandedSize);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport moment from 'moment';\n\nimport controller from \"../Controller\";\nimport stateManager from '../state/StateManagementUtil';\nimport {isSame} from '../util/EqualityFunctions';\n\nimport SidebarView from './SidebarView';\nimport StateChangeListener from \"../state/StateChangeListener\";\n\nconst viewLogger = debug('view-ts:comments');\n\nclass CommentSidebarView extends SidebarView implements StateChangeListener{\n    protected commentHeaderEl:HTMLElement|null;\n    protected newCommentFormEl:HTMLElement|null;\n    protected newCommentTextEl:HTMLElement|null;\n    protected newCommentSubmitEl:HTMLElement|null;\n\n\n    constructor(applicationView:any, htmlDocument:HTMLDocument) {\n        super(applicationView, htmlDocument, applicationView.state.ui.commentSideBar, applicationView.state.uiPrefs.commentSideBar);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n\n        // elements\n        this.commentHeaderEl = htmlDocument.getElementById(this.uiConfig.dom.headerId);\n        this.newCommentFormEl = htmlDocument.getElementById(this.uiConfig.dom.newFormId);\n        if (this.newCommentFormEl) this.newCommentFormEl.addEventListener('submit', this.applicationView.handleAddComment);\n        this.newCommentTextEl = htmlDocument.getElementById(this.uiConfig.dom.commentId);\n        this.newCommentSubmitEl = htmlDocument.getElementById(this.uiConfig.dom.submitCommentId);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n    }\n\n    getIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name:string, item:any) {\n        viewLogger(`Getting display value for comment ${item.id} with content ${item.content}`)\n        // find the user for the item from the createdBy attribute\n        const createdBy = stateManager.findItemInState(this.config.stateNames.users, {id: item.createdBy}, isSame);\n        const createdOn = moment(item.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n        return `${item.content} - ${createdBy.username} on ${createdOn}  `;\n    }\n\n    getModifierForStateItem(name:string, item:any) {\n        let result = 'inactive'\n        if (item.createdBy === controller.getLoggedInUserId()) {\n            result = 'normal';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name:string, item:any) {\n        return 'normal';\n    }\n\n    eventClickItem(event:MouseEvent) {\n        event.preventDefault();\n        let entry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n\n        viewLogger(event.target);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        if (!id) {\n            //get the id from the containing element\n            // @ts-ignore\n            let parentEl = event.target.parentNode;\n            id = parentEl.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        }\n        // @ts-ignore\n        viewLogger(`Comment ${event.target.innerText} with id ${id} clicked`, 20);\n        if (id) {\n            id = parseInt(id);\n            // find the comment in the selected entry\n            let comment = entry.Comments.find((comment:any) => comment.id === id);\n            if (comment) {\n                viewLogger(`Comment created by ${comment.createdBy} and current user is ${controller.getLoggedInUserId()}`);\n                // only able to delete if the comment was created by the current user\n                if (comment.createdBy === controller.getLoggedInUserId()) {\n                    this.applicationView.handleDeleteComment(parseInt(id));\n                }\n            }\n        }\n    }\n\n\n    updateView(name:string, newState:any) {\n        viewLogger('Updating view');\n        viewLogger(newState);\n        if (controller.isLoggedIn()) {\n            if (this.newCommentTextEl) this.newCommentTextEl.removeAttribute(\"readonly\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.newCommentTextEl) this.newCommentTextEl.setAttribute(\"readonly\", \"true\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.setAttribute(\"disabled\", \"true\");\n        }\n\n        if (newState && newState.Comments) {\n            if (this.commentHeaderEl) this.commentHeaderEl.innerHTML = newState.title;\n            viewLogger(newState.Comments);\n            this.createResultsForState(name, newState.Comments);\n        }\n    }\n\n    getDragData(event:DragEvent) {}\n}\n\nexport default CommentSidebarView;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\n\nconst beLogger = debug('view-ts:blogentry');\n\n\n// @ts-ignore\nexport default function BlogEntryView({entry, showCommentsHandler, editEntryHandler, deleteEntryHandler}) {\n    if (entry) {\n        beLogger(`Entry ${entry.User.id} === ${controller.getLoggedInUserId()}`);\n\n        let editButton;\n        let deleteButton;\n        if (entry.User.id === controller.getLoggedInUserId()) {\n            editButton =\n                <button type=\"button\"\n                        className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={editEntryHandler}>\n                    &nbsp;&nbsp;Edit &nbsp;\n                    <i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n                </button>\n            deleteButton =\n                <button type=\"button\"\n                        className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={deleteEntryHandler}>\n                    &nbsp;&nbsp;Delete &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        } else {\n            editButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2 \"\n                                 disabled>&nbsp;&nbsp;Edit &nbsp;<i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n            </button>\n            deleteButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2\"\n                                   disabled>&nbsp;&nbsp;Delete &nbsp;\n                <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n            </button>\n        }\n\n\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className={\"card\"} style={{width: \"350px\"}}>\n                    <div className={\"card-header\"}>\n                        {entry.title}&nbsp;&nbsp;&nbsp;&nbsp;<a className=\"text-decoration-none\">\n                        <i className=\"fas fa-comments text-secondary\" entry-id={entry.id}\n                           onClick={showCommentsHandler}></i>&nbsp;&nbsp;\n                        <span className=\"badge badge-pill badge-primary text-right\" entry-id={entry.id}\n                              onClick={showCommentsHandler}>&nbsp;{entry.Comments.length}&nbsp;</span></a>\n                    </div>\n                    <div className={\"card-body\"}>\n                        <p className={\"card-text\"}>{entry.content}</p>\n                        {editButton}\n                        {deleteButton}\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        {entry.User.username} on {moment(entry.changedOn, 'YYYYMMDDHHmmss').format('DD/MM/YYYY')}\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n\n}\n\n\nBlogEntryView.propTypes = {\n    entry: PropTypes.any.isRequired,\n    showCommentsHandler: PropTypes.func.isRequired,\n    editEntryHandler: PropTypes.func.isRequired,\n    deleteEntryHandler: PropTypes.func.isRequired,\n}","import moment from 'moment';\nimport debug from 'debug';\n\nimport SidebarView from './SidebarView';\nimport stateManager from '../state/StateManagementUtil';\nimport {BlogEntry} from \"../AppTypes\";\n\nconst viewLogger = debug('view-ts:details');\n\nclass DetailsSidebarView extends SidebarView{\n  protected formEl:HTMLElement|null;\n  protected titleEl:HTMLInputElement|null;\n  protected contentEl:HTMLTextAreaElement|null;\n  protected changeOnEl:HTMLLabelElement|null;\n\n  constructor(applicationView:any, htmlDocument:HTMLDocument) {\n    super(applicationView, htmlDocument, applicationView.state.ui.entryDetailsSideBar, applicationView.state.uiPrefs.entryDetailsSideBar);\n\n    // handler binding\n    this.updateView = this.updateView.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n\n    // field and form elements\n    this.formEl = document.getElementById(this.uiConfig.dom.formId);\n    this.titleEl = <HTMLInputElement>document.getElementById(this.uiConfig.dom.titleId);\n    this.contentEl = <HTMLTextAreaElement>document.getElementById(this.uiConfig.dom.contentId);\n    this.changeOnEl = <HTMLLabelElement>document.getElementById(this.uiConfig.dom.changedOnId);\n\n    // register state change listening\n    stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n\n    // listen for form submissions\n    if (this.formEl) { // @ts-ignore\n      this.formEl.addEventListener('submit',this.eventClickItem);\n    }\n  }\n\n  getIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  getLegacyIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  eventClickItem(event:MouseEvent) {\n    event.preventDefault();\n    viewLogger('Handling submit Details Sidebar View');\n    viewLogger(event.target);\n    let entry = stateManager.getStateByName(this.config.stateNames.selectedEntry);\n    viewLogger(entry);\n    entry.title = (this.titleEl)?this.titleEl.value.trim():'';\n    entry.content = (this.contentEl)?this.contentEl.value.trim():'';\n    entry.changedOn = parseInt(moment().format('YYYYMMDDHHmmss'));\n    viewLogger(entry);\n    if (this.titleEl) this.titleEl.value = '';\n    if (this.contentEl) this.contentEl.value = '';\n    if (this.changeOnEl) this.changeOnEl.innerText = 'Last Changed On:';\n    this.applicationView.handleUpdateEntry(entry);\n  }\n\n\n  updateView(name:string, newState:any) {\n    viewLogger('Handling update of Details Sidebar View');\n    viewLogger(newState);\n    let entry = <BlogEntry>newState;\n    if (entry && entry.title) {\n      if (this.titleEl) this.titleEl.value = entry.title;\n      if (this.contentEl) this.contentEl.value = entry.content;\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \" + moment(entry.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n    }\n    else {\n      if (this.titleEl) this.titleEl.value = '';\n      if (this.contentEl) this.contentEl.value = '';\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \";\n    }\n  }\n\n  protected getDisplayValueForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getDragData(event: DragEvent): any {\n  }\n\n  protected getModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getSecondaryModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n}\n\nexport default DetailsSidebarView;\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport moment from 'moment';\n\nimport controller from './Controller';\nimport CommentSidebarView from \"./component/CommentSidebarView\";\nimport BlogEntryView from \"./component/BlogEntryView\";\nimport stateManager from \"./state/StateManagementUtil\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport DetailsSidebarView from \"./component/DetailsSidebarView\";\n\nimport {BlogEntry, Comment} from './AppTypes';\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            entries: [],\n            selectedEntry: {},\n            applyUserFilter:false,\n            stateNames: {\n                users: 'users',\n                entries: 'entries',\n                selectedEntry: 'selectedEntry',\n            },\n            apis: {\n                users: '/users',\n                entries: '/blog',\n                entry: '/blog',\n                comment: '/comment',\n                login: '/login',\n            },\n            ui: {\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyEntriesId: 'navigationItemDashboard',\n                    addNewEntryId: 'navigationItemAddNewEntry',\n                    showAllEntriesId: 'navigationItemShowAll'\n                },\n                blogEntry: {},\n                entryDetailsSideBar: {\n                    dom: {\n                        sideBarId: 'detailsSideBar',\n                        formId: 'details',\n                        titleId: 'title',\n                        contentId: 'content',\n                        changedOnId: 'changedOn',\n                        resultDataKeyId: 'id',\n                        isDraggable: false,\n                        isClickable: true,\n                    },\n                },\n                commentSideBar: {\n                    dom: {\n                        sideBarId: 'commentSideBar',\n                        headerId: 'commentHeader',\n                        resultsId: 'comments',\n                        resultsElementType: 'button',\n                        resultsElementAttributes: [\n                            ['type', 'button'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'id',\n                        resultLegacyDataKeyId: 'id',\n                        modifierClassNormal: 'float-right list-group-item-primary text-right',\n                        modifierClassInactive: 'float-left list-group-item-dark text-left',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: 'list-group-item-warning',\n                        iconNormal: '<i class=\"fas fa-trash-alt\"></i>',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        newFormId: \"newComment\",\n                        commentId: \"comment\",\n                        submitCommentId: \"submitComment\",\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                commentSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                entryDetailsSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                }\n            },\n            controller: {\n                events: {\n                    entry: {\n                        eventDataKeyId: 'entry-id',\n                    },\n                },\n                dataLimit: {\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowMyEntries = this.handleShowMyEntries.bind(this);\n        this.handleSelectEntryComments = this.handleSelectEntryComments.bind(this);\n        this.handleShowEditEntry = this.handleShowEditEntry.bind(this);\n        this.handleUpdateEntry = this.handleUpdateEntry.bind(this);\n        this.handleAddEntry = this.handleAddEntry.bind(this);\n        this.handleAddComment = this.handleAddComment.bind(this);\n        this.handleDeleteEntry = this.handleDeleteEntry.bind(this);\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        logger(this.state.entries);\n        // @ts-ignore\n        logger(this.state.applyUserFilter);\n\n        // @ts-ignore\n        let entriesToDisplay = this.state.entries;\n        // @ts-ignore\n        if (this.state.applyUserFilter && controller.isLoggedIn() && (controller.getLoggedInUserId() > 0)) {\n            entriesToDisplay = entriesToDisplay.filter((entry:BlogEntry) => {\n                return (entry.createdBy === controller.getLoggedInUserId());\n            });\n        }\n        const blog = entriesToDisplay.map((entry:BlogEntry, index:number) =>\n            <BlogEntryView\n                key={index}\n                entry={entry}\n                showCommentsHandler={this.handleSelectEntryComments}\n                editEntryHandler={this.handleShowEditEntry}\n                deleteEntryHandler={this.handleDeleteEntry}\n            />\n        );\n        return (\n            <div className=\"Root row ml-1\">\n                {blog}\n            </div>\n        );\n    }\n\n    cancelDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let entryId = this.modalEl.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = stateManager.findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            if (entry) {\n                // delete the entry using the controller and remove the state manager\n                controller.deleteEntry(entry);\n                // @ts-ignore\n                stateManager.removeItemFromState(this.state.stateNames.entries,entry,isSame);\n            }\n        }\n    }\n\n    componentDidMount() {\n        logger('component Did Mount');\n\n        // add the additional views and configure them\n        this.commentView = new CommentSidebarView(this, document);\n        this.commentView.onDocumentLoaded(); // reset the view state\n\n        this.detailsView = new DetailsSidebarView(this,document);\n        this.detailsView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.addNewEntryId).addEventListener('click', this.handleAddEntry);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyEntriesId).addEventListener('click', this.handleShowMyEntries);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.commentView.eventHide(null);\n        this.detailsView.eventHide(null);\n    }\n\n    handleShowMyEntries(event:Event) {\n        logger('Handling Show My Entries');\n        this.hideAllSideBars();\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.setState({applyUserFilter:true});\n    }\n\n    handleAllEntries(event:Event) {\n        logger('Handling Show All Entries');\n        this.setState({applyUserFilter:false});\n        this.hideAllSideBars();\n    }\n\n    handleAddEntry(event:Event) {\n        logger('Handling Add Entry');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = stateManager.findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n             isSame);\n        logger(creator);\n        // create an empty entry\n        let entry = {\n            title: '',\n            content: '',\n            createdBy: creator.id,\n            changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n            Comments: [],\n            User: {\n                id: creator.id,\n                username: creator.username\n            }\n        }\n        logger(entry);\n        this.setState({selectedEntry:entry});\n        // @ts-ignore\n        stateManager.setStateByName(this.state.stateNames.selectedEntry,entry);\n        this.detailsView.eventShow(event);\n    }\n\n    handleAddComment(event:Event) {\n        logger('Handling Add Comment');\n        event.preventDefault();\n        // get the comment element\n        // @ts-ignore\n        let commentEl:HTMLInputElement = document.getElementById(this.state.ui.commentSideBar.dom.commentId);\n        if (commentEl && commentEl.value.trim().length === 0) return;\n\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = stateManager.findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n            isSame);\n        logger(creator);\n        // find the selected entry\n        // @ts-ignore\n        let entry = stateManager.getStateByName(this.state.stateNames.selectedEntry);\n        if (entry && commentEl) {\n            // create an empty comment\n            // @ts-ignore\n            let comment:Comment = {\n                createdBy: creator.id,\n                commentOn: entry.id,\n                changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n                content: commentEl.value.trim()\n            }\n            commentEl.value = '';\n            controller.addComment(comment);\n            logger(comment);\n        }\n    }\n\n    handleSelectEntryComments(event:MouseEvent) {\n        logger('Handling Select Entry Comments');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = stateManager.findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                stateManager.setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.commentView.eventShow(event);\n            }\n        }\n    }\n\n    handleShowEditEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = stateManager.findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                stateManager.setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.detailsView.eventShow(event);\n            }\n        }\n    }\n\n    handleDeleteEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,entryId);\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = stateManager.findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            this.alert(entry.title,\"Are you sure you want to delete this blog entry?\")\n        }\n    }\n\n    handleDeleteComment(id:number):void {\n        controller.deleteComment(id);\n    }\n\n    // @ts-ignore\n    handleUpdateEntry(entry:BlogEntry) {\n        this.hideAllSideBars();\n        controller.updateEntry(entry);\n    }\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts';\n// debug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n"],"sourceRoot":""}