{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/Controller.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BlogEntryView.tsx","webpack:///./src/component/CommentSidebarView.ts","webpack:///./src/component/DetailsSidebarView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/IndexedDBStateManager.ts","webpack:///./src/state/MemoryStateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","entries","selectedEntry","applyUserFilter","stateNames","users","apis","entry","comment","login","ui","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyEntriesId","addNewEntryId","showAllEntriesId","blogEntry","entryDetailsSideBar","dom","sideBarId","formId","changedOnId","resultDataKeyId","isDraggable","isClickable","commentSideBar","headerId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","newFormId","commentId","submitCommentId","uiPrefs","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleShowMyEntries","handleSelectEntryComments","handleShowEditEntry","handleUpdateEntry","handleAddEntry","handleAddComment","handleDeleteEntry","handleDeleteComment","connectToApplication","window","localStorage","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","entriesToDisplay","filter","createdBy","blog","map","index","event","preventDefault","entryId","getAttribute","parseInt","getStateManager","findItemInState","id","isSame","deleteEntry","removeItemFromState","componentDidMount","commentView","CommentSidebarView","document","onDocumentLoaded","detailsView","DetailsSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","initialise","hideAllSideBars","eventHide","href","setState","handleAllEntries","creator","changedOn","moment","format","Comments","User","username","setStateByName","eventShow","commentEl","value","trim","length","getStateByName","commentOn","addComment","target","setAttribute","deleteComment","updateEntry","React","Component","log","console","info","element","ReactDOM","cLogger","Controller","aggregateStateManager","AggregateStateManager","MemoryStateManager","BrowserStorageStateManager","objectStores","name","keyField","indexedDBStateManager","IndexedDBStateManager","socketManager","callbackForUsers","status","data","user","cbUser","convertJSONCommentToComment","jsonComment","convertJSONUserToUser","jsonUser","convertJSONEntryToBlogEntry","jsonEntry","cbComments","callbackForEntries","callbackForCreateEntry","callbackForCreateComment","getAllUsers","jsonRequest","url","type","RequestType","params","callback","downloader","getAllEntries","apiDeleteComment","deleteCommentCB","apiDeleteEntry","deleteCB","apiCreateEntry","apiCreateComment","apiUpdateEntry","updateCB","getServerAPIURL","result","comments","foundIndex","handleMessage","handleDataChangedByAnotherUser","message","changeUser","stateObj","changedEntry","currentSelectedEntry","notifier","deletedEntry","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","values","avLogger","AbstractView","applicationView","eventStartDrag","JSON","createResultsForState","domConfig","viewEl","browserUtil","newState","childEl","displayText","modifier","secondModifier","item","beLogger","BlogEntryView","showCommentsHandler","editEntryHandler","deleteEntryHandler","editButton","deleteButton","width","propTypes","PropTypes","any","isRequired","func","viewLogger","htmlDocument","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","createdOn","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","parentEl","updateView","getDragData","SidebarView","stateManager","sidePanelEl","closeButtonEl","showHide","apiLogger","ApiUtil","fetchJSON","fetch","response","apiFetchJSONWithPost","request","postParameters","method","headers","body","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addApiRequest","isPriority","requestId","uuid","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","initiateFetchForQueueItem","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","sDebug","SocketManager","callbackForMessage","callbackForData","dataObj","setListener","io","sendMessage","smLogger","stateEventType","AbstractStateManager","suppressEventEmits","eventType","StateChanged","previousObjValue","changeListenersForName","listener","listenersNameArrayPair","listeners","stateObjForName","stateValueObj","informListeners","testForEqualityFunction","oldItem","manager","lsLogger","getInstance","useLocalStorage","_isStatePresent","_addNewNamedStateToStorage","stringifiedSaveData","_replaceNamedStateInStorage","_getState","savedResults","savedResultsJSON","_saveState","newValue","idLogger","openDB","upgrade","collections","db","collection","keyPath","autoIncrement","blocked","blocking","terminated","checkForObjectStore","saveItemsToCollection","saveData","objectStore","fn","removeAllItemsFromCollectionKey","transaction","saveWithCollectionKey","getWithCollectionKey","cursor","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","previousItem","msManager","BrowserUtil","scrollSmoothToId","block","behavior","scrollSmoothTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAEA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,aAAO,EAAE,EAHA;AAITC,mBAAa,EAAE,EAJN;AAKTC,qBAAe,EAAC,KALP;AAMTC,gBAAU,EAAE;AACRC,aAAK,EAAE,OADC;AAERJ,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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport moment from 'moment';\n\nimport controller from './Controller';\nimport CommentSidebarView from \"./component/CommentSidebarView\";\nimport BlogEntryView from \"./component/BlogEntryView\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport DetailsSidebarView from \"./component/DetailsSidebarView\";\n\nimport {BlogEntry, Comment} from './AppTypes';\nimport IndexedDBUtil from \"./state/IndexedDBStateManager\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            entries: [],\n            selectedEntry: {},\n            applyUserFilter:false,\n            stateNames: {\n                users: 'users',\n                entries: 'entries',\n                selectedEntry: 'selectedEntry',\n            },\n            apis: {\n                users: '/users',\n                entries: '/blog',\n                entry: '/blog',\n                comment: '/comment',\n                login: '/login',\n            },\n            ui: {\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyEntriesId: 'navigationItemDashboard',\n                    addNewEntryId: 'navigationItemAddNewEntry',\n                    showAllEntriesId: 'navigationItemShowAll'\n                },\n                blogEntry: {},\n                entryDetailsSideBar: {\n                    dom: {\n                        sideBarId: 'detailsSideBar',\n                        formId: 'details',\n                        titleId: 'title',\n                        contentId: 'content',\n                        changedOnId: 'changedOn',\n                        resultDataKeyId: 'id',\n                        isDraggable: false,\n                        isClickable: true,\n                    },\n                },\n                commentSideBar: {\n                    dom: {\n                        sideBarId: 'commentSideBar',\n                        headerId: 'commentHeader',\n                        resultsId: 'comments',\n                        resultsElementType: 'button',\n                        resultsElementAttributes: [\n                            ['type', 'button'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'id',\n                        resultLegacyDataKeyId: 'id',\n                        modifierClassNormal: 'float-right list-group-item-primary text-right',\n                        modifierClassInactive: 'float-left list-group-item-dark text-left',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: 'list-group-item-warning',\n                        iconNormal: '<i class=\"fas fa-trash-alt\"></i>',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        newFormId: \"newComment\",\n                        commentId: \"comment\",\n                        submitCommentId: \"submitComment\",\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                commentSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                entryDetailsSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                }\n            },\n            controller: {\n                events: {\n                    entry: {\n                        eventDataKeyId: 'entry-id',\n                    },\n                },\n                dataLimit: {\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowMyEntries = this.handleShowMyEntries.bind(this);\n        this.handleSelectEntryComments = this.handleSelectEntryComments.bind(this);\n        this.handleShowEditEntry = this.handleShowEditEntry.bind(this);\n        this.handleUpdateEntry = this.handleUpdateEntry.bind(this);\n        this.handleAddEntry = this.handleAddEntry.bind(this);\n        this.handleAddComment = this.handleAddComment.bind(this);\n        this.handleDeleteEntry = this.handleDeleteEntry.bind(this);\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        logger(this.state.entries);\n        // @ts-ignore\n        logger(this.state.applyUserFilter);\n\n        // @ts-ignore\n        let entriesToDisplay = this.state.entries;\n        // @ts-ignore\n        if (this.state.applyUserFilter && controller.isLoggedIn() && (controller.getLoggedInUserId() > 0)) {\n            entriesToDisplay = entriesToDisplay.filter((entry:BlogEntry) => {\n                return (entry.createdBy === controller.getLoggedInUserId());\n            });\n        }\n        const blog = entriesToDisplay.map((entry:BlogEntry, index:number) =>\n            <BlogEntryView\n                key={index}\n                entry={entry}\n                showCommentsHandler={this.handleSelectEntryComments}\n                editEntryHandler={this.handleShowEditEntry}\n                deleteEntryHandler={this.handleDeleteEntry}\n            />\n        );\n        return (\n            <div className=\"Root row ml-1\">\n                {blog}\n            </div>\n        );\n    }\n\n    cancelDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let entryId = this.modalEl.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            if (entry) {\n                // delete the entry using the controller and remove the state manager\n                controller.deleteEntry(entry);\n                // @ts-ignore\n                controller.getStateManager().removeItemFromState(this.state.stateNames.entries,entry,isSame);\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n        // add the additional views and configure them\n        this.commentView = new CommentSidebarView(this, document,controller.getStateManager());\n        this.commentView.onDocumentLoaded(); // reset the view state\n\n        this.detailsView = new DetailsSidebarView(this,document,controller.getStateManager());\n        this.detailsView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.addNewEntryId).addEventListener('click', this.handleAddEntry);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyEntriesId).addEventListener('click', this.handleShowMyEntries);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.commentView.eventHide(null);\n        this.detailsView.eventHide(null);\n    }\n\n    handleShowMyEntries(event:Event) {\n        logger('Handling Show My Entries');\n        this.hideAllSideBars();\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.setState({applyUserFilter:true});\n    }\n\n    handleAllEntries(event:Event) {\n        logger('Handling Show All Entries');\n        this.setState({applyUserFilter:false});\n        this.hideAllSideBars();\n    }\n\n    handleAddEntry(event:Event) {\n        logger('Handling Add Entry');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n             isSame);\n        logger(creator);\n        // create an empty entry\n        let entry = {\n            title: '',\n            content: '',\n            createdBy: creator.id,\n            changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n            Comments: [],\n            User: {\n                id: creator.id,\n                username: creator.username\n            }\n        }\n        logger(entry);\n        this.setState({selectedEntry:entry});\n        // @ts-ignore\n        controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n        this.detailsView.eventShow(event);\n    }\n\n    handleAddComment(event:Event) {\n        logger('Handling Add Comment');\n        event.preventDefault();\n        // get the comment element\n        // @ts-ignore\n        let commentEl:HTMLInputElement = document.getElementById(this.state.ui.commentSideBar.dom.commentId);\n        if (commentEl && commentEl.value.trim().length === 0) return;\n\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n            isSame);\n        logger(creator);\n        // find the selected entry\n        // @ts-ignore\n        let entry = controller.getStateManager().getStateByName(this.state.stateNames.selectedEntry);\n        if (entry && commentEl) {\n            // create an empty comment\n            // @ts-ignore\n            let comment:Comment = {\n                createdBy: creator.id,\n                commentOn: entry.id,\n                changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n                content: commentEl.value.trim()\n            }\n            commentEl.value = '';\n            controller.addComment(comment);\n            logger(comment);\n        }\n    }\n\n    handleSelectEntryComments(event:MouseEvent) {\n        logger('Handling Select Entry Comments');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.commentView.eventShow(event);\n            }\n        }\n    }\n\n    handleShowEditEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.detailsView.eventShow(event);\n            }\n        }\n    }\n\n    handleDeleteEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,entryId);\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            this.alert(entry.title,\"Are you sure you want to delete this blog entry?\")\n        }\n    }\n\n    handleDeleteComment(id:number):void {\n        controller.deleteComment(id);\n    }\n\n    // @ts-ignore\n    handleUpdateEntry(entry:BlogEntry) {\n        this.hideAllSideBars();\n        controller.updateEntry(entry);\n    }\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\nlocalStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts state-manager-ms';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import debug from 'debug';\nimport downloader from \"./network/DownloadManager\";\nimport MemoryStateManager from \"./state/MemoryStateManager\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport notifier from \"./notification/NotificationManager\";\nimport SocketListener from \"./socket/SocketListener\";\nimport socketManager from \"./socket/SocketManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {jsonRequest, RequestType} from \"./network/Types\";\nimport {BlogEntry, Comment, User} from \"./AppTypes\";\nimport {AbstractStateManager} from \"./state/AbstractStateManager\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport IndexedDBStateManager,{collection} from \"./state/IndexedDBStateManager\";\n\nconst cLogger = debug('controller-ts');\n\nclass Controller implements SocketListener, StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    protected stateManager: AbstractStateManager;\n\n    constructor() {\n        let aggregateStateManager:AggregateStateManager = AggregateStateManager.getInstance();\n        this.stateManager = aggregateStateManager;\n        // store information in local storage, indexeddb, and memory\n        aggregateStateManager.addStateManager(MemoryStateManager.getInstance());\n        aggregateStateManager.addStateManager(BrowserStorageStateManager.getInstance());\n        let objectStores:collection[] = [\n            { name: 'users', keyField: 'id'},\n            { name: 'entries', keyField: 'id'},\n            { name: 'selectedEntry', keyField: 'id'}\n        ];\n        let indexedDBStateManager = IndexedDBStateManager.getInstance();\n        indexedDBStateManager.initialise(objectStores).then((result) => {\n            cLogger('indexed DB setup');\n        });\n        aggregateStateManager.addStateManager(indexedDBStateManager);\n    }\n\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        \n\n        // setup Async callbacks for the fetch requests\n        this.callbackForUsers = this.callbackForUsers.bind(this);\n        this.callbackForEntries = this.callbackForEntries.bind(this);\n        this.callbackForCreateEntry = this.callbackForCreateEntry.bind(this);\n        this.callbackForCreateComment = this.callbackForCreateComment.bind(this);\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.entries, this);\n\n        return this;\n    }\n\n    /*\n  Get the base data for the application (users, entries)\n */\n    public initialise():void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        socketManager.setListener(this);\n        // load the users\n        this.getAllUsers();\n        // load the entries\n        this.getAllEntries();\n    }\n    \n    public getStateManager():AbstractStateManager {\n        return this.stateManager;\n    }\n\n\n    /*\n    *\n    * Call back functions for database operations\n    *\n     */\n    private callbackForUsers(data: any, status: number) {\n        cLogger('callback for all users');\n        let users:User[] = [];\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            // covert the data to the AppType User\n            data.forEach((cbUser:any) => {\n                let user:User = {\n                    id:cbUser.id,\n                    username:cbUser.username\n                }\n                users.push(user);\n            });\n        }\n        this.getStateManager().setStateByName(this.config.stateNames.users, users);\n    }\n\n    private static convertJSONCommentToComment(jsonComment:any):Comment {\n        let comment:Comment = {\n            id:jsonComment.id,\n            content:jsonComment.content,\n            createdBy:jsonComment.createdBy,\n            changedOn:jsonComment.changedOn,\n            commentOn:jsonComment.commentOn,\n        };\n        return comment;\n    }\n\n    private static convertJSONUserToUser(jsonUser:any):User {\n        let user:User = {\n            id:jsonUser.id,\n            username:jsonUser.username,\n        }\n        return user;\n    }\n\n    private static convertJSONEntryToBlogEntry(jsonEntry:any):BlogEntry {\n        let entry:BlogEntry = {\n            id: jsonEntry.id,\n            title:jsonEntry.title,\n            content:jsonEntry.content,\n            createdBy:jsonEntry.createdBy,\n            changedOn:jsonEntry.changedOn,\n            User:null,\n            Comments:[],\n        }\n        const cbUser:User|null = jsonEntry.user;\n        if (cbUser) {\n            entry.User = Controller.convertJSONUserToUser(cbUser);\n        }\n        const cbComments:Comment[]|null = jsonEntry.comments;\n        if (cbComments) {\n            cbComments.forEach((cbComment:any) => {\n                let comment = Controller.convertJSONCommentToComment(cbComment);\n                entry.Comments.push(comment);\n            });\n        }\n        return entry;\n    }\n\n    private callbackForEntries(data: any, status: number) {\n        cLogger('callback for all entries');\n        let entries:BlogEntry[] = [];\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            data.forEach((cbEntry:any) => {\n                let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(cbEntry);\n                entries.push(entry);\n            });\n        }\n        this.getStateManager().setStateByName(this.config.stateNames.entries, entries);\n    }\n\n    private callbackForCreateEntry(data: any, status: number) {\n        cLogger('callback for create entry');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(data);\n            this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry);\n        }\n    }\n\n    private callbackForCreateComment(data: any, status: number) {\n        cLogger('callback for create comment');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            let comment:Comment = Controller.convertJSONCommentToComment(data);\n            cLogger(comment);\n            // find the corresponding entry in state\n            let entry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: comment.commentOn}, isSame);\n            cLogger(entry);\n            if (entry) {\n                cLogger('callback for create comment - updating entry');\n                // update the entry with the new comment\n                entry.Comments.push(comment);\n                // update the entry in the state manager\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n                // reselect the same entry\n                this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, entry);\n                cLogger(entry);\n            }\n        }\n\n    }\n\n    /*\n    *\n    *   API calls\n    *\n     */\n\n    private getAllUsers(): void {\n        cLogger('Getting All Users');\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.users,\n            type: RequestType.GET,\n            params: {},\n            callback: this.callbackForUsers,\n        };\n        downloader.addApiRequest(jsonRequest, true);\n    }\n\n    private getAllEntries(): void {\n        cLogger('Getting All Entries');\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.entries,\n            type: RequestType.GET,\n            params: {},\n            callback: this.callbackForEntries,\n        };\n        downloader.addApiRequest(jsonRequest, true);\n    }\n\n    private apiDeleteComment(id: number):void {\n        const deleteCommentCB = function (data: any, status: number) {\n            cLogger('callback for delete comment');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n\n        const jsonRequest: jsonRequest = {\n            url: this.getServerAPIURL() + this.config.apis.comment,\n            type: RequestType.DELETE,\n            params: {\n                id: id\n            },\n            callback: deleteCommentCB,\n        };\n        downloader.addApiRequest(jsonRequest);\n\n    }\n\n    private apiDeleteEntry(entry: BlogEntry):void {\n        const deleteCB = function (data: any, status: number) {\n            cLogger('callback for delete entry');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.DELETE,\n                params: {\n                    id: entry.id\n                },\n                callback: deleteCB,\n            };\n            downloader.addApiRequest(jsonRequest);\n        }\n    }\n\n    private apiCreateEntry(entry:BlogEntry):void {\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.POST,\n                params: entry,\n                callback: this.callbackForCreateEntry,\n            };\n            downloader.addApiRequest(jsonRequest, true);\n        }\n    }\n\n    private apiCreateComment(comment:Comment):void {\n        if (comment) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.comment,\n                type: RequestType.POST,\n                params: comment,\n                callback: this.callbackForCreateComment,\n            };\n            downloader.addApiRequest(jsonRequest, true);\n        }\n    }\n\n    private apiUpdateEntry(entry:BlogEntry):void {\n        const updateCB = function (data: any, status: number) {\n            cLogger('callback for update entry');\n            if (status >= 200 && status <= 299) { // do we have any data?\n                cLogger(data);\n            }\n        }\n\n        if (entry) {\n            const jsonRequest:jsonRequest = {\n                url: this.getServerAPIURL() + this.config.apis.entries,\n                type: RequestType.PUT,\n                params: entry,\n                callback: updateCB,\n            };\n            downloader.addApiRequest(jsonRequest);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL():string {\n        let result = \"/api\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn():boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        cLogger(`Are logged in: ${isLoggedIn}`);\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId():number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLogger(`Logged in user id: ${result}`);\n        return result;\n    }\n\n\n\n    // Lets delete a comment\n    deleteComment(id:number) {\n        let entry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        if (entry) {\n            cLogger(`Handling delete comment for ${entry.id} and comment ${id}`);\n            // find the comment in the entry and remove it from the state\n            let comments = entry.Comments;\n            const foundIndex = comments.findIndex((element: any) => element.id === id);\n            if (foundIndex >= 0) {\n                // remove comment from the array\n                cLogger('Found comment in entry - removing');\n                comments.splice(foundIndex, 1);\n                cLogger(entry);\n                // update the statement manager\n                this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, entry);\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n            }\n        }\n        this.apiDeleteComment(id);\n    }\n\n    public deleteEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(`Handling delete entry for ${entry.id}`);\n            // update the state manager\n            this.getStateManager().removeItemFromState(this.config.stateNames.entries, entry, isSame);\n            // initiate a call to remove from the database\n            this.apiDeleteEntry(entry);\n        }\n    }\n\n    public updateEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(entry);\n            if (entry.id) {\n                cLogger(`Handling update for entry ${entry.id}`);\n                // update the state manager\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n                // update the database\n                this.apiUpdateEntry(entry);\n            } else {\n                cLogger(`Handling create for entry`);\n                // new entry\n                this.apiCreateEntry(entry);\n            }\n        }\n    }\n\n    public addComment(comment:Comment):void  {\n        if (comment) {\n            cLogger(comment);\n            cLogger(`Handling create for comment`);\n            this.apiCreateComment(comment);\n        }\n    }\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message:string):void {\n        cLogger(message);\n    }\n\n    public getCurrentUser():number{\n        return this.getLoggedInUserId();\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        cLogger(`Handling data change ${message.type} on object type ${message.objectType} made by user ${message.user}`);\n        const changeUser = this.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let stateObj = message.data;\n        cLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.objectType) {\n                        case \"Comment\": {\n                            // updating comments is more tricky as it is a sub object of the blog entry\n                            // find the entry in question\n                            const changedEntry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                let comment:Comment = Controller.convertJSONCommentToComment(stateObj);\n                                // add the new comment\n                                changedEntry.Comments.push(comment);\n                                // update the state\n                                this.getStateManager().updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n                                // was this entry current open by the user?\n                                const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n                                if (currentSelectedEntry) {\n                                    if (currentSelectedEntry.id === changedEntry.id) {\n                                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n                                    }\n                                }\n                                let username = \"unknown\";\n                                if (changeUser) {\n                                    username = changeUser.username;\n                                }\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case \"BlogEntry\": {\n                            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n                            cLogger(\"Converting to BlogEntry type for Create\");\n                            cLogger(entry);\n                            // add the new item to the state\n                            this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry);\n                            let username = \"unknown\";\n                            if (changeUser) {\n                                username = changeUser.username;\n                            }\n\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case \"User\": {\n                            let user:User = Controller.convertJSONUserToUser(stateObj);\n                            // add the new item to the state\n                            this.getStateManager().addNewItemToState(this.config.stateNames.users, user);\n\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.objectType) {\n                        case \"BlogEntry\": {\n                            let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n                            cLogger(\"Converting to BlogEntry type for Update\");\n                            cLogger(entry);\n                            // update the item in the state\n                            this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.objectType) {\n                        case \"Comment\": {\n                            // removing comments is more tricky as it is a sub object of the blog entry\n                            // find the entry in question\n                            const changedEntry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            cLogger(changedEntry);\n                            if (changedEntry) {\n                                // remove the comment\n                                let comments = changedEntry.Comments;\n                                const foundIndex = comments.findIndex((element:any) => element.id === stateObj.id);\n                                if (foundIndex >= 0) {\n                                    // remove comment from the array\n                                    cLogger('Found comment in entry - removing');\n                                    comments.splice(foundIndex, 1);\n                                    cLogger(changedEntry);\n\n                                    // update the state\n                                    this.getStateManager().updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n                                    // was this entry current open by the user?\n                                    const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n                                    if (currentSelectedEntry) {\n                                        if (currentSelectedEntry.id === changedEntry.id) {\n                                            this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n                                        }\n                                    }\n                                }\n\n                            }\n                            break;\n                        }\n                        case \"BlogEntry\": {\n                            cLogger(`Deleting Blog Entry with id ${stateObj.id}`);\n                            const deletedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            cLogger(deletedEntry);\n                            if (deletedEntry) {\n                                cLogger(`Deleting Blog Entry with id ${deletedEntry.id}`);\n                                this.getStateManager().removeItemFromState(this.config.stateNames.entries, deletedEntry, isSame);\n                                // the current user could be accessing the comments in the entry that was just deleted\n                                const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n                                if (currentSelectedEntry) {\n                                    if (currentSelectedEntry.id === deletedEntry.id) {\n                                        cLogger(`Deleted entry is selected by user, closing sidebars`);\n                                        // ask the application to close any access to the comments\n                                        this.applicationView.hideAllSideBars();\n                                    }\n                                }\n                                notifier.show(deletedEntry.title, `${deletedEntry.User.username} has deleted this entry.`, 'danger');\n                            }\n\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            cLogger(err);\n        }\n\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} - item Added`);\n        cLogger(itemAdded);\n        this.applicationView.setState({\n            isLoggedIn: this.isLoggedIn(),\n            loggedInUserId: this.getLoggedInUserId(),\n            selectedEntry: {},\n            entries: this.getStateManager().getStateByName(name)\n        });\n    }\n\n    stateChangedItemRemoved(name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} - item removed`);\n        cLogger(itemRemoved);\n        this.applicationView.setState({\n            isLoggedIn: this.isLoggedIn(),\n            loggedInUserId: this.getLoggedInUserId(),\n            selectedEntry: {},\n            entries: this.getStateManager().getStateByName(name)\n        });\n    }\n\n    stateChangedItemUpdated(name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} - item updated`);\n        cLogger(itemNewValue);\n        this.applicationView.setState({\n            isLoggedIn: this.isLoggedIn(),\n            loggedInUserId: this.getLoggedInUserId(),\n            selectedEntry: {},\n            entries: this.getStateManager().getStateByName(name)\n        });\n    }\n\n    stateChanged(name: string, values: any) {\n        cLogger(`State changed ${name}`);\n        cLogger(values);\n        this.applicationView.setState({\n            isLoggedIn: this.isLoggedIn(),\n            loggedInUserId: this.getLoggedInUserId(),\n            selectedEntry: {},\n            entries: values\n        });\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n  protected applicationView:any;\n  protected document:HTMLDocument;\n  protected uiConfig:any;\n  protected uiPrefs:any;\n\n  protected config: any;\n\n  protected stateManager: AbstractStateManager;\n\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:AbstractStateManager) {\n    this.applicationView = applicationView;\n    this.document = document;\n    this.uiConfig = uiConfig;\n    this.uiPrefs = uiPrefs;\n    this.config = applicationView.state;\n    this.stateManager = stateManager;\n\n    // state change listening\n    this.stateChanged = this.stateChanged.bind(this);\n\n    // event handlers\n    this.eventStartDrag = this.eventStartDrag.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n  }\n\n  public abstract onDocumentLoaded():void;\n\n\n  /* abstract */\n  protected abstract eventClickItem(event:MouseEvent):void;\n\n  protected abstract getDragData(event:DragEvent):any;\n\n  protected abstract getIdForStateItem(name:string, item:any):string;\n  protected abstract getLegacyIdForStateItem(name:string, item:any):string;\n  protected abstract getDisplayValueForStateItem(name:string, item:any):string;\n  protected abstract getModifierForStateItem(name:string, item:any):string;\n  protected abstract getSecondaryModifierForStateItem(name:string, item:any):string;\n  protected abstract updateView(name:string, newState:any):void;\n\n\n  protected eventStartDrag(event:DragEvent) {\n    avLogger('Abstract View : drag start', 10);\n    const data = JSON.stringify(this.getDragData(event));\n    avLogger(data, 10);\n    // @ts-ignore\n    event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n  }\n\n\n\n  protected createResultsForState(name:string, newState:any):void {\n    avLogger('Abstract View : creating Results', 10);\n    avLogger(newState);\n    const domConfig = this.uiConfig.dom;\n    // remove the previous items from list\n    const viewEl = document.getElementById(domConfig.resultsId);\n    if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n    // add the new children\n    newState.map((item:any, index:number) => {\n\n      const childEl = this.document.createElement(domConfig.resultsElementType);\n      browserUtil.addRemoveClasses(childEl,domConfig.resultsClasses);\n\n      // add the key ids for selection\n      childEl.setAttribute(domConfig.resultDataKeyId, this.getIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultLegacyDataKeyId, this.getLegacyIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultDataSourceId, domConfig.resultDataSourceValue);\n      const displayText = this.getDisplayValueForStateItem(name, item);\n      // add modifiers for patient state\n      const modifier = this.getModifierForStateItem(name, item);\n      const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n      switch (modifier) {\n        case 'normal': {\n          avLogger('Abstract View: normal item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal);\n          if (domConfig.iconNormal !== '') {\n            childEl.innerHTML = displayText + domConfig.iconNormal;\n          } else {\n            childEl.innerText = displayText;\n          }\n\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n\n          break;\n        }\n        case 'active': {\n          avLogger('Abstract View: active item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassActive);\n          if (domConfig.iconActive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconActive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n        case 'inactive': {\n          avLogger('Abstract View: inactive item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassInactive);\n          if (domConfig.iconInactive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconInactive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n      }\n      // add draggable actions\n      if (domConfig.isDraggable) {\n        childEl.setAttribute('draggable', 'true');\n        childEl.addEventListener('dragstart', this.eventStartDrag);\n      }\n      // add selection actions\n      if (domConfig.isClickable) {\n        childEl.addEventListener('click', this.eventClickItem);\n      }\n      avLogger(`Abstract View: Adding child ${item.id}`);\n      if (viewEl) viewEl.appendChild(childEl);\n    });\n  }\n\n  public stateChanged(name: string, newValue: any): void {\n    this.updateView(name, newValue);\n  }\n\n  stateChangedItemAdded(name: string, itemAdded: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemRemoved(name: string, itemRemoved: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemUpdated(name: string, itemUpdated: any, itemNewValue: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\n\nconst beLogger = debug('view-ts:blogentry');\n\n\n// @ts-ignore\nexport default function BlogEntryView({entry, showCommentsHandler, editEntryHandler, deleteEntryHandler}) {\n    if (entry) {\n        beLogger(`Entry ${entry.User.id} === ${controller.getLoggedInUserId()}`);\n\n        let editButton;\n        let deleteButton;\n        if (entry.User.id === controller.getLoggedInUserId()) {\n            editButton =\n                <button type=\"button\"\n                        className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={editEntryHandler}>\n                    &nbsp;&nbsp;Edit &nbsp;\n                    <i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n                </button>\n            deleteButton =\n                <button type=\"button\"\n                        className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={deleteEntryHandler}>\n                    &nbsp;&nbsp;Delete &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        } else {\n            editButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2 \"\n                                 disabled>&nbsp;&nbsp;Edit &nbsp;<i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n            </button>\n            deleteButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2\"\n                                   disabled>&nbsp;&nbsp;Delete &nbsp;\n                <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n            </button>\n        }\n\n\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className={\"card\"} style={{width: \"350px\"}}>\n                    <div className={\"card-header\"}>\n                        {entry.title}&nbsp;&nbsp;&nbsp;&nbsp;<a className=\"text-decoration-none\">\n                        <i className=\"fas fa-comments text-secondary\" entry-id={entry.id}\n                           onClick={showCommentsHandler}></i>&nbsp;&nbsp;\n                        <span className=\"badge badge-pill badge-primary text-right\" entry-id={entry.id}\n                              onClick={showCommentsHandler}>&nbsp;{entry.Comments.length}&nbsp;</span></a>\n                    </div>\n                    <div className={\"card-body\"}>\n                        <p className={\"card-text\"}>{entry.content}</p>\n                        {editButton}\n                        {deleteButton}\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        {entry.User.username} on {moment(entry.changedOn, 'YYYYMMDDHHmmss').format('DD/MM/YYYY')}\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n\n}\n\n\nBlogEntryView.propTypes = {\n    entry: PropTypes.any.isRequired,\n    showCommentsHandler: PropTypes.func.isRequired,\n    editEntryHandler: PropTypes.func.isRequired,\n    deleteEntryHandler: PropTypes.func.isRequired,\n}","import debug from 'debug';\nimport moment from 'moment';\n\nimport controller from \"../Controller\";\nimport stateManager from '../state/MemoryStateManager';\nimport {isSame} from '../util/EqualityFunctions';\n\nimport SidebarView from './SidebarView';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport MemoryStateManager from \"../state/MemoryStateManager\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst viewLogger = debug('view-ts:comments');\n\nclass CommentSidebarView extends SidebarView implements StateChangeListener{\n    protected commentHeaderEl:HTMLElement|null;\n    protected newCommentFormEl:HTMLElement|null;\n    protected newCommentTextEl:HTMLElement|null;\n    protected newCommentSubmitEl:HTMLElement|null;\n\n\n    constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:AbstractStateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.commentSideBar, applicationView.state.uiPrefs.commentSideBar,stateManager);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n\n        // elements\n        this.commentHeaderEl = htmlDocument.getElementById(this.uiConfig.dom.headerId);\n        this.newCommentFormEl = htmlDocument.getElementById(this.uiConfig.dom.newFormId);\n        if (this.newCommentFormEl) this.newCommentFormEl.addEventListener('submit', this.applicationView.handleAddComment);\n        this.newCommentTextEl = htmlDocument.getElementById(this.uiConfig.dom.commentId);\n        this.newCommentSubmitEl = htmlDocument.getElementById(this.uiConfig.dom.submitCommentId);\n\n        // register state change listening\n        this.stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n    }\n\n    getIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name:string, item:any) {\n        viewLogger(`Getting display value for comment ${item.id} with content ${item.content}`)\n        // find the user for the item from the createdBy attribute\n        const createdBy = this.stateManager.findItemInState(this.config.stateNames.users, {id: item.createdBy}, isSame);\n        const createdOn = moment(item.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n        return `${item.content} - ${createdBy.username} on ${createdOn}  `;\n    }\n\n    getModifierForStateItem(name:string, item:any) {\n        let result = 'inactive'\n        if (item.createdBy === controller.getLoggedInUserId()) {\n            result = 'normal';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name:string, item:any) {\n        return 'normal';\n    }\n\n    eventClickItem(event:MouseEvent) {\n        event.preventDefault();\n        let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n\n        viewLogger(event.target);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        if (!id) {\n            //get the id from the containing element\n            // @ts-ignore\n            let parentEl = event.target.parentNode;\n            id = parentEl.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        }\n        // @ts-ignore\n        viewLogger(`Comment ${event.target.innerText} with id ${id} clicked`, 20);\n        if (id) {\n            id = parseInt(id);\n            // find the comment in the selected entry\n            let comment = entry.Comments.find((comment:any) => comment.id === id);\n            if (comment) {\n                viewLogger(`Comment created by ${comment.createdBy} and current user is ${controller.getLoggedInUserId()}`);\n                // only able to delete if the comment was created by the current user\n                if (comment.createdBy === controller.getLoggedInUserId()) {\n                    this.applicationView.handleDeleteComment(parseInt(id));\n                }\n            }\n        }\n    }\n\n\n    updateView(name:string, newState:any) {\n        viewLogger('Updating view');\n        viewLogger(newState);\n        if (controller.isLoggedIn()) {\n            if (this.newCommentTextEl) this.newCommentTextEl.removeAttribute(\"readonly\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.newCommentTextEl) this.newCommentTextEl.setAttribute(\"readonly\", \"true\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.setAttribute(\"disabled\", \"true\");\n        }\n\n        if (newState && newState.Comments) {\n            if (this.commentHeaderEl) this.commentHeaderEl.innerHTML = newState.title;\n            viewLogger(newState.Comments);\n            this.createResultsForState(name, newState.Comments);\n        }\n    }\n\n    getDragData(event:DragEvent) {}\n\n}\n\nexport default CommentSidebarView;\n","import moment from 'moment';\nimport debug from 'debug';\n\nimport SidebarView from './SidebarView';\nimport stateManager from '../state/MemoryStateManager';\nimport {BlogEntry} from \"../AppTypes\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst viewLogger = debug('view-ts:details');\n\nclass DetailsSidebarView extends SidebarView{\n  protected formEl:HTMLElement|null;\n  protected titleEl:HTMLInputElement|null;\n  protected contentEl:HTMLTextAreaElement|null;\n  protected changeOnEl:HTMLLabelElement|null;\n\n  constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:AbstractStateManager) {\n    super(applicationView, htmlDocument, applicationView.state.ui.entryDetailsSideBar, applicationView.state.uiPrefs.entryDetailsSideBar,stateManager);\n\n    // handler binding\n    this.updateView = this.updateView.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n\n    // field and form elements\n    this.formEl = document.getElementById(this.uiConfig.dom.formId);\n    this.titleEl = <HTMLInputElement>document.getElementById(this.uiConfig.dom.titleId);\n    this.contentEl = <HTMLTextAreaElement>document.getElementById(this.uiConfig.dom.contentId);\n    this.changeOnEl = <HTMLLabelElement>document.getElementById(this.uiConfig.dom.changedOnId);\n\n    // register state change listening\n    stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n\n    // listen for form submissions\n    if (this.formEl) { // @ts-ignore\n      this.formEl.addEventListener('submit',this.eventClickItem);\n    }\n  }\n\n  getIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  getLegacyIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  eventClickItem(event:MouseEvent) {\n    event.preventDefault();\n    viewLogger('Handling submit Details Sidebar View');\n    viewLogger(event.target);\n    let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n    viewLogger(entry);\n    entry.title = (this.titleEl)?this.titleEl.value.trim():'';\n    entry.content = (this.contentEl)?this.contentEl.value.trim():'';\n    entry.changedOn = parseInt(moment().format('YYYYMMDDHHmmss'));\n    viewLogger(entry);\n    if (this.titleEl) this.titleEl.value = '';\n    if (this.contentEl) this.contentEl.value = '';\n    if (this.changeOnEl) this.changeOnEl.innerText = 'Last Changed On:';\n    this.applicationView.handleUpdateEntry(entry);\n  }\n\n\n  updateView(name:string, newState:any) {\n    viewLogger('Handling update of Details Sidebar View');\n    viewLogger(newState);\n    let entry = <BlogEntry>newState;\n    if (entry && entry.title) {\n      if (this.titleEl) this.titleEl.value = entry.title;\n      if (this.contentEl) this.contentEl.value = entry.content;\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \" + moment(entry.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n    }\n    else {\n      if (this.titleEl) this.titleEl.value = '';\n      if (this.contentEl) this.contentEl.value = '';\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \";\n    }\n  }\n\n  protected getDisplayValueForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getDragData(event: DragEvent): any {\n  }\n\n  protected getModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getSecondaryModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n}\n\nexport default DetailsSidebarView;\n","import AbstractView from './AbstractView';\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:AbstractStateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {\n    this.showHide(this.uiPrefs.view.expandedSize);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n    }\n\n    private callbackForMessage(message:any):void {\n        sDebug(`Received message : ${message}`);\n        if (this.listener) this.listener.handleMessage(message);\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData)\n    }\n\n    public sendMessage(message:string):void {\n        this.socket.emit('message',message);\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\n\nconst smLogger = debug('state-manager-ts');\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport abstract class AbstractStateManager {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n\n    protected constructor() {\n        this.stateChangeListeners = [];\n        this.suppressEventEmits = false;\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    private isStatePresent(name:string):boolean {\n        const result = this._isStatePresent(name);\n        smLogger(`Checking state of ${name} is present = ${result}`);\n        return result;\n    }\n\n    protected informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType:stateEventType = stateEventType.StateChanged, previousObjValue:any|null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(name,previousObjValue,stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(name,stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    public addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        } else {\n            smLogger(`State Manager: Adding state listener for ${name} - first occurrence`);\n            const listenersNameArrayPair = {\n                name,\n                listeners: [listener],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    public abstract _isStatePresent(name:string):boolean;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        if (!this.isStatePresent(name)) {\n            smLogger(`State Manager: Adding state for ${name} - first occurrence`);\n            smLogger(stateObjForName, 201);\n            this._addNewNamedStateToStorage(state);\n        } else {\n            /* get the current state value and replace it */\n            this._replaceNamedStateInStorage(state);\n        }\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    public getStateByName(name:string):any {\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        if (this._isStatePresent(name)) {\n            // get the current state\n            const state:stateValue = this._getState(name);\n            stateValueObj = state.value;\n            smLogger(`State Manager: Found previous state for ${name}`);\n            smLogger(stateValueObj);\n        } else {\n            // create the state if not already present\n            stateValueObj = this.addStateByName(name, []);\n        }\n        return stateValueObj;\n    }\n\n    public setStateByName(name:string, stateObjectForName:any, informListeners:boolean = true):void {\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        if (this._isStatePresent(name)) {\n            // set the current state\n            const state:stateValue = this._getState(name);\n            state.value = stateObjectForName;\n        } else {\n            // create the state if not already present\n            this.addStateByName(name, stateObjectForName);\n        }\n        this._saveState(name,stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    public addNewItemToState(name:string, item:any):void { // assumes state is an array\n        smLogger(`State Manager: Adding item to state ${name}`);\n        const state = this.getStateByName(name);\n        state.push(item);\n        smLogger(state);\n        this._saveState(name,state);\n        this.informChangeListenersForStateWithName(name, state,stateEventType.ItemAdded);\n    }\n\n    public findItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):any { // assumes state is an array\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    public isItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean { // assumes state is an array\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    public removeItemFromState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n            // remove the item from the state\n            smLogger('State Manager: Found item - removing ');\n            state.splice(foundIndex, 1);\n            smLogger(state);\n            this.setStateByName(name, state,false);\n            this.informChangeListenersForStateWithName(name,item, stateEventType.ItemDeleted);\n        }\n        return result;\n    }\n\n    public updateItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n            let oldItem = state[foundIndex];\n            smLogger('State Manager: Found item - replacing ');\n            state.splice(foundIndex, 1, item);\n            smLogger(state);\n            this.setStateByName(name, state,false);\n            this.informChangeListenersForStateWithName(name,item,stateEventType.ItemUpdated,oldItem);\n        } else {\n            // add the item to the state\n            this.addNewItemToState(name, item);\n        }\n        return result;\n    }\n\n\n}\n","import {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers:AbstractStateManager[];\n    private static _instance:AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super();\n        this.stateManagers = [];\n    }\n\n    public addStateManager(stateManager:AbstractStateManager) {\n        this.stateManagers.push(stateManager);\n        stateManager.suppressEvents();\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((manager) => {\n           manager._addNewNamedStateToStorage(state);\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state:stateValue = {\n            name: name,\n            value: []\n        }\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0]._getState(name);\n        }\n        return state;\n    }\n\n    public _isStatePresent(name: string): boolean {\n        let result = false;\n        if (this.stateManagers.length > 0) {\n            result = this.stateManagers[0]._isStatePresent(name);\n        }\n        return result;\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((manager) => {\n            manager._replaceNamedStateInStorage(state);\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((manager) => {\n            manager._saveState(name,stateObj);\n        });\n    }\n\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager {\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  protected constructor(useLocalStorage:boolean = false) {\n    super();\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n  }\n\n  public  _isStatePresent(name:string):boolean {\n    return (this.storage.getItem(name) != null);\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return savedResults;\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n}\n","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\n\nconst idLogger = debug('indexeddb-ts');\n\nexport type collection = {\n    name:string,\n    keyField:string\n};\n\nclass IndexedDBStateManager extends AbstractStateManager {\n    private static instance: IndexedDBStateManager;\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    public async initialise(collections:collection[]) {\n        await openDB('imboard-db', 1,{\n            upgrade(db, oldVersion, newVersion, transaction) {\n               collections.forEach((collection) => {\n                   db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n               });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    protected constructor() {\n        super();\n        idLogger(`Constructor`);\n    }\n\n\n\n    private async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    private async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    public _isStatePresent(name:string):boolean {\n        return true;\n    }\n\n    public _addNewNamedStateToStorage(state:stateValue):void {\n        let fn = async() => {\n            await this.saveWithCollectionKey(state.name,state.value);\n        };\n        fn();\n    }\n    public _replaceNamedStateInStorage(state:stateValue):void {\n        let fn = async() => {\n            await this.removeAllItemsFromCollectionKey(state.name);\n            await this.saveWithCollectionKey(state.name,state.value);\n        }\n        fn();\n    }\n\n    public _getState(name:string):stateValue {\n        let state:stateValue = {\n            name: name,\n            value: []\n        }\n        let fn = async() => {\n            state.value = await this.getWithCollectionKey(state.name);\n        }\n        return state;\n    }\n\n    public _saveState(name:string,stateObj:any):void {\n        let fn = async() => {\n            await this.removeAllItemsFromCollectionKey(name);\n            await this.saveWithCollectionKey(name,stateObj);\n        }\n        fn();\n    }\n\n    private async removeAllItemsFromCollectionKey(key:string,keyField:string = 'id') {\n        idLogger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB('imboard-db', 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction(key, \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        idLogger(`Saving with key ${key}`);\n        idLogger(saveData);\n        let db: IDBPDatabase = await openDB('imboard-db', 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction(key, \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id'): Promise<any[]> {\n        let savedResults: any[] = [];\n        idLogger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB('imboard-db', 1);\n        await this.checkForObjectStore(db, key, keyField);;\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction(key);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n\n        return savedResults;\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            idLogger(`Adding with key ${key}`);\n            idLogger(item);\n        }\n        let db: IDBPDatabase = await openDB('imboard-db', 1);\n        await this.checkForObjectStore(db, key, keyField);;\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction(key, \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        this.saveItemsToCollection(objectStore, [item], keyField);\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            idLogger(`Removing with key ${key}`);\n            idLogger(item);\n            let db: IDBPDatabase = await openDB('imboard-db', 1);\n            await this.checkForObjectStore(db, key, keyField);;\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction(key, \"readwrite\");\n            // @ts-ignore\n            let objectStore: IDBPObjectStore = transaction.store;\n            // @ts-ignore\n            await objectStore.delete(item[keyField]);\n            await transaction.done;\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            idLogger(`Updating item in storage ${key}`);\n            idLogger(item);\n            let db: IDBPDatabase = await openDB('imboard-db', 1);\n            await this.checkForObjectStore(db, key, keyField);;\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction(key, \"readwrite\");\n            // @ts-ignore\n            let objectStore: IDBPObjectStore = transaction.store;\n            let previousItem: any = await objectStore.get(item[keyField]);\n            if (previousItem) {\n                // @ts-ignore\n                await objectStore.put(item);\n            } else {\n                // @ts-ignore\n                await objectStore.add(item);\n            }\n            await transaction.done;\n        }\n    }\n}\n\nexport default IndexedDBStateManager;","import debug from 'debug';\nimport {AbstractStateManager,stateValue} from './AbstractStateManager';\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryStateManager extends AbstractStateManager {\n  private static _instance:MemoryStateManager;\n\n  public static getInstance() {\n    if (!(MemoryStateManager._instance)) {\n      MemoryStateManager._instance = new MemoryStateManager();\n    }\n    return MemoryStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  protected constructor() {\n    super();\n    this.applicationState = [];\n  }\n\n  public _isStatePresent(name:string):boolean {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    return (foundIndex >= 0);\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex > 0) {\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    return this.applicationState.find(element => element.name === name);\n  }\n\n  public _saveState(name:string,stateObject:any):void {}\n\n}\n\nexport default MemoryStateManager;\n","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}