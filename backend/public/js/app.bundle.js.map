{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/AppTypes.ts","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BoardGameSearchSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/ScoreSheetController.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/socket/Types.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","boardGames","scoreSheet","room","boardGameName","sheetLayoutOptions","timer","sheetData","stateNames","users","scores","selectedEntry","recentUserSearches","bggSearchResults","apis","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","addToMyCollection","removeFromMyCollection","getMyBoardGameCollection","addScoreSheetToBoardGame","ui","draggable","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","chatSideBar","dom","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultDataKeyId","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","extra","fastSearchInputId","boardGameSearchSideBar","formId","queryId","buttonId","scoreSheetSideBar","hasBackgroundImage","imgElementType","imgClasses","uiPrefs","blogEntry","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","connectToApplication","window","localStorage","event","preventDefault","draggedObjectJSON","dataTransfer","getData","draggedObject","JSON","parse","addBoardGameToDisplay","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","games","map","entry","index","addBoardGameToCollection","id","getAttribute","parseInt","currentBoardGamesOnDisplay","findIndex","game","gameId","boardGame","removeBoardGameFromCollection","hideAllSideBars","target","XXXX","decorator","Decorator","Persisted","setAttribute","name","year","removeBoardGameFromDisplay","componentDidMount","chatView","ChatSidebarView","document","getStateManager","onDocumentLoaded","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","thisEl","scoreSheetEl","initialise","eventHide","switchBetweenCollectionAndScoreSheet","showCollection","browserUtil","addRemoveClasses","href","eventShow","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","graphSM","apiURL","find","create","destroy","update","findAll","data","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncDBSM","asyncQLSM","socketListerDelegate","socketManager","chatManager","ChatManager","chatNotificationController","NotificationController","downloadAndSyncSavedBoardGameCollection","downloader","userId","getServerAPIURL","result","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","currentListOfGames","value","callbackBoardGameDetails","status","boardGameDetails","regex","removeBoardGameFromState","findBoardGameInStateFromEvent","startScoreSheet","ScoreSheetController","askUserAboutInvitation","confirm","invite","callbackAddToCollection","currentGameList","updatingBoardGame","callbackRemoveFromCollection","callbackGetCollection","collectionData","boardGameId","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","changedEntry","commentOn","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventStartDrag","createResultForItem","dataSource","domConfig","legacyDataKeyId","childEl","textEl","imgEl","badgeValue","badgeEl","deleteButtonEl","iconEl","displayText","modifier","secondModifier","createResultsForState","viewEl","newState","item","vLogger","vLoggerDetail","changeSearchButton","enable","handleSearch","queryText","query","handleSearchResultsCB","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","updateView","getDragData","eventDeleteClickItem","getBadgeValue","getBackgroundImage","SidebarView","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","deleteButton","startScoreSheetButton","scoreCount","length","favouriteIcon","scoreBadge","Incomplete","image","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","csLogger","csLoggerDetail","selectedChatLog","handleNewInviteReceived","leaveChat","handleUserDrop","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","Priority","messageEl","checkCanComment","addChatMessage","chatMessageEl","messageSenderEl","moment","clearChatLog","reRenderChatMessages","chatLog","renderChatLog","handleChatLogsUpdated","handleChatStarted","handleOfflineMessagesReceived","sscLogger","scoreSheetView","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","currentUsername","receiveLogin","receiveLogout","receiveInvitation","InviteType","receiveQueuedMessages","messages","receiveQueuedInvites","receiveJoinedRoom","XXX","receivedLeftRoom","receiveUserList","uuid","isFinished","receiveMessage","sidePanelEl","closeButtonEl","showHide","size","stateManager","handleFavouriteUserDrop","handleBlockedUserDrop","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","fastSearchEl","$","eventUserSelected","label","reRenderView","myUsername","fastSearchValues","searchValue","source","disabled","minLength","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","fetch","response","fetchJSON","callback","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","type","RequestType","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","parentEl","UserStatus","cmLogger","blockedList","favouriteList","loggedInUsers","listener","blocked","favourite","savedLogs","roomName","lastViewed","numOfNewMessages","ChatRoom","foundLog","created","joinDateTime","from","priority","didChatAlreadyExist","happyToProceed","receiveDecline","wasOffline","invites","joinChat","logout","declineInvite","sendInvite","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","chatLogKey","blockedListKey","favouriteListKey","notLogger","doNotDisturb","handleInvitationDeclined","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","SocketManager","setChatReceiver","callbackForMessage","dataObj","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","filter","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","getInstance","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","configuration","results","config","setCompletedRun","runsComplete","dataAttribute","jsonRequest","Error","msManager","apiSMLogger","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,gBAAU,EAAE,EAHH;AAITC,gBAAU,EAAE;AACRC,YAAI,EAAE,EADE;AAERC,qBAAa,EAAE,EA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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSearchSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            scoreSheet: {\n                room: '',\n                boardGameName: '',\n                sheetLayoutOptions: {},\n                timer: 0,\n                sheetData: {}\n            },\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults'\n            },\n            apis: {\n                login: '/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n                bggSearchCallById: {\n                    queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n                    resultName:'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {findUsers {id, username}}',\n                    resultName: 'findUsers',\n                },\n                addToMyCollection: {\n                    queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n                    resultName: 'addToMyCollection',\n                },\n                removeFromMyCollection: {\n                    queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n                getMyBoardGameCollection: {\n                    queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scores {id, players, scores, jsonData, createdOn}}}',\n                    resultName: 'getMyBoardGameCollection',\n                },\n                addScoreSheetToBoardGame: {\n                    queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id,players,scores,jsonData,createdOn}',\n                    resultName: 'addScoreSheetToBoardGame'\n                }\n\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyCollection: 'navigationItemMyCollection',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat',\n                    showScoreSheet: 'navigationItemScoreSheet',\n\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n                scoreSheetSideBar: {\n                    dom: {\n                        sideBarId: 'scoreSheetSidebar',\n                        resultsId: 'scoreSheets',\n                        resultsElementType: 'div',\n                        resultsElementAttributes: [\n                        ],\n                        resultsClasses: 'card text-white',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'scoreSheet',\n                        modifierClassNormal: '',\n                        modifierClassInactive: '',\n                        modifierClassActive: '',\n                        modifierClassWarning: '',\n                        iconNormal: ' ',\n                        iconInactive: ' ',\n                        iconActive: ' ',\n                        iconWarning: ' ',\n                        isDraggable: false,\n                        isClickable: false,\n                        isDeleteable: false,\n                        resultContentDivClasses: 'card-img-overlay',\n                        resultContentTextElementType: 'div',\n                        resultContentTextClasses: 'ml-2',\n                        hasBackgroundImage: true,\n                        imgElementType: 'img',\n                        imgClasses: 'card-img',\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                scoreSheetSideBar: {\n                    view: {\n                        location: 'bottom',\n                        expandedSize: '25%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    private handleDragOver(event:DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event:Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    public addBoardGameToDisplay(draggedObject:any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames:any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index:number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={() => {}}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            controller.removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event:MouseEvent) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n\n                XXXX\n            }\n        }\n    }\n\n\n    handleDeleteBoardGame(event:MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (controller.isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(this.state.controller.events.boardGames.eventDataKeyId,id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    }\n                    else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        controller.removeBoardGameFromDisplay(boardGame);\n\n                    }\n                }\n                else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this,document,controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this,document,controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this,document,controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.chatId).addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection:boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-none hidden',false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-block visible', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-none hidden', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-block visible', false);\n        }\n        else {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-none hidden', true);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-block visible', false);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-none hidden', false);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-block visible', true);\n        }\n    }\n\n    handleShowCollection(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event:Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowChat(event:Event) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n    }\n\n    handleShowBGGSearch(event:Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\nlocalStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","export enum Decorator  {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any;\n    timer: number,\n    sheetData: any,\n    isFinished: boolean\n}\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {Invitation, Message} from \"./socket/Types\";\nimport {MessageEventListener} from \"./socket/ChatEventListener\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            let chatNotificationController = NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(this.config.stateNames.users);\n        }\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: this.displayedBoardGamesStateManager.getStateByName(this.config.stateNames.boardGames)});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.getMyBoardGameCollection.queryString, {userId:this.getLoggedInUserId()}, this.callbackGetCollection, this.config.stateNames.boardGames, false);\n        }\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.bggSearchCallById.queryString, {gameId:boardGame.gameId}, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    private removeBoardGameFromState(boardGame:any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index,1);\n            this.applicationView.setState({boardGames:currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentBoardGamesOnDisplay,false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private startScoreSheet(invite:Invitation):void {\n        ScoreSheetController.getInstance().setupScoreSheet(this.applicationView, invite);\n    }\n\n\n    askUserAboutInvitation(invite:Invitation):boolean {\n        const result = confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`);\n        // let the application know to setup for a new scoresheet\n        if (result) {\n            this.startScoreSheet(invite);\n        }\n        return result;\n    }\n\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game:any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n                this.applicationView.setState({boardGames:currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(this.config.stateNames.boardGames,updatingBoardGame,isSameGame,false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[this.config.apis.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame:any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n                let index = currentGameList.findIndex((game:any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >=0}`);\n                if (index >= 0) {\n                    cLoggerDetail(`in current state, replacing`);\n                    // replace the current entry\n                    currentGameList.splice(index,1,boardGame);\n                }\n                else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames:currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentGameList,false);\n        }\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(this.config.stateNames.boardGames,boardGame,true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                this.config.stateNames.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                        }\n                        else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                this.config.stateNames.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected abstract getDragData(event: DragEvent): any;\n    protected abstract getIdForStateItem(name: string, item: any): string;\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n    protected abstract getBadgeValue(name:string, item:any): number;\n    protected abstract getBackgroundImage(name:string,item:any) :string;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource:any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl:HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl:HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBackgroundImage) {\n                let imgEl = this.document.createElement(domConfig.imgElementType);\n                browserUtil.addRemoveClasses(imgEl,domConfig.imgClasses);\n                imgEl.setAttribute('src',this.getBackgroundImage(name,item));\n            }\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name,item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    contentEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl:HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type','button');\n                browserUtil.addRemoveClasses(deleteButtonEl,domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length() > 0) {\n                        domConfig.innerText = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl,domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click',(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                contentEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name,item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n}\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameGame} from '../util/EqualityFunctions';\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    // @ts-ignore\n    private formEl:HTMLElement;\n    // @ts-ignore\n    private queryEl:HTMLInputElement;\n    // @ts-ignore\n    private buttonEl:HTMLButtonElement;\n\n\n    private changeSearchButton(enable:boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        }\n        else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\",\"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event:Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, {queryString:queryText}, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n    public handleSearchResultsCB(data:any,status:number,associatedStateName:string):void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults,data.data.findBoardGames,true);\n        }\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit',this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n    return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults,{gameId:parseInt(boardGameId)},isSameGame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame:any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSameGame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSameGame,true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler,startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 ml-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n            </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scores) {\n            scoreCount = boardGame.scores.length;\n        }\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-primary' onClick={showScoresHandler}>{scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src={boardGame.image} alt=\"Card image cap\"></img>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?favouriteIcon:''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?scoreBadge:''}<br/>  {(controller.isLoggedIn())?((boardGame.decorator === Decorator.Persisted)?deleteButton:addButton):deleteButton}</h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                    <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                        <p className=\"card-text\">Loading...</p>\n                        <p className=\"card-text\">\n                            <small className=\"text-muted\">\n                                Loading...\n                            </small>\n                        </p>\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        Loading...\n                    </div>\n                </div>\n            </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../socket/Types\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    private leaveChat(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('',{});\n    }\n\n    handleUserDrop(event:Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username,this.selectedChatLog.roomName);\n            }\n        }\n\n    }\n\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('',{})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage:Message|null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent,Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {csLoggerDetail('Dragged over'); if (this.selectedChatLog) event.preventDefault();});\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click',this.leaveChat);\n\n        this.checkCanComment();\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        }\n        else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl:HTMLElement|null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        this.createResultsForState(name, newState);\n        this.checkCanComment();\n    }\n\n    getDragData(event: DragEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog|null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('',{});\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message} from \"../socket/Types\";\nimport {ChatReceiver} from \"../socket/ChatReceiver\";\nimport controller from \"../Controller\";\nimport notifier from \"../notification/NotificationManager\";\nimport {ScoreSheetView} from \"./ScoreSheetView\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport uuid from \"../util/UUID\";\nimport socketManager from \"../socket/SocketManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n\n    private applicationView: any | null = null;\n    private scoreSheetView: ScoreSheetView|null = null;\n    private currentScoreRoom: string|null = null;\n    private currentlySelectedBoardGame: any|null = null;\n    private currentScoreSheet: ScoreSheet|null = null;\n    private currentUsername = '';\n\n\n    private constructor() {}\n\n    receiveLogin(username: string): void {}\n    receiveLogout(username: string): void {}\n    public setCurrentUser(username:string):void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    public initialise(view:ScoreSheetView) {\n        this.scoreSheetView = view;\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ChatRoom) return; // ignore chat rooms\n\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!controller.askUserAboutInvitation(invite)) {\n                socketManager.sendDeclineInvite(invite.room,this.getCurrentUser());\n            }; // user declines to join the scoresheet\n        }\n        else {\n            // notify the user of the new chat\n            notifier.show('Score Sheet',`Joining score sheet`,'info',7000);\n            socketManager.joinChat(this.getCurrentUser(),invite.room);\n            this.currentScoreRoom = invite.room;\n            // change to the score sheet\n            this.applicationView.handleShowScoreSheet(null);\n        }\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message:Message) => {\n            if (this.currentScoreRoom === message.room) {\n                this.receiveMessage(message);\n            }\n        });\n    }\n\n\n    receiveQueuedInvites(invites: any): void {\n        // not implemented, the user needs to be online for a scoresheet\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (this.currentScoreRoom !== users.room) return;\n\n        // update the sheet to include the user\n        XXX\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n    }\n\n    receiveUserList(users: string[]): void {} // will be managed in the transfer of sheet data\n\n\n    public endScoreSheet():void {\n        alert('Implement end score sheet');\n        // send the final score to everyone\n        if (controller.isLoggedIn()) {\n            if (this.currentScoreRoom) {\n                this.sendScoreSheetState(true);\n            }\n        }\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame:any) {\n        return {}\n        XXXX\n    }\n\n    private getScoreSheetTemplate(boardGame:any) {\n        return {\n\n        }\n        XXXX\n    }\n\n    public startScoreSheet(boardGame:any):void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: {},\n                timer:0,\n                sheetData: {},\n                isFinished:false\n            }\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n            socketManager.joinChat(this.getCurrentUser(),this.currentScoreRoom);\n        }\n    }\n\n    public hasActiveScoreSheet():boolean {\n        let result = false;\n        if ((this.currentScoreRoom) && (this.currentScoreSheet)) result = true;\n        return result;\n    }\n\n    public inviteUser(username:string) {\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n            socketManager.sendInvite(this.getCurrentUser(),username,this.currentScoreRoom,InviteType.ScoreSheet,true,this.currentlySelectedBoardGame.name);\n        }\n    }\n\n    receiveMessage(message: Message): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet:ScoreSheet = message.attachment;\n                    XXX\n                }\n            }\n\n        }\n    }\n\n    public sendScoreSheetState(isFinished:boolean = false) {\nXXX\n    }\n\n\n\n}","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {//414,768,1024\n    let size = this.uiPrefs.view.expandedSize;\n    console.log(window.innerWidth);\n    if (window.innerWidth < 769) {\n      size = '50%';\n    }\n    if (window.innerWidth < 415) {\n      size = '100%';\n    }\n    console.log(size);\n    this.showHide(size);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone:HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event:Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n             switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event:Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {event.preventDefault();});\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event);\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    deleteFavouriteUser(user:any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user:any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user:any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches,user,isSame,true);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n\n  public async postFetchJSON(url:string,query:any) {\n      const postParameters = {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({query})\n      };\n\n      const response = await fetch(url, postParameters);\n      return response.json();\n  }\n\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        if (response.status === 400) {\n          apiLogger(response.json());\n        }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType, RequestCallBackFunction} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addQLApiRequest(url:string, query:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {query:query, variables: variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n  public addQLMutationRequest(url:string, mutation:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {mutation:mutation, variables:variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport socketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver,ChatEmitter {\n    private static _instance: ChatManager;\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage:StateManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private currentUsername = '';\n    protected blockedList: string[] = [];\n    private static blockedListKey = 'im-board-blocked-list';\n    protected favouriteList: string[] = [];\n    private static favouriteListKey = 'im-board-favourite-list';\n\n\n    protected loggedInUsers: string[] = [];\n\n\n    protected chatListeners:ChatEventListener[];\n    protected chatUserListeners:ChatUserEventListener[];\n\n    public addChatEventHandler(receiver:ChatEventListener):void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver:ChatUserEventListener):void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.setChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public isUserLoggedIn(username:string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    private saveLogs():void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey+this.currentUsername,this.chatLogs,false);\n    }\n\n    private saveBlockedList():void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey+this.currentUsername,this.blockedList, false);\n    }\n\n    private saveFavouriteList():void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey+this.currentUsername,this.favouriteList, false);\n    }\n\n    public addUserToBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index,1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username:string):boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n\n    public addUserToFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index,1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username:string):boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList():string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList():string[] {\n        return [...this.blockedList];\n    }\n\n\n    public setCurrentUser(username:string):void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey+this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey+this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey+this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    private ensureChatLogExists(room:string):ChatLog {\n        let log:ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        }\n        else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username:string):ChatLog {\n        let foundLog:ChatLog|null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(),username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    private doesChatRoomExist(room:string) {\n        let index = this.chatLogs.findIndex((log:ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                socketManager.joinChat(this.getCurrentUser(), invite.room);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        }\n        else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index,1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room,username));\n        }\n\n    }\n\n\n    private addMessageToChatLog(log:ChatLog, message:Message) {\n        log.numOfNewMessages ++;\n        log.messages.push(message);\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        }\n        else {\n            this.saveLogs();\n        }\n    }\n\n    public touchChatLog(room:string):void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n        this.saveLogs();\n    }\n\n    public getChatLog(room:string):ChatLog|null {\n        let log:ChatLog|null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog:ChatLog, sender:string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    receiveMessage(message: Message,wasOffline:boolean = false): void {\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,wasOffline));\n        }\n        else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite:Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message:Message) => {\n           this.receiveMessage(message,true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(),room);\n    }\n\n    private removeChatLog(room:string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index,1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(),room);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            socketManager.joinChat(this.currentUsername,log.roomName);\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    declineInvite(room:string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.sendDeclineInvite(room, this.getCurrentUser());\n\n    }\n\n    sendInvite(to: string, room: string,type:InviteType = InviteType.ChatRoom,requiresAcceptDecline:boolean = false, subject:string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log:ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) =>  user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(),to, room,type,requiresAcceptDecline,subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority:Priority = Priority.Normal, attachment:any|undefined): Message|null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(),room, content, created);\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent:Message = {\n            from:this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs():ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n\n    public startChatWithUser(username:string) {\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName);\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName);\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport controller from \"../Controller\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        notifier.show('Room',`User ${username} has declined the invitation to join you.`,'info',7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            result = controller.askUserAboutInvitation(invite);\n\n        }\n        else {\n            // notify the user of the new chat\n            notifier.show('Chat Room',`User ${invite.from} has invited you.`,'info',7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener:ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n    public addUserListener(listener:ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username:string, isBlackedListed:boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        }\n        else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username:string, isFavourited:boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        }\n        else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username:string):boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username:string):boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog,wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from,displayMessage.message,'message',3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged in.`,'warning',5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged out.`,'priority',4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username:string) {\n        ChatManager.getInstance().startChatWithUser(username);\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\",`You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {Invitation, InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n    protected chatReceiver:ChatReceiver|null;\n\n    public setChatReceiver(receiver:ChatReceiver):void {\n        this.chatReceiver = receiver;\n    }\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceiver = null;\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n    }\n\n    private callbackForMessage(content:any):void {\n        sDebug(`Received message : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    private callbackForLogin(message:any):void {\n        sDebug(`Received login : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogin(message);\n    }\n\n\n    private callbackForUserList(message:any):void {\n        sDebug(`Received user list : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveUserList(message);\n    }\n\n    private callbackForLogout(message:any):void {\n        sDebug(`Received logout : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogout(message);\n    }\n\n    private callbackForJoinRoom(data:any):void {\n        sDebug(`Received joined room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveJoinedRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data:any):void {\n        sDebug(`Received left room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receivedLeftRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data:any):void {\n        sDebug(`Received invite : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveInvitation(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data:any):void {\n        sDebug(`Received declined invite : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveDecline(dataObj.room, dataObj.username);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content:any):void {\n        sDebug(`Received chat : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data:any):void {\n        sDebug(`Received queued items : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceiver.receiveQueuedInvites(dataObj.invites);\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceiver.receiveQueuedMessages(dataObj.messages);\n            }\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData);\n        this.socket.on('login',this.callbackForLogin);\n        this.socket.on('logout',this.callbackForLogout);\n        this.socket.on('joinroom',this.callbackForJoinRoom);\n        this.socket.on('exitroom',this.callbackForExitRoom);\n        this.socket.on('invite',this.callbackForInvite);\n        this.socket.on('declineinvite',this.callbackForDeclineInvite);\n        this.socket.on('chat',this.callbackForChat);\n        this.socket.on('queue',this.callbackForQueue);\n        this.socket.on('userlist',this.callbackForUserList);\n    }\n\n    public login(username:string): void {\n        this.socket.emit('login',{username});\n    }\n\n    public logout(username:string):void {\n        this.socket.emit('logout',{username});\n    }\n\n    public joinChat(username:string, room:string):void {\n        this.socket.emit('joinroom',{username,room});\n    }\n\n    public leaveChat(username:string, room:string):void {\n        this.socket.emit('exitroom', {username,room});\n    }\n\n    public sendInvite(from:string, to:string, room:string, type:InviteType = InviteType.ChatRoom, requiresAcceptDecline:boolean = false,subject:string = '') {\n        let inviteObj:any = {\n            from:from,\n            to:to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject:subject\n        }\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from:string, room:string, message:string,created:number,priority: Priority = Priority.Normal, attachment:any = {}) {\n        let messageObj:Message = {\n            from: from,\n            room: room,\n            message:message,\n            created:created,\n            priority:priority,\n            attachment: attachment\n        }\n        this.socket.emit('chat',messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room:string,from:string) {\n        this.socket.emit('declineinvite',{room,from});\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","export type Invitation = {\n    from:string,\n    room:string,\n    message:string,\n    created:number,\n    userList:string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject:string\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[]\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager{\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  public constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  forceResetForGet(stateName: string): void {\n  }\n\n  getConfiguredStateNames(): string[] {\n    return this.configuration;\n  }\n\n  hasCompletedRun(stateName: string): boolean {\n    return false;\n  }\n\n  // @ts-ignore\n  private configuration:string[] = [];\n\n  public initialise(config:string[]) {\n    this.configuration = config;\n  }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config:QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  public constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollToBottomNow (element:HTMLElement):void {\n    if (element) {\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollToBottomSmooth (element:HTMLElement):void {\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n      });\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  scrollTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n\n  addAttributes(element:HTMLElement, attributes:any[]|undefined) {\n     if (attributes) {\n       attributes.forEach((attribute:any) => {\n          element.setAttribute(attribute[0],attribute[1]);\n       });\n     }\n  }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1:any, item2:any):boolean {\n  return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1:any, item2:any):boolean {\n  return (item1.gameId === item2.gameId);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}