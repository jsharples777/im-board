{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/Controller.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BlogEntryView.tsx","webpack:///./src/component/CommentSidebarView.ts","webpack:///./src/component/DetailsSidebarView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/AsynchronousStateManager.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/MemoryStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","entries","selectedEntry","applyUserFilter","stateNames","users","comments","apis","entry","login","ui","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyEntriesId","addNewEntryId","showAllEntriesId","blogEntry","entryDetailsSideBar","dom","sideBarId","formId","changedOnId","resultDataKeyId","isDraggable","isClickable","commentSideBar","headerId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","newFormId","commentId","submitCommentId","uiPrefs","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleShowMyEntries","handleSelectEntryComments","handleShowEditEntry","handleUpdateEntry","handleAddEntry","handleAddComment","handleDeleteEntry","handleDeleteComment","connectToApplication","window","localStorage","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","entriesToDisplay","filter","createdBy","blog","map","index","event","preventDefault","entryId","getAttribute","parseInt","getStateManager","findItemInState","id","isSame","deleteEntry","removeItemFromState","componentDidMount","commentView","CommentSidebarView","document","onDocumentLoaded","detailsView","DetailsSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","initialise","hideAllSideBars","eventHide","href","setState","handleAllEntries","creator","changedOn","moment","format","Comments","User","username","setStateByName","eventShow","commentEl","value","trim","length","getStateByName","comment","commentOn","addComment","target","setAttribute","deleteComment","updateEntry","React","Component","log","console","info","element","ReactDOM","cLogger","Controller","AggregateStateManager","aggregateStateManager","MemoryStateManager","BrowserStorageStateManager","objectStores","name","keyField","restAPIStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","asyncSM","socketManager","getServerAPIURL","result","foundIndex","handleMessage","handleDataChangedByAnotherUser","message","changeUser","user","stateObj","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","avLogger","AbstractView","applicationView","eventStartDrag","data","JSON","createResultsForState","domConfig","viewEl","browserUtil","newState","childEl","displayText","modifier","secondModifier","item","beLogger","BlogEntryView","showCommentsHandler","editEntryHandler","deleteEntryHandler","config","allComments","editButton","deleteButton","width","propTypes","PropTypes","any","isRequired","func","viewLogger","htmlDocument","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","createdOn","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","parentEl","updateView","getDragData","SidebarView","stateManager","sidePanelEl","closeButtonEl","showHide","apiLogger","ApiUtil","fetchJSON","fetch","response","callback","apiFetchJSONWithPost","request","postParameters","method","headers","body","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addApiRequest","isPriority","requestId","uuid","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","initiateFetchForQueueItem","RequestType","downloader","sDebug","SocketManager","callbackForMessage","callbackForData","dataObj","setListener","io","sendMessage","smLogger","stateEventType","AbstractStateManager","suppressEventEmits","forceSaves","eventType","StateChanged","previousObjValue","changeListenersForName","listener","listenersNameArrayPair","listeners","stateObjForName","stateValueObj","informListeners","isPersisted","testForEqualityFunction","oldItem","aggLogger","filters","mWF","manager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","AsynchronousStateManager","lsLogger","getInstance","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","msManager","valueIndex","apiSMLogger","configuration","getConfiguredStateNames","results","hasCompletedRun","setCompletedRun","forceResetForGet","runsComplete","status","jsonRequest","url","type","params","associatedStateName","BrowserUtil","scrollSmoothToId","block","behavior","scrollSmoothTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAEA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,aAAO,EAAE,EAHA;AAITC,mBAAa,EAAE,EAJN;AAKTC,qBAAe,EAAC,KALP;AAMTC,gBAAU,EAAE;AACRC,aAAK,EAAE,OADC;AAERJ,eAAO,EAAE,SAFD;AAGRK,gBAAQ,EAAE,UAHF;AAIRJ,qBAAa,EAAE;AAJP,OANH;AAYTK,UAAI,EAAE;AACFF,aAAK,EAAE,QADL;AAEFJ,eAAO,EAAE,OAFP;AAGFO,aAAK,EAAE,OAHL;AAIFF,gBAAQ,EAAE,UAJR;AAKFG,aAAK,EAAE;AALL,OAZG;AAmBTC,QAAE,EAAE;AACAC,aAAK,EAAE;AACHC,iBAAO,EAAE,OADN;AAEHC,iBAAO,EAAE,aAFN;AAGHC,mBAAS,EAAE,eAHR;AAIHC,wBAAc,EAAE,cAJb;AAKHC,yBAAe,EAAE,eALd;AAMHC,uBAAa,EAAE,aANZ;AAOHC,mBAAS,EAAE,QAPR;AAQHC,mBAAS,EAAE;AARR,SADP;AAWAC,kBAAU,EAAE;AACRC,yBAAe,EAAE,yBADT;AAERC,uBAAa,EAAE,2BAFP;AAGRC,0BAAgB,EAAE;AAHV,SAXZ;AAgBAC,iBAAS,EAAE,EAhBX;AAiBAC,2BAAmB,EAAE;AACjBC,aAAG,EAAE;AACDC,qBAAS,EAAE,gBADV;AAEDC,kBAAM,EAAE,SAFP;AAGDf,mBAAO,EAAE,OAHR;AAIDC,qBAAS,EAAE,SAJV;AAKDe,uBAAW,EAAE,WALZ;AAMDC,2BAAe,EAAE,IANhB;AAODC,uBAAW,EAAE,KAPZ;AAQDC,uBAAW,EAAE;AARZ;AADY,SAjBrB;AA6BAC,sBAAc,EAAE;AACZP,aAAG,EAAE;AACDC,qBAAS,EAAE,gBADV;AAEDO,oBAAQ,EAAE,eAFT;AAGDC,qBAAS,EAAE,UAHV;AAIDC,8BAAkB,EAAE,QAJnB;AAKDC,oCAAwB,EAAE,CACtB,CAAC,MAAD,EAAS,QAAT,CADsB,CALzB;AAQDC,0BAAc,EAAE,sEARf;AASDR,2BAAe,EAAE,IAThB;AAUDS,iCAAqB,EAAE,IAVtB;AAWDC,+BAAmB,EAAE,gDAXpB;AAYDC,iCAAqB,EAAE,2CAZtB;AAaDC,+BAAmB,EAAE,yBAbpB;AAcDC,gCAAoB,EAAE,yBAdrB;AAeDC,sBAAU,EAAE,kCAfX;AAgBDC,wBAAY,EAAE,EAhBb;AAiBDC,sBAAU,EAAE,EAjBX;AAkBDC,uBAAW,EAAE,EAlBZ;AAmBDhB,uBAAW,EAAE,KAnBZ;AAoBDC,uBAAW,EAAE,IApBZ;AAqBDgB,qBAAS,EAAE,YArBV;AAsBDC,qBAAS,EAAE,SAtBV;AAuBDC,2BAAe,EAAE;AAvBhB;AADO;AA7BhB,OAnBK;AA4ETC,aAAO,EAAE;AACL/B,kBAAU,EAAE,EADP;AAELI,iBAAS,EAAE,EAFN;AAGLS,sBAAc,EAAE;AACZmB,cAAI,EAAE;AACFC,oBAAQ,EAAE,OADR;AAEFC,wBAAY,EAAE;AAFZ;AADM,SAHX;AASL7B,2BAAmB,EAAE;AACjB2B,cAAI,EAAE;AACFC,oBAAQ,EAAE,MADR;AAEFC,wBAAY,EAAE;AAFZ;AADW;AAThB,OA5EA;AA4FTC,gBAAU,EAAE;AACRC,cAAM,EAAE;AACJhD,eAAK,EAAE;AACHiD,0BAAc,EAAE;AADb;AADH,SADA;AAMRC,iBAAS,EAAE;AANH;AA5FH,KAAb,CAHU,CAyGV;;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AAEA,UAAKE,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBF,IAAzB,+BAA3B;AACA,UAAKG,yBAAL,GAAiC,MAAKA,yBAAL,CAA+BH,IAA/B,+BAAjC;AACA,UAAKI,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBJ,IAAzB,+BAA3B;AACA,UAAKK,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBL,IAAvB,+BAAzB;AACA,UAAKM,cAAL,GAAsB,MAAKA,cAAL,CAAoBN,IAApB,+BAAtB;AACA,UAAKO,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBP,IAAtB,+BAAxB;AACA,UAAKQ,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBR,IAAvB,+BAAzB;AACA,UAAKS,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBT,IAAzB,+BAA3B;AAEAL,uDAAU,CAACe,oBAAX,gCAAsCC,MAAM,CAACC,YAA7C;AAtHU;AAuHb;;;;SAEDC,c,GAAA,0BAAiB;AACb,WAAOlB,mDAAU,CAACmB,iBAAX,EAAP;AACH,G;;SAED/D,K,GAAA,eAAMgE,KAAN,EAAmBC,OAAnB,EAAmC;AAC/B,SAAKC,OAAL,CAAaC,WAAb,GAA2BH,KAA3B;AACA,SAAKI,SAAL,CAAeD,WAAf,GAA6BF,OAA7B,CAF+B,CAG/B;;AACA,SAAKI,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,KAAKpF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBO,SAAlD,EAJ+B,CAK/B;;AACA,SAAK8D,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2B,KAAKrF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBQ,SAA/C;AACH,G;;SAEDiE,M,GAAA,kBAAS;AAAA;;AACLzF,UAAM,CAAC,eAAD,CAAN,CADK,CAEL;;AACAA,UAAM,CAAC,KAAKG,KAAL,CAAWG,OAAZ,CAAN,CAHK,CAIL;;AACAN,UAAM,CAAC,KAAKG,KAAL,CAAWK,eAAZ,CAAN,CALK,CAOL;;AACA,QAAIkF,gBAAgB,GAAG,KAAKvF,KAAL,CAAWG,OAAlC,CARK,CASL;;AACA,QAAI,KAAKH,KAAL,CAAWK,eAAX,IAA8BoD,mDAAU,CAACxD,UAAX,EAA9B,IAA0DwD,mDAAU,CAACmB,iBAAX,KAAiC,CAA/F,EAAmG;AAC/FW,sBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwB,UAAC9E,KAAD,EAAqB;AAC5D,eAAQA,KAAK,CAAC+E,SAAN,KAAoBhC,mDAAU,CAACmB,iBAAX,EAA5B;AACH,OAFkB,CAAnB;AAGH;;AACD,QAAMc,IAAI,GAAGH,gBAAgB,CAACI,GAAjB,CAAqB,UAACjF,KAAD,EAAkBkF,KAAlB;AAAA,0BAC9B,2DAAC,gEAAD;AACI,WAAG,EAAEA,KADT;AAEI,aAAK,EAAElF,KAFX;AAGI,2BAAmB,EAAE,MAAI,CAACuD,yBAH9B;AAII,wBAAgB,EAAE,MAAI,CAACC,mBAJ3B;AAKI,0BAAkB,EAAE,MAAI,CAACI,iBAL7B;AAMI,cAAM,EAAE,MAAI,CAACtE;AANjB,QAD8B;AAAA,KAArB,CAAb;AAUA,wBACI;AAAK,eAAS,EAAC;AAAf,OACK0F,IADL,CADJ;AAKH,G;;SAED7B,Y,GAAA,sBAAagC,KAAb,EAA0B;AACtB;AACA,SAAKX,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,KAAKpF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBQ,SAAlD,EAFsB,CAGtB;;AACA,SAAK6D,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2B,KAAKrF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBO,SAA/C;AACAyE,SAAK,CAACC,cAAN;AACH,G;;SAED/B,a,GAAA,uBAAc8B,KAAd,EAA2B;AACvB;AACA,SAAKX,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,KAAKpF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBQ,SAAlD,EAFuB,CAGvB;;AACA,SAAK6D,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2B,KAAKrF,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBO,SAA/C;AACAyE,SAAK,CAACC,cAAN,GALuB,CAMvB;;AACA,QAAIC,OAAO,GAAG,KAAKb,OAAL,CAAac,YAAb,CAA0B,KAAKhG,KAAL,CAAWyD,UAAX,CAAsBC,MAAtB,CAA6BhD,KAA7B,CAAmCiD,cAA7D,CAAd;AACA9D,UAAM,4BAA0BkG,OAA1B,CAAN;;AACA,QAAIA,OAAJ,EAAa;AACT;AACAA,aAAO,GAAGE,QAAQ,CAACF,OAAD,CAAlB,CAFS,CAGT;;AACA,UAAMrF,KAAK,GAAG+C,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBH,OAAnE,EAA2E;AAACiG,UAAE,EAACL;AAAJ,OAA3E,EAAwFM,8DAAxF,CAAd;;AACA,UAAI3F,KAAJ,EAAW;AACP;AACA+C,2DAAU,CAAC6C,WAAX,CAAuB5F,KAAvB,EAFO,CAGP;;AACA+C,2DAAU,CAACyC,eAAX,GAA6BK,mBAA7B,CAAiD,KAAKvG,KAAL,CAAWM,UAAX,CAAsBH,OAAvE,EAA+EO,KAA/E,EAAqF2F,8DAArF;AACH;AACJ;AACJ,G;;SAEKG,iB;qFAAN;AAAA;AAAA;AAAA;AAAA;AACI3G,oBAAM,CAAC,qBAAD,CAAN,CADJ,CAGI;;AACA,mBAAK4G,WAAL,GAAmB,IAAIC,qEAAJ,CAAuB,IAAvB,EAA6BC,QAA7B,EAAsClD,mDAAU,CAACyC,eAAX,EAAtC,CAAnB;AACA,mBAAKO,WAAL,CAAiBG,gBAAjB,GALJ,CAKyC;;AAErC,mBAAKC,WAAL,GAAmB,IAAIC,qEAAJ,CAAuB,IAAvB,EAA4BH,QAA5B,EAAqClD,mDAAU,CAACyC,eAAX,EAArC,CAAnB;AACA,mBAAKW,WAAL,CAAiBD,gBAAjB,GARJ,CAUI;;AACA,kBAAID,QAAJ,EAAc;AACV;AACAA,wBAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcU,UAAd,CAAyBE,aAAjD,EAAgEwF,gBAAhE,CAAiF,OAAjF,EAA0F,KAAK5C,cAA/F,EAFU,CAGV;;AACAuC,wBAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcU,UAAd,CAAyBC,eAAjD,EAAkEyF,gBAAlE,CAAmF,OAAnF,EAA4F,KAAKhD,mBAAjG;AACH,eAhBL,CAkBI;AACA;;;AACA,mBAAKkB,OAAL,GAAeyB,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBC,OAA5C,CAAf,CApBJ,CAqBI;;AACA,mBAAKiE,OAAL,GAAe4B,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBE,OAA5C,CAAf,CAtBJ,CAuBI;;AACA,mBAAKkE,SAAL,GAAiB0B,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBG,SAA5C,CAAjB,CAxBJ,CAyBI;;AACA,mBAAKiG,WAAL,GAAmBN,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBI,cAA5C,CAAnB,CA1BJ,CA2BI;;AACA,mBAAKiG,YAAL,GAAoBP,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBK,eAA5C,CAApB,CA5BJ,CA6BI;;AACA,mBAAKiG,UAAL,GAAkBR,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcC,KAAd,CAAoBM,aAA5C,CAAlB,CA9BJ,CAgCI;;AACA,kBAAI,KAAK8F,WAAT,EAAsB,KAAKA,WAAL,CAAiBD,gBAAjB,CAAkC,OAAlC,EAA0C,KAAKnD,YAA/C;AACtB,kBAAI,KAAKqD,YAAT,EAAuB,KAAKA,YAAL,CAAkBF,gBAAlB,CAAmC,OAAnC,EAA2C,KAAKjD,aAAhD;AACvB,kBAAI,KAAKoD,UAAT,EAAqB,KAAKA,UAAL,CAAgBH,gBAAhB,CAAiC,OAAjC,EAAyC,KAAKnD,YAA9C,EAnCzB,CAqCI;;AACAJ,iEAAU,CAAC2D,UAAX;;AAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;SAyCAC,e,GAAA,2BAAkB;AACd,SAAKZ,WAAL,CAAiBa,SAAjB,CAA2B,IAA3B;AACA,SAAKT,WAAL,CAAiBS,SAAjB,CAA2B,IAA3B;AACH,G;;SAEDtD,mB,GAAA,6BAAoB6B,KAApB,EAAiC;AAC7BhG,UAAM,CAAC,0BAAD,CAAN;AACA,SAAKwH,eAAL;;AACA,QAAI,CAAC5D,mDAAU,CAACxD,UAAX,EAAL,EAA8B;AAC1B;AACAwE,YAAM,CAAClB,QAAP,CAAgBgE,IAAhB,GAAuB,KAAKvH,KAAL,CAAWS,IAAX,CAAgBE,KAAvC;AACA;AACH;;AACD,SAAK6G,QAAL,CAAc;AAACnH,qBAAe,EAAC;AAAjB,KAAd;AACH,G;;SAEDoH,gB,GAAA,0BAAiB5B,KAAjB,EAA8B;AAC1BhG,UAAM,CAAC,2BAAD,CAAN;AACA,SAAK2H,QAAL,CAAc;AAACnH,qBAAe,EAAC;AAAjB,KAAd;AACA,SAAKgH,eAAL;AACH,G;;SAEDjD,c,GAAA,wBAAeyB,KAAf,EAA4B;AACxBhG,UAAM,CAAC,oBAAD,CAAN;AACAgG,SAAK,CAACC,cAAN;AACA,SAAKuB,eAAL,GAHwB,CAIxB;;AACA,QAAI,CAAC5D,mDAAU,CAACxD,UAAX,EAAL,EAA8B;AAC1B;AACAwE,YAAM,CAAClB,QAAP,CAAgBgE,IAAhB,GAAuB,KAAKvH,KAAL,CAAWS,IAAX,CAAgBE,KAAvC;AACA;AACH,KATuB,CAUxB;AACA;;;AACA,QAAI+G,OAAO,GAAGjE,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBC,KAAnE,EACV;AAAC6F,QAAE,EAAE3C,mDAAU,CAACmB,iBAAX;AAAL,KADU,EAETyB,8DAFS,CAAd;AAGAxG,UAAM,CAAC6H,OAAD,CAAN,CAfwB,CAgBxB;;AACA,QAAIhH,KAAK,GAAG;AACRmE,WAAK,EAAE,EADC;AAERC,aAAO,EAAE,EAFD;AAGRW,eAAS,EAAEiC,OAAO,CAACtB,EAHX;AAIRuB,eAAS,EAAE1B,QAAQ,CAAC2B,6CAAM,GAAGC,MAAT,CAAgB,gBAAhB,CAAD,CAJX;AAKRC,cAAQ,EAAE,EALF;AAMRC,UAAI,EAAE;AACF3B,UAAE,EAAEsB,OAAO,CAACtB,EADV;AAEF4B,gBAAQ,EAAEN,OAAO,CAACM;AAFhB;AANE,KAAZ;AAWAnI,UAAM,CAACa,KAAD,CAAN;AACA,SAAK8G,QAAL,CAAc;AAACpH,mBAAa,EAACM;AAAf,KAAd,EA7BwB,CA8BxB;;AACA+C,uDAAU,CAACyC,eAAX,GAA6B+B,cAA7B,CAA4C,KAAKjI,KAAL,CAAWM,UAAX,CAAsBF,aAAlE,EAAgFM,KAAhF;AACA,SAAKmG,WAAL,CAAiBqB,SAAjB,CAA2BrC,KAA3B;AACH,G;;SAEDxB,gB,GAAA,0BAAiBwB,KAAjB,EAA8B;AAC1BhG,UAAM,CAAC,sBAAD,CAAN;AACAgG,SAAK,CAACC,cAAN,GAF0B,CAG1B;AACA;;AACA,QAAIqC,SAA0B,GAAGxB,QAAQ,CAACI,cAAT,CAAwB,KAAK/G,KAAL,CAAWY,EAAX,CAAcuB,cAAd,CAA6BP,GAA7B,CAAiCuB,SAAzD,CAAjC;AACA,QAAIgF,SAAS,IAAIA,SAAS,CAACC,KAAV,CAAgBC,IAAhB,GAAuBC,MAAvB,KAAkC,CAAnD,EAAsD,OAN5B,CAQ1B;;AACA,QAAI,CAAC7E,mDAAU,CAACxD,UAAX,EAAL,EAA8B;AAC1B;AACAwE,YAAM,CAAClB,QAAP,CAAgBgE,IAAhB,GAAuB,KAAKvH,KAAL,CAAWS,IAAX,CAAgBE,KAAvC;AACA;AACH,KAbyB,CAc1B;AACA;;;AACA,QAAI+G,OAAO,GAAGjE,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBC,KAAnE,EACV;AAAC6F,QAAE,EAAE3C,mDAAU,CAACmB,iBAAX;AAAL,KADU,EAEVyB,8DAFU,CAAd;AAGAxG,UAAM,CAAC6H,OAAD,CAAN,CAnB0B,CAoB1B;AACA;;AACA,QAAIhH,KAAK,GAAG+C,mDAAU,CAACyC,eAAX,GAA6BqC,cAA7B,CAA4C,KAAKvI,KAAL,CAAWM,UAAX,CAAsBF,aAAlE,CAAZ;;AACA,QAAIM,KAAK,IAAIyH,SAAb,EAAwB;AACpB;AACA;AACA,UAAIK,OAAe,GAAG;AAClB/C,iBAAS,EAAEiC,OAAO,CAACtB,EADD;AAElBqC,iBAAS,EAAE/H,KAAK,CAAC0F,EAFC;AAGlBuB,iBAAS,EAAE1B,QAAQ,CAAC2B,6CAAM,GAAGC,MAAT,CAAgB,gBAAhB,CAAD,CAHD;AAIlB/C,eAAO,EAAEqD,SAAS,CAACC,KAAV,CAAgBC,IAAhB;AAJS,OAAtB;AAMAF,eAAS,CAACC,KAAV,GAAkB,EAAlB;AACA3E,yDAAU,CAACiF,UAAX,CAAsBF,OAAtB;AACA3I,YAAM,CAAC2I,OAAD,CAAN;AACH;AACJ,G;;SAEDvE,yB,GAAA,mCAA0B4B,KAA1B,EAA4C;AACxChG,UAAM,CAAC,gCAAD,CAAN;AACAgG,SAAK,CAACC,cAAN;AACA,SAAKuB,eAAL,GAHwC,CAIxC;;AACA,QAAItB,OAAO,GAAGF,KAAK,CAAC8C,MAAN,CAAa3C,YAAb,CAA0B,KAAKhG,KAAL,CAAWyD,UAAX,CAAsBC,MAAtB,CAA6BhD,KAA7B,CAAmCiD,cAA7D,CAAd;AACA9D,UAAM,+BAA6BkG,OAA7B,CAAN;;AACA,QAAIA,OAAJ,EAAa;AACT;AACAA,aAAO,GAAGE,QAAQ,CAACF,OAAD,CAAlB,CAFS,CAGT;;AACA,UAAMrF,KAAK,GAAG+C,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBH,OAAnE,EAA2E;AAACiG,UAAE,EAACL;AAAJ,OAA3E,EAAwFM,8DAAxF,CAAd;AACAxG,YAAM,CAACa,KAAD,CAAN;;AACA,UAAIA,KAAJ,EAAW;AACP;AACA,aAAK8G,QAAL,CAAc;AAACpH,uBAAa,EAACM;AAAf,SAAd,EAFO,CAGP;;AACA+C,2DAAU,CAACyC,eAAX,GAA6B+B,cAA7B,CAA4C,KAAKjI,KAAL,CAAWM,UAAX,CAAsBF,aAAlE,EAAgFM,KAAhF;AACA,aAAK+F,WAAL,CAAiByB,SAAjB,CAA2BrC,KAA3B;AACH;AACJ;AACJ,G;;SAED3B,mB,GAAA,6BAAoB2B,KAApB,EAAiC;AAC7BA,SAAK,CAACC,cAAN;AACA,SAAKuB,eAAL,GAF6B,CAG7B;;AACA,QAAItB,OAAO,GAAGF,KAAK,CAAC8C,MAAN,CAAa3C,YAAb,CAA0B,KAAKhG,KAAL,CAAWyD,UAAX,CAAsBC,MAAtB,CAA6BhD,KAA7B,CAAmCiD,cAA7D,CAAd;AACA9D,UAAM,+BAA6BkG,OAA7B,CAAN;;AACA,QAAIA,OAAJ,EAAa;AACT;AACAA,aAAO,GAAGE,QAAQ,CAACF,OAAD,CAAlB,CAFS,CAGT;;AACA,UAAMrF,KAAK,GAAG+C,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBH,OAAnE,EAA2E;AAACiG,UAAE,EAACL;AAAJ,OAA3E,EAAwFM,8DAAxF,CAAd;AACAxG,YAAM,CAACa,KAAD,CAAN;;AACA,UAAIA,KAAJ,EAAW;AACP;AACA,aAAK8G,QAAL,CAAc;AAACpH,uBAAa,EAACM;AAAf,SAAd,EAFO,CAGP;;AACA+C,2DAAU,CAACyC,eAAX,GAA6B+B,cAA7B,CAA4C,KAAKjI,KAAL,CAAWM,UAAX,CAAsBF,aAAlE,EAAgFM,KAAhF;AACA,aAAKmG,WAAL,CAAiBqB,SAAjB,CAA2BrC,KAA3B;AACH;AACJ;AACJ,G;;SAEDvB,iB,GAAA,2BAAkBuB,KAAlB,EAA+B;AAC3BA,SAAK,CAACC,cAAN;AACA,SAAKuB,eAAL,GAF2B,CAG3B;;AACA,QAAItB,OAAO,GAAGF,KAAK,CAAC8C,MAAN,CAAa3C,YAAb,CAA0B,KAAKhG,KAAL,CAAWyD,UAAX,CAAsBC,MAAtB,CAA6BhD,KAA7B,CAAmCiD,cAA7D,CAAd;AACA9D,UAAM,4BAA0BkG,OAA1B,CAAN;;AACA,QAAIA,OAAJ,EAAa;AACT;AACA,WAAKb,OAAL,CAAa0D,YAAb,CAA0B,KAAK5I,KAAL,CAAWyD,UAAX,CAAsBC,MAAtB,CAA6BhD,KAA7B,CAAmCiD,cAA7D,EAA4EoC,OAA5E,EAFS,CAGT;;AACAA,aAAO,GAAGE,QAAQ,CAACF,OAAD,CAAlB,CAJS,CAKT;;AACA,UAAMrF,KAAK,GAAG+C,mDAAU,CAACyC,eAAX,GAA6BC,eAA7B,CAA6C,KAAKnG,KAAL,CAAWM,UAAX,CAAsBH,OAAnE,EAA2E;AAACiG,UAAE,EAACL;AAAJ,OAA3E,EAAwFM,8DAAxF,CAAd;AACA,WAAKxF,KAAL,CAAWH,KAAK,CAACmE,KAAjB,EAAuB,kDAAvB;AACH;AACJ,G;;SAEDN,mB,GAAA,6BAAoB6B,EAApB,EAAoC;AAChC3C,uDAAU,CAACoF,aAAX,CAAyBzC,EAAzB;AACH,G,CAED;;;SACAjC,iB,GAAA,2BAAkBzD,KAAlB,EAAmC;AAC/B,SAAK2G,eAAL;AACA5D,uDAAU,CAACqF,WAAX,CAAuBpI,KAAvB;AACH,G;;;EAlacqI,4CAAK,CAACC,S,GAqazB;;;AACAtE,YAAY,CAAC5E,KAAb,GAAqB,kKAArB;AACAA,4CAAK,CAACmJ,GAAN,GAAYC,OAAO,CAACC,IAAR,CAAarF,IAAb,CAAkBoF,OAAlB,CAAZ,C,CAEA;;AACA,IAAME,OAAO,gBAAG,2DAAC,IAAD;AAAM,WAAS,EAAC;AAAhB,EAAhB;AAEAC,gDAAQ,CAAC/D,MAAT,CAAgB8D,OAAhB,EAAyBzC,QAAQ,CAACI,cAAT,CAAwB,MAAxB,CAAzB,E;;;;;;;;;;;;AC/bA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAKA;AACA;AAEA;AACA;AAEA,IAAMuC,OAAO,GAAGxJ,4CAAK,CAArB,eAAqB,CAArB;;IAEMyJ,U;AAMF,wBAAc;AACV,wBAAoBC,kFAAqB,CAAzC,WAAoBA,EAApB;AACH;;;;SAGDhF,oB,GAAAA,kEAAmE;AAC/D;AACA;AACA,kBAAc,qBAAd;AAEA,QAAIiF,qBAA2C,GAAGD,kFAAqB,CALR,WAKbA,EAAlD,CAL+D,CAM/D;;AACAC,yBAAqB,CAArBA,gBAAsCC,iEAAkB,CAAxDD,WAAsCC,EAAtCD;AACAA,yBAAqB,CAArBA,gBAAsCE,yEAA0B,CAAhEF,WAAsCE,EAAtCF;AACA,QAAIG,YAAyB,GAAG,CAC5B;AAAEC,UAAI,EAAE,uBAAR;AAAsCC,cAAQ,EAAE;AAAhD,KAD4B,EAE5B;AAAED,UAAI,EAAE,uBAAR;AAAwCC,cAAQ,EAAE;AAAlD,KAF4B,EAG5B;AAAED,UAAI,EAAE,uBAAR;AAAyCC,cAAQ,EAAE;AAAnD,KAH4B,CAAhC,CAT+D,CAe/D;AACA;AACA;AACA;AACA;;AACA,QAAIC,mBAAmB,GAAGC,8EAAmB,CAA7C,WAA0BA,EAA1B;AACAD,uBAAmB,CAAnBA,WAA+B,CAC3B;AACIE,eAAS,EAAE,uBADf;AAEIC,eAAS,EAAE,KAFf,eAEe,EAFf;AAGIC,SAAG,EAAE,iBAHT;AAIIC,cAAQ,EAAC;AAJb,KAD2B,EAO3B;AACIH,eAAS,EAAE,uBADf;AAEIC,eAAS,EAAE,KAFf,eAEe,EAFf;AAGIC,SAAG,EAAE,iBAHT;AAIIC,cAAQ,EAAC;AAJb,KAP2B,EAa3B;AACIH,eAAS,EAAE,uBADf;AAEIC,eAAS,EAAE,KAFf,eAEe,EAFf;AAGIC,SAAG,EAAE,iBAHT;AAIIC,cAAQ,EAAC;AAJb,KAb2B,CAA/BL;AAoBA,QAAIM,OAAO,GAAG,mGAzCiD,mBAyCjD,CAAd,CAzC+D,CAyCwB;;AACvFZ,yBAAqB,CAArBA,yBAA8C,CA1CiB,eA0CjB,CAA9CA,EA1C+D,CA6C/D;AACA;AACA;AACA;AACA;AAEA;;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,mCAA+B,kCAA/B,IAA+B,CAA/B;AACA,mCAA+B,kCAA/B,IAA+B,CAA/B;AAEA,oDAAgD,uBAAhD;AACA,oDAAgD,uBAAhD;AAEA;AACH;AAED;AACJ;AACA;;;SACWrC,U,GAAP,sBAAyB;AACrBkC,WAAO,CADc,yBACd,CAAPA,CADqB,CAErB;;AACAgB,iEAAa,CAAbA,YAHqB,IAGrBA,EAHqB,CAIrB;;AACA,0CAAsC,uBALjB,KAKrB,EALqB,CAMrB;;AACA,0CAAsC,uBAPjB,OAOrB,EAPqB,CAQrB;;AACA,0CAAsC,uBAAtC;;;SAGGpE,e,GAAP,2BAA8C;AAC1C,WAAO,KAAP;AACH;AAGD;AACJ;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACJ;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport moment from 'moment';\n\nimport controller from './Controller';\nimport CommentSidebarView from \"./component/CommentSidebarView\";\nimport BlogEntryView from \"./component/BlogEntryView\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport DetailsSidebarView from \"./component/DetailsSidebarView\";\n\nimport {BlogEntry, Comment} from './AppTypes';\nimport IndexedDBUtil from \"./state/IndexedDBStateManager\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            entries: [],\n            selectedEntry: {},\n            applyUserFilter:false,\n            stateNames: {\n                users: 'users',\n                entries: 'entries',\n                comments: 'comments',\n                selectedEntry: 'selectedEntry',\n            },\n            apis: {\n                users: '/users',\n                entries: '/blog',\n                entry: '/blog',\n                comments: '/comment',\n                login: '/login',\n            },\n            ui: {\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyEntriesId: 'navigationItemDashboard',\n                    addNewEntryId: 'navigationItemAddNewEntry',\n                    showAllEntriesId: 'navigationItemShowAll'\n                },\n                blogEntry: {},\n                entryDetailsSideBar: {\n                    dom: {\n                        sideBarId: 'detailsSideBar',\n                        formId: 'details',\n                        titleId: 'title',\n                        contentId: 'content',\n                        changedOnId: 'changedOn',\n                        resultDataKeyId: 'id',\n                        isDraggable: false,\n                        isClickable: true,\n                    },\n                },\n                commentSideBar: {\n                    dom: {\n                        sideBarId: 'commentSideBar',\n                        headerId: 'commentHeader',\n                        resultsId: 'comments',\n                        resultsElementType: 'button',\n                        resultsElementAttributes: [\n                            ['type', 'button'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'id',\n                        resultLegacyDataKeyId: 'id',\n                        modifierClassNormal: 'float-right list-group-item-primary text-right',\n                        modifierClassInactive: 'float-left list-group-item-dark text-left',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: 'list-group-item-warning',\n                        iconNormal: '<i class=\"fas fa-trash-alt\"></i>',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        newFormId: \"newComment\",\n                        commentId: \"comment\",\n                        submitCommentId: \"submitComment\",\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                commentSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                entryDetailsSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                }\n            },\n            controller: {\n                events: {\n                    entry: {\n                        eventDataKeyId: 'entry-id',\n                    },\n                },\n                dataLimit: {\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowMyEntries = this.handleShowMyEntries.bind(this);\n        this.handleSelectEntryComments = this.handleSelectEntryComments.bind(this);\n        this.handleShowEditEntry = this.handleShowEditEntry.bind(this);\n        this.handleUpdateEntry = this.handleUpdateEntry.bind(this);\n        this.handleAddEntry = this.handleAddEntry.bind(this);\n        this.handleAddComment = this.handleAddComment.bind(this);\n        this.handleDeleteEntry = this.handleDeleteEntry.bind(this);\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        logger(this.state.entries);\n        // @ts-ignore\n        logger(this.state.applyUserFilter);\n\n        // @ts-ignore\n        let entriesToDisplay = this.state.entries;\n        // @ts-ignore\n        if (this.state.applyUserFilter && controller.isLoggedIn() && (controller.getLoggedInUserId() > 0)) {\n            entriesToDisplay = entriesToDisplay.filter((entry:BlogEntry) => {\n                return (entry.createdBy === controller.getLoggedInUserId());\n            });\n        }\n        const blog = entriesToDisplay.map((entry:BlogEntry, index:number) =>\n            <BlogEntryView\n                key={index}\n                entry={entry}\n                showCommentsHandler={this.handleSelectEntryComments}\n                editEntryHandler={this.handleShowEditEntry}\n                deleteEntryHandler={this.handleDeleteEntry}\n                config={this.state}\n            />\n        );\n        return (\n            <div className=\"Root row ml-1\">\n                {blog}\n            </div>\n        );\n    }\n\n    cancelDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let entryId = this.modalEl.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            if (entry) {\n                // delete the entry using the controller and remove the state manager\n                controller.deleteEntry(entry);\n                // @ts-ignore\n                controller.getStateManager().removeItemFromState(this.state.stateNames.entries,entry,isSame);\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n        // add the additional views and configure them\n        this.commentView = new CommentSidebarView(this, document,controller.getStateManager());\n        this.commentView.onDocumentLoaded(); // reset the view state\n\n        this.detailsView = new DetailsSidebarView(this,document,controller.getStateManager());\n        this.detailsView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.addNewEntryId).addEventListener('click', this.handleAddEntry);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyEntriesId).addEventListener('click', this.handleShowMyEntries);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.commentView.eventHide(null);\n        this.detailsView.eventHide(null);\n    }\n\n    handleShowMyEntries(event:Event) {\n        logger('Handling Show My Entries');\n        this.hideAllSideBars();\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.setState({applyUserFilter:true});\n    }\n\n    handleAllEntries(event:Event) {\n        logger('Handling Show All Entries');\n        this.setState({applyUserFilter:false});\n        this.hideAllSideBars();\n    }\n\n    handleAddEntry(event:Event) {\n        logger('Handling Add Entry');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n             isSame);\n        logger(creator);\n        // create an empty entry\n        let entry = {\n            title: '',\n            content: '',\n            createdBy: creator.id,\n            changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n            Comments: [],\n            User: {\n                id: creator.id,\n                username: creator.username\n            }\n        }\n        logger(entry);\n        this.setState({selectedEntry:entry});\n        // @ts-ignore\n        controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n        this.detailsView.eventShow(event);\n    }\n\n    handleAddComment(event:Event) {\n        logger('Handling Add Comment');\n        event.preventDefault();\n        // get the comment element\n        // @ts-ignore\n        let commentEl:HTMLInputElement = document.getElementById(this.state.ui.commentSideBar.dom.commentId);\n        if (commentEl && commentEl.value.trim().length === 0) return;\n\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n            isSame);\n        logger(creator);\n        // find the selected entry\n        // @ts-ignore\n        let entry = controller.getStateManager().getStateByName(this.state.stateNames.selectedEntry);\n        if (entry && commentEl) {\n            // create an empty comment\n            // @ts-ignore\n            let comment:Comment = {\n                createdBy: creator.id,\n                commentOn: entry.id,\n                changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n                content: commentEl.value.trim()\n            }\n            commentEl.value = '';\n            controller.addComment(comment);\n            logger(comment);\n        }\n    }\n\n    handleSelectEntryComments(event:MouseEvent) {\n        logger('Handling Select Entry Comments');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.commentView.eventShow(event);\n            }\n        }\n    }\n\n    handleShowEditEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.detailsView.eventShow(event);\n            }\n        }\n    }\n\n    handleDeleteEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,entryId);\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            this.alert(entry.title,\"Are you sure you want to delete this blog entry?\")\n        }\n    }\n\n    handleDeleteComment(id:number):void {\n        controller.deleteComment(id);\n    }\n\n    // @ts-ignore\n    handleUpdateEntry(entry:BlogEntry) {\n        this.hideAllSideBars();\n        controller.updateEntry(entry);\n    }\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\nlocalStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import debug from 'debug';\nimport downloader from \"./network/DownloadManager\";\nimport MemoryStateManager from \"./state/MemoryStateManager\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport notifier from \"./notification/NotificationManager\";\nimport SocketListener from \"./socket/SocketListener\";\nimport socketManager from \"./socket/SocketManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {jsonRequest, RequestType} from \"./network/Types\";\nimport {BlogEntry, Comment, User} from \"./AppTypes\";\nimport {AbstractStateManager} from \"./state/AbstractStateManager\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport IndexedDBStateManager,{collection} from \"./state/IndexedDBStateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\n\nconst cLogger = debug('controller-ts');\n\nclass Controller implements SocketListener, StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    protected stateManager: AbstractStateManager;\n\n    constructor() {\n        this.stateManager = AggregateStateManager.getInstance();\n    }\n\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n\n        let aggregateStateManager:AggregateStateManager = AggregateStateManager.getInstance();\n        // store information in local storage, indexeddb, and memory\n        aggregateStateManager.addStateManager(MemoryStateManager.getInstance());\n        aggregateStateManager.addStateManager(BrowserStorageStateManager.getInstance());\n        let objectStores:collection[] = [\n            { name: this.config.stateNames.users, keyField: 'id'},\n            { name: this.config.stateNames.entries, keyField: 'id'},\n            { name: this.config.stateNames.comments, keyField: 'id'},\n\n        ];\n        // let indexedDBStateManager = IndexedDBStateManager.getInstance();\n        // indexedDBStateManager.initialise(objectStores).then((result) => {\n        //     cLogger('indexed DB setup');\n        // });\n        // aggregateStateManager.addStateManager(indexedDBStateManager,['selectedEntry']);\n        let restAPIStateManager = RESTApiStateManager.getInstance();\n        restAPIStateManager.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.users,\n                isActive:true\n            },\n            {\n                stateName: this.config.stateNames.entries,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive:true\n            },\n            {\n                stateName: this.config.stateNames.comments,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive:true\n            }\n        ]);\n        let asyncSM = new AsyncStateManagerWrapper(aggregateStateManager,restAPIStateManager); // link the REST API calls to the Aggregate SM\n        aggregateStateManager.addStateManager(asyncSM,['selectedEntry']);\n        \n\n        // setup Async callbacks for the fetch requests\n        // this.callbackForUsers = this.callbackForUsers.bind(this);\n        // this.callbackForEntries = this.callbackForEntries.bind(this);\n        // this.callbackForCreateEntry = this.callbackForCreateEntry.bind(this);\n        // this.callbackForCreateComment = this.callbackForCreateComment.bind(this);\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.entries, this);\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.comments, this);\n\n        return this;\n    }\n\n    /*\n  Get the base data for the application (users, entries)\n */\n    public initialise():void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        socketManager.setListener(this);\n        // load the users\n        this.getStateManager().getStateByName(this.config.stateNames.users);\n        // load the entries\n        this.getStateManager().getStateByName(this.config.stateNames.entries);\n        // load the comments\n        this.getStateManager().getStateByName(this.config.stateNames.comments);\n    }\n    \n    public getStateManager():AbstractStateManager {\n        return this.stateManager;\n    }\n\n\n    /*\n    *\n    * Call back functions for database operations\n    *\n     */\n    // private callbackForUsers(data: any, status: number) {\n    //     cLogger('callback for all users');\n    //     let users:User[] = [];\n    //     if (status >= 200 && status <= 299) { // do we have any data?\n    //         cLogger(data);\n    //         // covert the data to the AppType User\n    //         data.forEach((cbUser:any) => {\n    //             let user:User = {\n    //                 id:cbUser.id,\n    //                 username:cbUser.username\n    //             }\n    //             users.push(user);\n    //         });\n    //     }\n    //     this.getStateManager().setStateByName(this.config.stateNames.users, users);\n    // }\n\n    // private static convertJSONCommentToComment(jsonComment:any):Comment {\n    //     let comment:Comment = {\n    //         id:jsonComment.id,\n    //         content:jsonComment.content,\n    //         createdBy:jsonComment.createdBy,\n    //         changedOn:jsonComment.changedOn,\n    //         commentOn:jsonComment.commentOn,\n    //     };\n    //     return comment;\n    // }\n    //\n    // private static convertJSONUserToUser(jsonUser:any):User {\n    //     let user:User = {\n    //         id:jsonUser.id,\n    //         username:jsonUser.username,\n    //     }\n    //     return user;\n    // }\n    //\n    // private static convertJSONEntryToBlogEntry(jsonEntry:any):BlogEntry {\n    //     let entry:BlogEntry = {\n    //         id: jsonEntry.id,\n    //         title:jsonEntry.title,\n    //         content:jsonEntry.content,\n    //         createdBy:jsonEntry.createdBy,\n    //         changedOn:jsonEntry.changedOn,\n    //         User:null,\n    //         Comments:[],\n    //     }\n    //     const cbUser:User|null = jsonEntry.user;\n    //     if (cbUser) {\n    //         entry.User = Controller.convertJSONUserToUser(cbUser);\n    //     }\n    //     const cbComments:Comment[]|null = jsonEntry.comments;\n    //     if (cbComments) {\n    //         cbComments.forEach((cbComment:any) => {\n    //             let comment = Controller.convertJSONCommentToComment(cbComment);\n    //             entry.Comments.push(comment);\n    //         });\n    //     }\n    //     return entry;\n    // }\n    //\n    // private callbackForEntries(data: any, status: number, stateName:string) {\n    //     cLogger('callback for all entries');\n    //     let entries:BlogEntry[] = [];\n    //     if (status >= 200 && status <= 299) { // do we have any data?\n    //         cLogger(data);\n    //         data.forEach((cbEntry:any) => {\n    //             let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(cbEntry);\n    //             entries.push(entry);\n    //         });\n    //     }\n    //     this.getStateManager().setStateByName(this.config.stateNames.entries, entries);\n    // }\n    //\n    // private callbackForCreateEntry(data: any, status: number, stateName:string) {\n    //     cLogger('callback for create entry');\n    //     if (status >= 200 && status <= 299) { // do we have any data?\n    //         cLogger(data);\n    //         let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(data);\n    //         this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry);\n    //     }\n    // }\n    //\n    // private callbackForCreateComment(data: any, status: number, stateName:string) {\n    //     cLogger('callback for create comment');\n    //     if (status >= 200 && status <= 299) { // do we have any data?\n    //         let comment:Comment = Controller.convertJSONCommentToComment(data);\n    //         cLogger(comment);\n    //         // find the corresponding entry in state\n    //         let entry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: comment.commentOn}, isSame);\n    //         cLogger(entry);\n    //         if (entry) {\n    //             cLogger('callback for create comment - updating entry');\n    //             // update the entry with the new comment\n    //             entry.Comments.push(comment);\n    //             // update the entry in the state manager\n    //             this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n    //             // reselect the same entry\n    //             this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, entry);\n    //             cLogger(entry);\n    //         }\n    //     }\n    //\n    // }\n\n    /*\n    *\n    *   API calls\n    *\n     */\n\n    // private getAllUsers(): void {\n    //     cLogger('Getting All Users');\n    //     const jsonRequest: jsonRequest = {\n    //         url: this.getServerAPIURL() + this.config.apis.users,\n    //         type: RequestType.GET,\n    //         params: {},\n    //         callback: this.callbackForUsers,\n    //         associatedStateName: this.config.apis.users\n    //     };\n    //     downloader.addApiRequest(jsonRequest, true);\n    // }\n    //\n    // private getAllEntries(): void {\n    //     cLogger('Getting All Entries');\n    //     const jsonRequest: jsonRequest = {\n    //         url: this.getServerAPIURL() + this.config.apis.entries,\n    //         type: RequestType.GET,\n    //         params: {},\n    //         callback: this.callbackForEntries,\n    //         associatedStateName: this.config.apis.entries\n    //     };\n    //     downloader.addApiRequest(jsonRequest, true);\n    // }\n    //\n    // private apiDeleteComment(id: number):void {\n    //     const deleteCommentCB = function (data: any, status: number, stateName:string) {\n    //         cLogger('callback for delete comment');\n    //         if (status >= 200 && status <= 299) { // do we have any data?\n    //             cLogger(data);\n    //         }\n    //     }\n    //\n    //\n    //     const jsonRequest: jsonRequest = {\n    //         url: this.getServerAPIURL() + this.config.apis.comment,\n    //         type: RequestType.DELETE,\n    //         params: {\n    //             id: id\n    //         },\n    //         callback: deleteCommentCB,\n    //         associatedStateName: ''\n    //     };\n    //     downloader.addApiRequest(jsonRequest);\n    //\n    // }\n    //\n    // private apiDeleteEntry(entry: BlogEntry):void {\n    //     const deleteCB = function (data: any, status: number, stateName:string) {\n    //         cLogger('callback for delete entry');\n    //         if (status >= 200 && status <= 299) { // do we have any data?\n    //             cLogger(data);\n    //         }\n    //     }\n    //\n    //     if (entry) {\n    //         const jsonRequest:jsonRequest = {\n    //             url: this.getServerAPIURL() + this.config.apis.entries,\n    //             type: RequestType.DELETE,\n    //             params: {\n    //                 id: entry.id\n    //             },\n    //             callback: deleteCB,\n    //             associatedStateName: this.config.apis.entries\n    //         };\n    //         downloader.addApiRequest(jsonRequest);\n    //     }\n    // }\n    //\n    // private apiCreateEntry(entry:BlogEntry):void {\n    //     if (entry) {\n    //         const jsonRequest:jsonRequest = {\n    //             url: this.getServerAPIURL() + this.config.apis.entries,\n    //             type: RequestType.POST,\n    //             params: entry,\n    //             callback: this.callbackForCreateEntry,\n    //             associatedStateName: this.config.apis.entries\n    //         };\n    //         downloader.addApiRequest(jsonRequest, true);\n    //     }\n    // }\n    //\n    // private apiCreateComment(comment:Comment):void {\n    //     if (comment) {\n    //         const jsonRequest:jsonRequest = {\n    //             url: this.getServerAPIURL() + this.config.apis.comment,\n    //             type: RequestType.POST,\n    //             params: comment,\n    //             callback: this.callbackForCreateComment,\n    //             associatedStateName: ''\n    //         };\n    //         downloader.addApiRequest(jsonRequest, true);\n    //     }\n    // }\n    //\n    // private apiUpdateEntry(entry:BlogEntry):void {\n    //     const updateCB = function (data: any, status: number, stateName:string) {\n    //         cLogger('callback for update entry');\n    //         if (status >= 200 && status <= 299) { // do we have any data?\n    //             cLogger(data);\n    //         }\n    //     }\n    //\n    //     if (entry) {\n    //         const jsonRequest:jsonRequest = {\n    //             url: this.getServerAPIURL() + this.config.apis.entries,\n    //             type: RequestType.PUT,\n    //             params: entry,\n    //             callback: updateCB,\n    //             associatedStateName: this.config.apis.entries\n    //         };\n    //         downloader.addApiRequest(jsonRequest);\n    //     }\n    // }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL():string {\n        let result = \"/api\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn():boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId():number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        return result;\n    }\n\n\n\n    // Lets delete a comment\n    deleteComment(id:number) {\n        let entry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        if (entry) {\n            cLogger(`Handling delete comment for ${entry.id} and comment ${id}`);\n            // find the comment in the entry and remove it from the state\n            let comments = this.getStateManager().getStateByName(this.config.stateNames.comments);\n            const foundIndex = comments.findIndex((element: any) => element.id === id);\n            if (foundIndex >= 0) {\n                // remove comment from the array\n                cLogger('Found comment in state - removing');\n                this.getStateManager().removeItemFromState(this.config.stateNames.comments,{id:id},isSame)\n                // update the statement manager\n                this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, entry);\n            }\n        }\n    }\n\n    public deleteEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(`Handling delete entry for ${entry.id}`);\n            // update the state manager\n            this.getStateManager().removeItemFromState(this.config.stateNames.entries, entry, isSame);\n        }\n    }\n\n    public updateEntry(entry:BlogEntry):void {\n        if (entry) {\n            cLogger(entry);\n            if (entry.id) {\n                cLogger(`Handling update for entry ${entry.id}`);\n                // update the state manager\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n            } else {\n                cLogger(`Handling create for entry`);\n                this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry);\n            }\n        }\n    }\n\n    public addComment(comment:Comment):void  {\n        if (comment) {\n            cLogger(comment);\n            cLogger(`Handling create for comment`);\n            this.getStateManager().addNewItemToState(this.config.stateNames.comments,comment);\n        }\n    }\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message:string):void {\n        cLogger(message);\n    }\n\n    public getCurrentUser():number{\n        return this.getLoggedInUserId();\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        cLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = this.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let stateObj = message.data;\n        cLogger(stateObj);\n        // ok lets work out where this change belongs\n        // try {\n        //     switch (message.type) {\n        //         case \"create\": {\n        //             switch (message.objectType) {\n        //                 case \"Comment\": {\n        //                     // updating comments is more tricky as it is a sub object of the blog entry\n        //                     // find the entry in question\n        //                     const changedEntry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n        //                     if (changedEntry) {\n        //                         let comment:Comment = Controller.convertJSONCommentToComment(stateObj);\n        //                         // add the new comment\n        //                         changedEntry.Comments.push(comment);\n        //                         // update the state\n        //                         this.getStateManager().updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n        //                         // was this entry current open by the user?\n        //                         const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        //                         if (currentSelectedEntry) {\n        //                             if (currentSelectedEntry.id === changedEntry.id) {\n        //                                 this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n        //                             }\n        //                         }\n        //                         let username = \"unknown\";\n        //                         if (changeUser) {\n        //                             username = changeUser.username;\n        //                         }\n        //                         notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n        //                     }\n        //                     break;\n        //                 }\n        //                 case \"BlogEntry\": {\n        //                     let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n        //                     cLogger(\"Converting to BlogEntry type for Create\");\n        //                     cLogger(entry);\n        //                     // add the new item to the state\n        //                     this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry);\n        //                     let username = \"unknown\";\n        //                     if (changeUser) {\n        //                         username = changeUser.username;\n        //                     }\n        //\n        //                     notifier.show(stateObj.title, `${username} added new entry`);\n        //                     break;\n        //                 }\n        //                 case \"User\": {\n        //                     let user:User = Controller.convertJSONUserToUser(stateObj);\n        //                     // add the new item to the state\n        //                     this.getStateManager().addNewItemToState(this.config.stateNames.users, user);\n        //\n        //                     notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n        //                     break;\n        //                 }\n        //             }\n        //             break;\n        //         }\n        //         case \"update\": {\n        //             switch (message.objectType) {\n        //                 case \"BlogEntry\": {\n        //                     let entry:BlogEntry = Controller.convertJSONEntryToBlogEntry(stateObj);\n        //                     cLogger(\"Converting to BlogEntry type for Update\");\n        //                     cLogger(entry);\n        //                     // update the item in the state\n        //                     this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame);\n        //                     // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n        //                     break;\n        //                 }\n        //             }\n        //             break;\n        //         }\n        //         case \"delete\": {\n        //             switch (message.objectType) {\n        //                 case \"Comment\": {\n        //                     // removing comments is more tricky as it is a sub object of the blog entry\n        //                     // find the entry in question\n        //                     const changedEntry = <BlogEntry|null>this.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n        //                     cLogger(changedEntry);\n        //                     if (changedEntry) {\n        //                         // remove the comment\n        //                         let comments = changedEntry.Comments;\n        //                         const foundIndex = comments.findIndex((element:any) => element.id === stateObj.id);\n        //                         if (foundIndex >= 0) {\n        //                             // remove comment from the array\n        //                             cLogger('Found comment in entry - removing');\n        //                             comments.splice(foundIndex, 1);\n        //                             cLogger(changedEntry);\n        //\n        //                             // update the state\n        //                             this.getStateManager().updateItemInState(this.config.stateNames.entries, changedEntry, isSame);\n        //                             // was this entry current open by the user?\n        //                             const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        //                             if (currentSelectedEntry) {\n        //                                 if (currentSelectedEntry.id === changedEntry.id) {\n        //                                     this.getStateManager().setStateByName(this.config.stateNames.selectedEntry, changedEntry);\n        //                                 }\n        //                             }\n        //                         }\n        //\n        //                     }\n        //                     break;\n        //                 }\n        //                 case \"BlogEntry\": {\n        //                     cLogger(`Deleting Blog Entry with id ${stateObj.id}`);\n        //                     const deletedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n        //                     cLogger(deletedEntry);\n        //                     if (deletedEntry) {\n        //                         cLogger(`Deleting Blog Entry with id ${deletedEntry.id}`);\n        //                         this.getStateManager().removeItemFromState(this.config.stateNames.entries, deletedEntry, isSame);\n        //                         // the current user could be accessing the comments in the entry that was just deleted\n        //                         const currentSelectedEntry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        //                         if (currentSelectedEntry) {\n        //                             if (currentSelectedEntry.id === deletedEntry.id) {\n        //                                 cLogger(`Deleted entry is selected by user, closing sidebars`);\n        //                                 // ask the application to close any access to the comments\n        //                                 this.applicationView.hideAllSideBars();\n        //                             }\n        //                         }\n        //                         notifier.show(deletedEntry.title, `${deletedEntry.User.username} has deleted this entry.`, 'danger');\n        //                     }\n        //\n        //                     break;\n        //                 }\n        //             }\n        //             break;\n        //         }\n        //     }\n        // } catch (err) {\n        //     cLogger(err);\n        // }\n\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} - item Added`);\n        cLogger(itemAdded);\n        if (name === this.config.stateNames.entries) {\n            this.applicationView.setState({\n                isLoggedIn: this.isLoggedIn(),\n                loggedInUserId: this.getLoggedInUserId(),\n                selectedEntry: {},\n                entries: this.getStateManager().getStateByName(name)\n            });\n        }\n    }\n\n    stateChangedItemRemoved(name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} - item removed`);\n        cLogger(itemRemoved);\n        if (name === this.config.stateNames.entries) {\n            this.applicationView.setState({\n                isLoggedIn: this.isLoggedIn(),\n                loggedInUserId: this.getLoggedInUserId(),\n                selectedEntry: {},\n                entries: this.getStateManager().getStateByName(name)\n            });\n        }\n    }\n\n    stateChangedItemUpdated(name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} - item updated`);\n        cLogger(itemNewValue);\n        if (name === this.config.stateNames.entries) {\n            this.applicationView.setState({\n                isLoggedIn: this.isLoggedIn(),\n                loggedInUserId: this.getLoggedInUserId(),\n                selectedEntry: {},\n                entries: this.getStateManager().getStateByName(name)\n            });\n        }\n    }\n\n    stateChanged(name: string, values: any) {\n        cLogger(`State changed ${name}`);\n        cLogger(values);\n        // entries or comments?\n        if (name === this.config.stateNames.entries) {\n            return; // waiting for comments to be done\n        }\n        if (name === this.config.stateNames.comments) {\n            this.applicationView.setState({\n                isLoggedIn: this.isLoggedIn(),\n                loggedInUserId: this.getLoggedInUserId(),\n                selectedEntry: {},\n                entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n            });\n        }\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n  protected applicationView:any;\n  protected document:HTMLDocument;\n  protected uiConfig:any;\n  protected uiPrefs:any;\n\n  protected config: any;\n\n  protected stateManager: AbstractStateManager;\n\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:AbstractStateManager) {\n    this.applicationView = applicationView;\n    this.document = document;\n    this.uiConfig = uiConfig;\n    this.uiPrefs = uiPrefs;\n    this.config = applicationView.state;\n    this.stateManager = stateManager;\n\n    // state change listening\n    this.stateChanged = this.stateChanged.bind(this);\n\n    // event handlers\n    this.eventStartDrag = this.eventStartDrag.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n  }\n\n  public abstract onDocumentLoaded():void;\n\n\n  /* abstract */\n  protected abstract eventClickItem(event:MouseEvent):void;\n\n  protected abstract getDragData(event:DragEvent):any;\n\n  protected abstract getIdForStateItem(name:string, item:any):string;\n  protected abstract getLegacyIdForStateItem(name:string, item:any):string;\n  protected abstract getDisplayValueForStateItem(name:string, item:any):string;\n  protected abstract getModifierForStateItem(name:string, item:any):string;\n  protected abstract getSecondaryModifierForStateItem(name:string, item:any):string;\n  protected abstract updateView(name:string, newState:any):void;\n\n\n  protected eventStartDrag(event:DragEvent) {\n    avLogger('Abstract View : drag start', 10);\n    const data = JSON.stringify(this.getDragData(event));\n    avLogger(data, 10);\n    // @ts-ignore\n    event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n  }\n\n\n\n  protected createResultsForState(name:string, newState:any):void {\n    avLogger('Abstract View : creating Results', 10);\n    avLogger(newState);\n    const domConfig = this.uiConfig.dom;\n    // remove the previous items from list\n    const viewEl = document.getElementById(domConfig.resultsId);\n    if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n    // add the new children\n    newState.map((item:any, index:number) => {\n\n      const childEl = this.document.createElement(domConfig.resultsElementType);\n      browserUtil.addRemoveClasses(childEl,domConfig.resultsClasses);\n\n      // add the key ids for selection\n      childEl.setAttribute(domConfig.resultDataKeyId, this.getIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultLegacyDataKeyId, this.getLegacyIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultDataSourceId, domConfig.resultDataSourceValue);\n      const displayText = this.getDisplayValueForStateItem(name, item);\n      // add modifiers for patient state\n      const modifier = this.getModifierForStateItem(name, item);\n      const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n      switch (modifier) {\n        case 'normal': {\n          avLogger('Abstract View: normal item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal);\n          if (domConfig.iconNormal !== '') {\n            childEl.innerHTML = displayText + domConfig.iconNormal;\n          } else {\n            childEl.innerText = displayText;\n          }\n\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n\n          break;\n        }\n        case 'active': {\n          avLogger('Abstract View: active item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassActive);\n          if (domConfig.iconActive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconActive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n        case 'inactive': {\n          avLogger('Abstract View: inactive item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassInactive);\n          if (domConfig.iconInactive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconInactive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n      }\n      // add draggable actions\n      if (domConfig.isDraggable) {\n        childEl.setAttribute('draggable', 'true');\n        childEl.addEventListener('dragstart', this.eventStartDrag);\n      }\n      // add selection actions\n      if (domConfig.isClickable) {\n        childEl.addEventListener('click', this.eventClickItem);\n      }\n      avLogger(`Abstract View: Adding child ${item.id}`);\n      if (viewEl) viewEl.appendChild(childEl);\n    });\n  }\n\n  public stateChanged(name: string, newValue: any): void {\n    this.updateView(name, newValue);\n  }\n\n  stateChangedItemAdded(name: string, itemAdded: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemRemoved(name: string, itemRemoved: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemUpdated(name: string, itemUpdated: any, itemNewValue: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {isSame} from \"../util/EqualityFunctions\";\n\nconst beLogger = debug('view-ts:blogentry');\n\n\n// @ts-ignore\nexport default function BlogEntryView({entry, showCommentsHandler, editEntryHandler, deleteEntryHandler,config}) {\n    if (entry) {\n        beLogger(`Entry ${entry.createdBy} === ${controller.getLoggedInUserId()}`);\n\n        // find the user for the entry\n        const user:any = controller.getStateManager().findItemInState(config.stateNames.users,{id:entry.createdBy},isSame);\n        const allComments:any[] = controller.getStateManager().getStateByName(config.stateNames.comments);\n        // get the comments for the entry\n        const comments = allComments.filter((comment:any) => comment.commentOn === entry.id);\n\n        entry.user = user;\n        entry.comments = comments;\n\n        let editButton;\n        let deleteButton;\n        if (entry.user.id === controller.getLoggedInUserId()) {\n            editButton =\n                <button type=\"button\"\n                        className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={editEntryHandler}>\n                    &nbsp;&nbsp;Edit &nbsp;\n                    <i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n                </button>\n            deleteButton =\n                <button type=\"button\"\n                        className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={deleteEntryHandler}>\n                    &nbsp;&nbsp;Delete &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        } else {\n            editButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2 \"\n                                 disabled>&nbsp;&nbsp;Edit &nbsp;<i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n            </button>\n            deleteButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2\"\n                                   disabled>&nbsp;&nbsp;Delete &nbsp;\n                <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n            </button>\n        }\n\n\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className={\"card\"} style={{width: \"350px\"}}>\n                    <div className={\"card-header\"}>\n                        {entry.title}&nbsp;&nbsp;&nbsp;&nbsp;<a className=\"text-decoration-none\">\n                        <i className=\"fas fa-comments text-secondary\" entry-id={entry.id}\n                           onClick={showCommentsHandler}></i>&nbsp;&nbsp;\n                        <span className=\"badge badge-pill badge-primary text-right\" entry-id={entry.id}\n                              onClick={showCommentsHandler}>&nbsp;{entry.comments.length}&nbsp;</span></a>\n                    </div>\n                    <div className={\"card-body\"}>\n                        <p className={\"card-text\"}>{entry.content}</p>\n                        {editButton}\n                        {deleteButton}\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        {entry.user.username} on {moment(entry.changedOn, 'YYYYMMDDHHmmss').format('DD/MM/YYYY')}\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n\n}\n\n\nBlogEntryView.propTypes = {\n    entry: PropTypes.any.isRequired,\n    showCommentsHandler: PropTypes.func.isRequired,\n    editEntryHandler: PropTypes.func.isRequired,\n    deleteEntryHandler: PropTypes.func.isRequired,\n}","import debug from 'debug';\nimport moment from 'moment';\n\nimport controller from \"../Controller\";\nimport stateManager from '../state/MemoryStateManager';\nimport {isSame} from '../util/EqualityFunctions';\n\nimport SidebarView from './SidebarView';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport MemoryStateManager from \"../state/MemoryStateManager\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst viewLogger = debug('view-ts:comments');\n\nclass CommentSidebarView extends SidebarView implements StateChangeListener{\n    protected commentHeaderEl:HTMLElement|null;\n    protected newCommentFormEl:HTMLElement|null;\n    protected newCommentTextEl:HTMLElement|null;\n    protected newCommentSubmitEl:HTMLElement|null;\n\n\n    constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:AbstractStateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.commentSideBar, applicationView.state.uiPrefs.commentSideBar,stateManager);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n\n        // elements\n        this.commentHeaderEl = htmlDocument.getElementById(this.uiConfig.dom.headerId);\n        this.newCommentFormEl = htmlDocument.getElementById(this.uiConfig.dom.newFormId);\n        if (this.newCommentFormEl) this.newCommentFormEl.addEventListener('submit', this.applicationView.handleAddComment);\n        this.newCommentTextEl = htmlDocument.getElementById(this.uiConfig.dom.commentId);\n        this.newCommentSubmitEl = htmlDocument.getElementById(this.uiConfig.dom.submitCommentId);\n\n        // register state change listening\n        this.stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n    }\n\n    getIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name:string, item:any) {\n        viewLogger(`Getting display value for comment ${item.id} with content ${item.content}`)\n        // find the user for the item from the createdBy attribute\n        const createdBy = this.stateManager.findItemInState(this.config.stateNames.users, {id: item.createdBy}, isSame);\n        const createdOn = moment(item.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n        return `${item.content} - ${createdBy.username} on ${createdOn}  `;\n    }\n\n    getModifierForStateItem(name:string, item:any) {\n        let result = 'inactive'\n        if (item.createdBy === controller.getLoggedInUserId()) {\n            result = 'normal';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name:string, item:any) {\n        return 'normal';\n    }\n\n    eventClickItem(event:MouseEvent) {\n        event.preventDefault();\n        let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n\n        viewLogger(event.target);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        if (!id) {\n            //get the id from the containing element\n            // @ts-ignore\n            let parentEl = event.target.parentNode;\n            id = parentEl.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        }\n        // @ts-ignore\n        viewLogger(`Comment ${event.target.innerText} with id ${id} clicked`, 20);\n        if (id) {\n            id = parseInt(id);\n            // find the comment in the selected entry\n            let comment = entry.Comments.find((comment:any) => comment.id === id);\n            if (comment) {\n                viewLogger(`Comment created by ${comment.createdBy} and current user is ${controller.getLoggedInUserId()}`);\n                // only able to delete if the comment was created by the current user\n                if (comment.createdBy === controller.getLoggedInUserId()) {\n                    this.applicationView.handleDeleteComment(parseInt(id));\n                }\n            }\n        }\n    }\n\n\n    updateView(name:string, newState:any) {\n        viewLogger('Updating view');\n        viewLogger(newState);\n        if (controller.isLoggedIn()) {\n            if (this.newCommentTextEl) this.newCommentTextEl.removeAttribute(\"readonly\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.newCommentTextEl) this.newCommentTextEl.setAttribute(\"readonly\", \"true\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.setAttribute(\"disabled\", \"true\");\n        }\n\n        if (newState && newState.comments) {\n            if (this.commentHeaderEl) this.commentHeaderEl.innerHTML = newState.title;\n            viewLogger(newState.comments);\n            this.createResultsForState(name, newState.comments);\n        }\n    }\n\n    getDragData(event:DragEvent) {}\n\n}\n\nexport default CommentSidebarView;\n","import moment from 'moment';\nimport debug from 'debug';\n\nimport SidebarView from './SidebarView';\nimport stateManager from '../state/MemoryStateManager';\nimport {BlogEntry} from \"../AppTypes\";\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nconst viewLogger = debug('view-ts:details');\n\nclass DetailsSidebarView extends SidebarView{\n  protected formEl:HTMLElement|null;\n  protected titleEl:HTMLInputElement|null;\n  protected contentEl:HTMLTextAreaElement|null;\n  protected changeOnEl:HTMLLabelElement|null;\n\n  constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:AbstractStateManager) {\n    super(applicationView, htmlDocument, applicationView.state.ui.entryDetailsSideBar, applicationView.state.uiPrefs.entryDetailsSideBar,stateManager);\n\n    // handler binding\n    this.updateView = this.updateView.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n\n    // field and form elements\n    this.formEl = document.getElementById(this.uiConfig.dom.formId);\n    this.titleEl = <HTMLInputElement>document.getElementById(this.uiConfig.dom.titleId);\n    this.contentEl = <HTMLTextAreaElement>document.getElementById(this.uiConfig.dom.contentId);\n    this.changeOnEl = <HTMLLabelElement>document.getElementById(this.uiConfig.dom.changedOnId);\n\n    // register state change listening\n    stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n\n    // listen for form submissions\n    if (this.formEl) { // @ts-ignore\n      this.formEl.addEventListener('submit',this.eventClickItem);\n    }\n  }\n\n  getIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  getLegacyIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  eventClickItem(event:MouseEvent) {\n    event.preventDefault();\n    viewLogger('Handling submit Details Sidebar View');\n    viewLogger(event.target);\n    let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n    viewLogger(entry);\n    entry.title = (this.titleEl)?this.titleEl.value.trim():'';\n    entry.content = (this.contentEl)?this.contentEl.value.trim():'';\n    entry.changedOn = parseInt(moment().format('YYYYMMDDHHmmss'));\n    viewLogger(entry);\n    if (this.titleEl) this.titleEl.value = '';\n    if (this.contentEl) this.contentEl.value = '';\n    if (this.changeOnEl) this.changeOnEl.innerText = 'Last Changed On:';\n    this.applicationView.handleUpdateEntry(entry);\n  }\n\n\n  updateView(name:string, newState:any) {\n    viewLogger('Handling update of Details Sidebar View');\n    viewLogger(newState);\n    let entry = <BlogEntry>newState;\n    if (entry && entry.title) {\n      if (this.titleEl) this.titleEl.value = entry.title;\n      if (this.contentEl) this.contentEl.value = entry.content;\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \" + moment(entry.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n    }\n    else {\n      if (this.titleEl) this.titleEl.value = '';\n      if (this.contentEl) this.contentEl.value = '';\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \";\n    }\n  }\n\n  protected getDisplayValueForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getDragData(event: DragEvent): any {\n  }\n\n  protected getModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getSecondaryModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n}\n\nexport default DetailsSidebarView;\n","import AbstractView from './AbstractView';\nimport {AbstractStateManager} from \"../state/AbstractStateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:AbstractStateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {\n    this.showHide(this.uiPrefs.view.expandedSize);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n    }\n\n    private callbackForMessage(message:any):void {\n        sDebug(`Received message : ${message}`);\n        if (this.listener) this.listener.handleMessage(message);\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData)\n    }\n\n    public sendMessage(message:string):void {\n        this.socket.emit('message',message);\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\n\nconst smLogger = debug('state-manager-ts');\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport abstract class AbstractStateManager {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected forceSaves:boolean = true;\n\n    protected constructor() {\n        this.stateChangeListeners = [];\n        this.suppressEventEmits = false;\n        this.forceSaves = true;\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    protected informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType:stateEventType = stateEventType.StateChanged, previousObjValue:any|null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(name,previousObjValue,stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(name,stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    public addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    public getStateByName(name:string):any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state:stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    public setStateByName(name:string, stateObjectForName:any, informListeners:boolean = true):void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state:stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name,stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    public addNewItemToState(name:string, item:any, isPersisted:boolean = false):void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        const state = this.getStateByName(name);\n        state.push(item);\n        smLogger(state);\n        this._addItemToState(name,item,isPersisted);\n        this.informChangeListenersForStateWithName(name, state,stateEventType.ItemAdded);\n    }\n\n    public findItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    public isItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    public removeItemFromState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n            // remove the item from the state\n            smLogger('State Manager: Found item - removing ');\n            state.splice(foundIndex, 1);\n            smLogger(state);\n            this._removeItemFromState(name,item,testForEqualityFunction);\n            this.setStateByName(name, state,false);\n            this.informChangeListenersForStateWithName(name,item, stateEventType.ItemDeleted);\n        }\n        return result;\n    }\n\n    public updateItemInState(name:string, item:any, testForEqualityFunction:equalityFunction):boolean {\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n            let oldItem = state[foundIndex];\n            smLogger('State Manager: Found item - replacing ');\n            state.splice(foundIndex, 1, item);\n            smLogger(state);\n            this._updateItemInState(name,item,testForEqualityFunction);\n            this.setStateByName(name, state,false);\n            this.informChangeListenersForStateWithName(name,item,stateEventType.ItemUpdated,oldItem);\n        } else {\n            // add the item to the state\n            this.addNewItemToState(name, item);\n        }\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:AbstractStateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super();\n        this.stateManagers = [];\n        this.suppressEventEmits = false;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = []) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                state = sm.manager._getState(name);\n            }\n\n        });\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction);\n            }\n        });\n    }\n}","import {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsychronousStateManager from \"./AsynchronousStateManager\";\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsychronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsychronousStateManager) {\n        super();\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM._addItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM._getState(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM._removeItemFromState(name,stateObj,testForEqualityFunction);\n    }\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM._updateItemInState(name,stateObj,testForEqualityFunction);\n    }\n\n    _ensureStatePresent(name: string): void {this.wrappedSM._ensureStatePresent(name);}\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import {AbstractStateManager} from \"./AbstractStateManager\";\n\nabstract class AsynchronousStateManager extends AbstractStateManager {\n    public abstract getConfiguredStateNames():string[];\n    public abstract hasCompletedRun(stateName:string):boolean;\n    public abstract forceResetForGet(stateName:string):void;\n}\n\nexport default AsynchronousStateManager;","import debug from 'debug';\n\nimport {AbstractStateManager, stateValue} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager {\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  protected constructor(useLocalStorage:boolean = false) {\n    super();\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return savedResults;\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {}\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {}\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {}\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager,stateValue} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryStateManager extends AbstractStateManager {\n  private static _instance:MemoryStateManager;\n\n  public static getInstance() {\n    if (!(MemoryStateManager._instance)) {\n      MemoryStateManager._instance = new MemoryStateManager();\n    }\n    return MemoryStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  protected constructor() {\n    super();\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex > 0) {\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    return this.applicationState.find(element => element.name === name);\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex > 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex > 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex > 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex > 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n      }\n    }\n  }\n\n}\n\nexport default MemoryStateManager;\n","import {stateEventType, stateValue} from \"./AbstractStateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsychronousStateManager from \"./AsynchronousStateManager\";\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager extends AsychronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n\n    protected constructor() {\n        super();\n        this.forceSaves = false;\n        this.bHasCompletedRun = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger('callback for remove item - assuming client state manager has already removed');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger('callback for remove item - assuming client state manager has already updated');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger('callback for add item');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger('callback for add item');\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            let config: ApiConfig = this.getConfigurationForStateName(associatedStateName);\n            this.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction): void {\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}