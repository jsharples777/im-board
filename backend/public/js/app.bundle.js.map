{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./node_modules/handsontable/node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/state/StateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/util/UUID.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/socket/Types.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/AppTypes.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/component/ScoreSheetView.ts","webpack:///./src/template/TemplateManager.ts","webpack:///./src/component/ScoreSheetController.ts","webpack:///./src/Controller.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/BoardGameSearchSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/ScoreSheetSidebarView.ts","webpack:///./src/App.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","stateEventType","smLogger","debug","suppressEventEmits","this","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","foundIndex","stateChangeListeners","findIndex","element","changeListenersForName","index","listener","ensureListenerSetupForName","listenersNameArrayPair","listeners","addChangeListenerForName","AbstractStateManager","forceSaves","managerName","state","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","msManager","getInstance","MemoryBufferStateManager","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","RequestType","queueType","apiLogger","postFetchJSON","postParameters","method","headers","body","JSON","query","fetch","url","response","fetchJSON","callback","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","getUniqueId","replace","Math","v","dlLogger","downloader","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","type","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","uuid","jsonRequest","managerRequest","originalRequest","priorityChangeListener","handleEventAddToQueue","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","item","apiUtil","apiSMLogger","RESTApiStateManager","configuration","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","getConfiguredStateNames","results","config","hasCompletedRun","bHasCompletedRun","setCompletedRun","forceResetForGet","runsComplete","stateName","serverURL","api","isActive","status","getConfigurationForStateName","stateObj","Priority","InviteType","sDebug","chatReceivers","callbackForMessage","callbackForData","callbackForLogin","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForUserList","callbackForDeclineInvite","addChatReceiver","dataObj","receiver","err","setListener","io","login","username","logout","joinChat","room","leaveChat","sendInvite","ChatRoom","requiresAcceptDecline","subject","attachment","inviteObj","from","to","sendMessage","priority","Normal","messageObj","message","created","getUserList","sendDeclineInvite","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","filter","managerWithFilters","sm","stateManagers","BootstrapNotification","show","topOffset","context","duration","containerId","notificationManager","bgColorClass","containerNode","document","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","createNotification","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","isSame","item1","item2","isSameUsername","isSameGame","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","changeUser","stateNames","user","controller","changedEntry","commentOn","notifier","deletedEntry","handleMessage","getCurrentUser","UserStatus","lsLogger","BrowserStorageStateManager","useLocalStorage","storage","getItem","stringifiedSaveData","savedResults","savedResultsJSON","newValue","initialise","cmLogger","ChatManager","currentUsername","blockedList","favouriteList","unreadListener","loggedInUsers","socketManager","receiveLogin","receiveLogout","receiveInvitation","receiveMessage","receiveQueuedMessages","receiveQueuedInvites","receiveJoinedRoom","receivedLeftRoom","receiveUserList","blocked","favourite","savedLogs","localStorage","chatLogs","log","roomName","users","messages","lastViewed","parseInt","moment","numOfNewMessages","foundLog","ensureChatLogExists","joinDateTime","invite","isUserInBlockedList","didChatAlreadyExist","doesChatRoomExist","happyToProceed","chatLog","isUserInFavouriteList","receiveDecline","unreadCount","wasOffline","invites","trim","declineInvite","sent","ensureChatLogExistsWithUser","chatLogKey","blockedListKey","favouriteListKey","notLogger","NotificationController","doNotDisturb","handleChatLogUpdated","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleInvitationDeclined","handleNewInviteReceived","dontDisturbMe","isBlackedListed","isFavourited","chatManager","handleChatLogsUpdated","displayMessage","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","graphSMLogger","GraphQLApiStateManager","apiURL","apis","findAll","destroy","update","dataAttribute","Decorator","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","ssvLogger","ScoreSheetView","applicationView","thisEl","boardGameTitleEl","startStopTimer","timerEl","endOrLeaveEl","scoreSheetEl","table","ScoreSheetController","ui","scoreSheet","dom","handleStartStopTimer","handleEndOrLeave","handleUserDrop","addEventListener","event","hasActiveScoreSheet","confirm","draggedObjectJSON","draggable","draggedObject","innerText","browserUtil","createTimerDisplay","innerHTML","timer","hours","minutes","seconds","isPaused","removeAttribute","tableData","row","rowIndex","columnIndex","TemplateManager","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","columnSummary","destinationRow","destinationColumn","reversedRowCoords","forceNumeric","getDefaultScoreSheetTemplate","getDefaultScoreSheetStartingData","saveData","jsonData","createdOn","players","scores","playerNames","getDefaultSaveData","sscLogger","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","isRoomCreator","currentUsersInScoreSheet","intervalTimer","userChangedValue","endScoreSheet","pauseTimer","saveCurrentScoreSheet","saveScoreSheetToBoardGame","boardGame","boardGameName","sheetLayoutOptions","timerGoing","isFinished","alert","timerWasGoing","setInterval","isLoggedIn","clearInterval","source","SOURCE_View","cLogger","cLoggerDetail","connectToApplication","apiStateManager","graphSM","getServerAPIURL","findUsers","queryString","resultName","aggregateSM","memorySM","asyncDBSM","asyncQLSM","callbackBoardGameDetails","callbackAddToCollection","callbackRemoveFromCollection","callbackGetCollection","addBoardGameToCollection","removeBoardGameFromCollection","removeBoardGameFromDisplay","socketListerDelegate","getLoggedInUserId","currentGameList","displayedBoardGamesStateManager","cleanupBoardGameState","boardGames","cleanedUpList","game","existingListGame","downloadAndSyncSavedBoardGameCollection","getMyBoardGameCollection","userId","getStateManager","getLoggedInUsername","addBoardGameToDisplay","currentListOfGames","bggSearchCallById","gameId","boardGameDetails","regex","removeBoardGameFromState","currentBoardGamesOnDisplay","findBoardGameInStateFromEvent","events","addToMyCollection","updatingBoardGame","removeFromMyCollection","collectionData","scoreSheetAddedToBoardGame","addScoreSheetToBoardGame","boardGameId","sheet","oldBoardGame","avLogger","onDocumentLoaded","sidePanelEl","getElementById","uiConfig","closeButtonEl","showHide","uiPrefs","view","eventHide","eventShow","size","eventStartDrag","eventClickItem","eventDeleteClickItem","getDragData","createResultForItem","dataSource","domConfig","resultDataKeyId","getIdForStateItem","legacyDataKeyId","getLegacyIdForStateItem","childEl","createElement","textEl","contentEl","imgEl","getBackgroundImage","badgeValue","getBadgeValue","badgeEl","deleteButtonEl","iconEl","displayText","getDisplayValueForStateItem","modifier","getModifierForStateItem","secondModifier","getSecondaryModifierForStateItem","createResultsForState","viewEl","newState","vLogger","vLoggerDetail","handleFavouriteUserDrop","handleBlockedUserDrop","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","extra","fastSearchEl","console","eventUserSelected","localisedSM","recentUserSearches","dataLimit","label","reRenderView","updateView","myUsername","fastSearchValues","searchValue","disabled","minLength","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","SidebarView","csLogger","csLoggerDetail","selectedChatLog","handleAddMessage","commentEl","messageContent","sentMessage","messageEl","addChatMessage","checkCanComment","sendMessageButton","leaveChatButton","setAttribute","chatMessageEl","messageSenderEl","clearChatLog","reRenderChatMessages","renderChatLog","selectChatRoom","changeSearchButton","enable","buttonEl","handleSearch","queryText","queryEl","handleSearchResultsCB","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","className","board-game-id","onClick","deleteButton","startScoreSheetButton","scoreCount","scoresheets","favouriteIcon","scoreBadge","decorator","Incomplete","href","target","src","image","alt","year","Persisted","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","selectedBoardGame","setSelectedBoardGame","buffer","logger","Root","loggedInUserId","sheetData","selectedEntry","bggSearchResults","graphQL","bggSearchCall","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","chatSideBar","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","fastSearchInputId","boardGameSearchSideBar","formId","queryId","buttonId","scoreSheetSideBar","hasBackgroundImage","imgElementType","imgClasses","dropZone","end","iconStart","iconInProgress","iconEnd","iconLeave","blogEntry","location","expandedSize","eventDataKeyId","cancelDelete","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","preventDefault","dataTransfer","getData","parse","title","content","titleEl","textContent","modalEl","classList","remove","add","render","games","entry","getAttribute","hideAllSideBars","startScoreSheet","switchBetweenCollectionAndScoreSheet","componentDidMount","chatView","ChatSidebarView","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","scoresView","ScoreSheetSidebarView","scoreSheetView","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","showCollection","countChanged","newCount","React","Component","info","ReactDOM"],"mappings":"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d,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,QAAS,IACT,aAAc,IACd,gBAAiB,IACjB,WAAY,IACZ,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,KAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOrC,EAAoBsC,GAE5B,SAASC,EAAsBF,GAC9B,IAAIrC,EAAoBY,EAAEuB,EAAKE,GAAM,CACpC,IAAIG,EAAI,IAAIC,MAAM,uBAAyBJ,EAAM,KAEjD,MADAG,EAAEE,KAAO,mBACHF,EAEP,OAAOL,EAAIE,GAEZD,EAAeO,KAAO,WACrB,OAAO7D,OAAO6D,KAAKR,IAEpBC,EAAeQ,QAAUL,EACzBlC,EAAOD,QAAUgC,EACjBA,EAAeE,GAAK,K,4CC7QpB,E,8DAAYO,O,yBAAAA,I,6BAAAA,I,6BAAAA,I,gCAAAA,M,KCDZ,IAAMC,EAAWC,IAAjB,0BAuFA,E,WAhFI,cAAuC,KAH7BC,oBAA6B,EAInCC,KAAA,cACAA,KAAA,wB,2BAGGC,eAAP,WACID,KAAA,uB,EAGGE,WAAP,WACIF,KAAA,uB,EAGJG,wDAEI,QAFkK,IAA9FC,MAA4BR,EAAeS,mBAAmD,IAArCC,MAA+B,MAC5JT,EAAS,+CAATA,GACIG,KAAJ,mBACIH,0CADJ,CAIA,IAAMU,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC9D,GAAIH,GAAJ,EAAqB,CACjBV,EAAS,2CAAD,sBAARA,GAGA,IADA,IAAMc,EAAyBX,KAAKQ,qBAApC,GACSI,EAAT,EAAoBA,EAAQD,YAA5B,OAAqEC,IAAS,CAC1Ef,EAAS,0CAAD,EAARA,gBACA,IAAMgB,EAAWF,YAAjB,GACA,UACI,KAAMf,EAAN,aACIiB,eAAsBb,KAAtBa,iBACA,MAEJ,KAAMjB,EAAN,UACIiB,wBAA+Bb,KAA/Ba,iBACA,MAEJ,KAAMjB,EAAN,YACIiB,0BAAiCb,KAAjCa,mBACA,MAEJ,KAAMjB,EAAN,YACIiB,0BAAiCb,KAAjCa,sB,EAUZC,2BAAR,YAEI,GADmBd,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC9D,EAAoB,CAChB,IAAMK,EAAyB,CAC3BtD,KAD2B,EAE3BuD,UAAW,IAEfhB,KAAA,+B,EAURiB,uCACIjB,KAAA,8BACAH,EAAS,4CAATA,GACA,IAAMU,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC1DH,GAAJ,GACiCP,KAAKQ,qBAAlC,GACAG,mB,KC/ENd,EAAWC,IAAjB,oBAIsBoB,EAAtB,WAMI,cAA0C,KAJhCC,YAAqB,EAIW,KAHhCC,YAAqB,GAI3BpB,KAAA,SAAgB,IAAI,EAApB,GACAA,KAAA,cACAA,KAAA,aACAA,KAAA,cAVR,0CAaIC,WACID,KAAA,2BAdR,aAgBIE,WACIF,KAAA,uBAjBR,kCAsBI,WACIA,KAAA,eAvBR,8BA0BI,WACIA,KAAA,eA3BR,wCA8BIG,uBAAsK,IAA9FC,MAA4BR,EAAeS,mBAAmD,IAArCC,MAA+B,MAC5JN,KAAA,yDA/BR,2BAmCIiB,cACIjB,KAAA,wCApCR,iBAgDI,cACIA,KAAA,uBAEA,IAAMqB,EAAmB,CACrB5D,KADqB,EAErBS,MAAOoD,GAKX,OAFAtB,KAAA,+BACAA,KAAA,0CAAgEJ,EAAhE,cACA,GA1DR,iBA6DI2B,YACIvB,KAAA,uBACAH,EAAS,oCAATA,GACA,IAAI2B,EAMJ,OAHAA,EAD0BxB,KAAKyB,UAA/B,GACAD,MACA3B,EAAS,2CAATA,GACAA,KACA,GAtER,iBAyEI6B,gBASI,YATyF,IAAvCC,OAA2B,GAC7E3B,KAAA,uBACAH,EAAS,oCAATA,GACAA,EAHyF,GAK/DG,KAAKyB,UAA/B,GACAJ,QACIrB,KAAJ,YAAqBA,KAAK4B,WAAWnE,EAAMoE,GAC3C,GAAqB7B,KAAKG,sCAAsC1C,EAAMoE,GACtE,GAlFR,oBAqFIC,qBAA+E,IAApCC,OAAuB,GAC9D/B,KAAA,uBACAH,EAAS,uCAFkE,GAM3EG,KAAA,uBACAA,KAAA,0CAAuDJ,EAAvD,YA5FR,kBA+FIoC,gBACIhC,KAAA,uBACA,IAAIvD,EAAJ,GACM4E,EAAQrB,KAAKuB,eAAnB,GACMhB,EAAac,EAAA,WAAgB,mBAAkBY,EAAwBvB,EAA1C,MAMnC,OALAb,EAAS,yBAAD,oBAARA,GACAA,KACIU,GAAJ,IACI9D,EAAS4E,EAAT5E,IAEJ,GAzGR,gBA4GIyF,gBACIlC,KAAA,uBACA,IAAIvD,GAAJ,EAMA,OALcuD,KAAKuB,eAAnB,GACmB,WAAgB,mBAAkBU,EAAwBvB,EAA1C,OACnC,IACIjE,MAEJ,GApHR,sBAuHI0F,kBACInC,KAAA,uBACA,IACIoC,EAAUpC,KAAKgC,gBAAgBvE,EAArB,EAHqG,GASnH,OAJAoC,2CACAG,KAAA,2BANmH,GAQnHA,KAAA,0CAA0DJ,EAA1D,cANA,GAzHR,oBAmIIyC,kBACIrC,KAAA,uBACA,IACIoC,EAAcpC,KAAKgC,gBAAgBvE,EAArB,EAAlB,GAKA,OAJAoC,4CACAG,KAAA,yBALiH,GAOjHA,KAAA,0CAAuDJ,EAAvD,gBALA,GArIR,K,4FCNA,ICLA,EAOA,EDFM0C,EAAYxC,IAAlB,oBA6GA,E,oBA5FE,aAAqB,aACnB,+BACA,oBACA,gBAHmB,E,kFAXPyC,YAAd,WAIE,OAHMC,EAAN,YACEA,YAAqC,IAArCA,GAEKA,EAAP,W,2BAaKC,oBAAP,YAEE,GADiBzC,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KACxD,EAAoB,CAClB,IAAIW,EAAmB,CACrB5D,KADqB,EAErBS,MAAM,IAER8B,KAAA,2B,EAIG2C,2BAAP,YACEL,EAAU,6BAAVA,MACAA,EAAUjB,EAAViB,OACAtC,KAAA,0B,EAGK4C,4BAAP,YACG,IAAIrC,EAAoBP,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAiBW,EAArB,QAC3Dd,GAAJ,IACE+B,EAAU,4BAAVA,MACAA,EAAUjB,EAAViB,OACAtC,KAAA,iC,EAIEyB,UAAP,YAEE,IAAIJ,EAAmBrB,KAAK0C,iBAAiBG,MAAK,SAAAnC,GAAO,OAAIA,SAAJ,KAGzD,OAFA4B,EAAU,0BAAVA,GACAA,EAAUjB,EAAViB,OACA,G,EAGKV,WAAP,cACE,IAAIrB,EAAoBP,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC/D,GAAIH,GAAJ,EAAqB,CACnB,IAAIc,EAAmBrB,KAAK0C,iBAA5B,GACAJ,EAAU,yBAAVA,GACAA,EAAUjB,EAAViB,OACAjB,Y,EAIJyB,gCACE,QAD6E,IAAnCf,OAAsB,GAChE,GACA,IAAIxB,EAAoBP,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC/D,GAAIH,GAAJ,EAAqB,CACnB,IAAIc,EAAmBrB,KAAK0C,iBAA5B,GACAJ,EAAU,wBAAVA,GACAA,KACAjB,mB,EAIJ0B,uCACE,IAAIxC,EAAoBP,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC/D,GAAIH,GAAJ,EAAqB,CACnB,IAAIc,EAAmBrB,KAAK0C,iBAA5B,GACMM,EAAa3B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCsC,GAAJ,IACEV,EAAU,4BAAVA,GACAA,KACAjB,uB,EAKN4B,qCACE,IAAI1C,EAAoBP,KAAK0C,iBAAiBjC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC/D,GAAIH,GAAJ,EAAqB,CACnB,IAAIc,EAAmBrB,KAAK0C,iBAA5B,GACMM,EAAa3B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCsC,GAAJ,IACE3B,sBACAiB,EAAU,0BAAVA,GACAA,WAIFtC,KAAA,yB,GApGiCkB,G,kVCR3BgC,O,eAAAA,I,aAAAA,I,aAAAA,I,oBAAAA,M,cAOAC,O,uBAAAA,I,4BAAAA,M,KCJZ,IAAMC,EAAYtD,IAAlB,UAyGA,EAFgB,I,oDAjGDuD,c,+CAAb,+GACUC,EAAiB,CACrBC,OADqB,OAErBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAA,UAAe,CAACC,WAJ5B,SAO2BC,MAAMC,EAPjC,iBAOUC,EAPV,yBAQWA,EARX,kD,yOAWQC,UAAR,oBACEH,MAAMC,EAAND,SACQ,YAEJ,GADAR,EAAU,qBAAqBU,EAA/BV,QACIU,eAA0BA,UAA9B,IACE,OAAOA,EAAP,OAEF,MAAIA,UACFV,EAAUU,EAAVV,WAPNQ,MAUQ,YACJR,KACAY,EAAS5I,EAAM,IAAK+H,EAApBa,MAZJJ,OAcS,YACLR,KACAY,EAAS,KAAM,IAAKb,EAApBa,O,EAgBCC,qBAAP,YACEb,EAAU,4BAA4Bc,kBAA7B,kBAAsEA,kBAA/Ed,QACA,IACEM,eAAeQ,kBAAfR,QACA,MAAOS,GACPf,0CACAA,EAAUc,kBAAD,OAATd,KACAc,oBAA4BA,EAA5BA,UAA+CA,EAA/CA,WAEF,IAAMZ,EAAiB,CACrBC,OADqB,OAErBC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,oBAAoBQ,kBAApBR,UAGR1D,KAAA,UAAekE,kBAAf,MAA4DA,EAA5D,SAA8EA,EAA9E,UAAiGA,EAAjG,Y,EAGKE,oBAAP,YACEhB,EAAU,gCAAgCc,kBAAjC,gBAAwEA,yBAAjFd,IAKIc,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvClE,KAAA,UAAekE,kBAAf,IANsB,CACpBX,OADoB,MAEpBC,QAAS,CAAE,eAAgB,qBAI8BU,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGKG,uBAAP,YACEjB,EAAU,mCAAmCc,kBAApC,gBAA2EA,yBAApFd,IAKIc,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvClE,KAAA,UAAekE,kBAAf,IANsB,CACpBX,OADoB,SAEpBC,QAAS,CAAE,eAAgB,qBAI8BU,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGKI,oBAAP,YACElB,EAAU,gCAAgCc,kBAAjC,gBAAwEA,yBAAjFd,IACA,IAAMmB,EAAgB,CACpBhB,OADoB,MAEpBC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,oBAAoBQ,kBAApBR,UAEJQ,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvClE,KAAA,UAAekE,kBAAf,MAA2DA,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,MCvFJ,EAFa,I,WAZX,c,mBAGAM,uBACE,MAAO,uCAAuCC,QAAQ,SAAS,YAC7D,IAAM1G,EAAI2G,iBAAV,EAEA,OADUnH,SAAgBQ,IAA1B,GACO4G,SAAP,Q,kUCDN,ICsBA,EAMA,ED5BMC,EAAW9E,IAAjB,UA+JM+E,EAAa,I,WAtJjB,aACE7E,KAAA,mBACAA,KAAA,iBACAA,KAAA,cACAA,KAAA,8BACAA,KAAA,4BAEAA,KAAA,wBAA+BA,KAAK8E,wBAAwBrG,KAA5DuB,M,2BAGK+E,4BAAP,YACE/E,KAAA,4B,EAGKgF,0BAAP,YACEhF,KAAA,0B,EAGKiF,sBAAP,WACE,OAAOjF,KAAKkF,cAAZ,Q,EAGKC,wBAAP,WACE,OAAOnF,KAAKoF,gBAAZ,Q,EAGKC,gBAAP,2BAAqI,IAApBC,OAAa,GAC5H,IAAIpB,EAAsB,CACxBL,IADwB,EAExB0B,KAAMrC,EAFkB,KAGxBsC,OAAQ,CAAC7B,MAAD,EAAc8B,UAAWA,GACjCzB,SAJwB,EAKxB0B,oBAAqBrE,GAGvBwD,sB,EAEKc,qBAAP,2BAA6I,IAApBL,OAAa,GACpI,IAAIpB,EAAsB,CACxBL,IADwB,EAExB0B,KAAMrC,EAFkB,KAGxBsC,OAAQ,CAACI,SAAD,EAAoBH,UAAUA,GACtCzB,SAJwB,EAKxB0B,oBAAqBrE,GAGvBwD,sB,EAGKgB,cAAP,mBAAkE,IAApBP,OAAa,GAEzD,IAAMQ,EAAYC,EAAlB,cAIA,GAHAnB,EAAS,yCAATA,GACAA,EAASoB,EAATpB,KAEA,EAAgB,CACd,IAAIqB,EAAgC,CAClCC,gBADkC,EAElCJ,UAFkC,EAGlC3C,UAAYA,EAHsB,SAIlCa,SAAUhE,KAAK8E,yBAEjB9E,KAAA,sBACIA,KAAJ,wBAAiCA,KAAKmG,uBAAuBC,4BACxD,CACL,IAAIH,EAAgC,CAClCC,gBADkC,EAElCJ,UAFkC,EAGlC3C,UAAYA,EAHsB,WAIlCa,SAAUhE,KAAK8E,yBAEjB9E,KAAA,wBACIA,KAAJ,0BAAmCA,KAAKqG,yBAAyBD,wBAEnEpG,KAAA,iB,EAGYsG,qB,4CAAd,wGAEE,KADMC,EAAqCvG,KAAKkF,cADlD,UAE+BlF,KAAKwG,WAAWtK,KAAKqK,QAClD,IAAIA,GAAyBvG,KAAKyG,0BAA0BF,GAH9D,gD,uDAMcG,uB,4CAAd,wGAEE,KADMH,EAAqCvG,KAAKoF,gBADlD,UAE+BpF,KAAKwG,WAAWtK,KAAKqK,QAClD,IAAIA,GAAyBvG,KAAKyG,0BAA0BF,GAH9D,gD,uDAMcI,c,4CAAd,mGACMC,EAAmB5G,KAAKkF,cAActJ,OAASoE,KAAKoF,gBAD1D,mBAESwB,EAFT,uBAGIhC,EAAS,uDAHb,KAKQ5E,KAAKkF,cAActJ,OAL3B,mCAMYoE,KANZ,0DAOeA,KAAKoF,gBAAgBxJ,OAPpC,qCAQYoE,KARZ,iCAUI4G,EAAmB5G,KAAKkF,cAActJ,OAASoE,KAAKoF,gBAApDwB,OAVJ,gE,uDAcQ9B,wBAAR,kBAEM+B,IAAY1D,EAAhB,SACMnD,KAAJ,wBAAiCA,KAAKmG,uBAAuBW,6BAEtD9G,KAAJ,0BAAmCA,KAAKqG,yBAAyBS,6BAEtElC,EAAS,iDAAD,gCAPyF,GASjG,IAAMrE,EAAaP,KAAKwG,WAAW/F,WAAU,SAAAC,GAAO,OAAIA,cAAJ,KACpD,GAAIH,GAAJ,EAAqB,CAEnB,IAAMgG,EAAYvG,KAAKwG,WAAvB,GACAxG,KAAA,uBACA4E,KACAA,EAAS,6CAA6C2B,EALnC,WAOnBA,+BAAwDA,kBAAxDA,uB,EAIIE,0BAAR,YAGE,GAFA7B,EAAS,qDAAqDmC,EAA9DnC,WACAA,KACI,OAACmC,uBAAD,MAAwCA,0BAA5C,MAAqFA,2BACnF,OAAQA,kBAAR,MACE,KAAK7D,EAAL,KACE8D,0BACA,MAEF,KAAK9D,EAAL,IACE8D,yBACA,MAEF,KAAK9D,EAAL,OACE8D,4BACA,MAEF,KAAK9D,EAAL,IACE8D,2B,MAUV,IE7JMC,EAAcnH,IAApB,qBASaoH,EAAb,WAcI,aAAwB,KAJdC,cAA6B,GAKnCnH,KAAA,SAAgB,IAAI,EAApB,WACAA,KAAA,aACAA,KAAA,oBAGAA,KAAA,mBAA0BA,KAAKoH,mBAAmB3I,KAAlDuB,MACAA,KAAA,sBAA6BA,KAAKqH,sBAAsB5I,KAAxDuB,MACAA,KAAA,sBAA6BA,KAAKsH,sBAAsB7I,KAAxDuB,MACAA,KAAA,oBAA2BA,KAAKuH,oBAAoB9I,KAApDuB,MAvBR,cAGI,WAII,OAHMkH,EAAN,YACIA,YAAgC,IAAhCA,GAEGA,EAAP,WAPR,mDA0BIM,WACI,IAAIC,EAAJ,GAIA,OAHAzH,KAAA,uBAA2B,YACvByH,OAAaC,EAAbD,cAEJ,GA/BR,kBAkCIE,YACI,IAAIlL,GAAJ,EACI8D,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACI9D,EAASuD,KAAK4H,iBAAdnL,IAEJ,GAxCR,kBA2CIoL,YACI,IAAItH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBA9CZ,mBAkDI8H,YACI,IAAIvH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBArDZ,aAyDI,YACIA,KAAA,gBACA,IAAI+H,EAAJ,GACA/H,KAAA,uBAA2B,YACvB+H,cAEJ/H,KAAA,oBA/DR,+BAkEI,YACI,IAAI0H,EAAoB,CACpBM,UADoB,EAEpBC,UAFoB,GAGpBC,IAHoB,GAIpBC,UAAU,GAEV5H,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACImH,EAAS1H,KAAKmH,cAAdO,IAEJ,GA7ER,wBAgFI,gBACIT,EAAY,sCAAD,oBAAXA,oBACImB,QAAiBA,GAArB,KACInB,MAnFZ,wBAuFI,gBACIA,EAAY,sCAAD,oBAAXA,oBACImB,QAAiBA,GAArB,KACInB,MA1FZ,sBA8FI,gBACIA,EAAY,oCAAD,oBAAXA,iBACImB,QAAiBA,GAArB,MACInB,KACAjH,KAAA,mBACAA,KAAA,mDAA+EJ,EAA/E,qBAnGZ,qBAuGI,gBACIqH,EAAY,mCAAD,oBAAXA,iBACImB,QAAiBA,GAArB,MACInB,KACAjH,KAAA,mDAA+EJ,EAA/E,kBA3GZ,6BA+GI+C,cA/GJ,YAkHIlB,YAEI,GADAwF,EAAY,eAAZA,GACIjH,KAAK2H,gBAAT,GACIV,EAAY,eAAD,EAAXA,0CACG,CACH,IAAIS,EAAoB1H,KAAKqI,6BAA7B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAM1B,EAA2B,CAC7BnC,IAAK6D,YAAmBA,EADK,IAE7BnC,KAAMrC,EAFuB,IAG7BsC,OAH6B,GAI7BxB,SAAUhE,KAJmB,oBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAoC,EAAY,8BAAZA,GAIR,MADwB,CAACxJ,KAAD,EAAaS,MAAO,KAtIpD,sBA0IIuE,cA1IJ,8BA6IIG,cA7IJ,aAgJIhB,gBAhJJ,kBAmJIkB,gBACI,QAD6E,IAApCf,OAAuB,IAChE,GACAkF,EAAY,kBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKqI,6BAA7B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAM1B,EAA2B,CAC7BnC,IAAK6D,YAAmBA,EADK,IAE7BnC,KAAMrC,EAFuB,KAG7BsC,OAH6B,EAI7BxB,SAAUhE,KAJmB,mBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAoC,EAAY,8BAAZA,KAnKZ,uBAwKIlE,kBACI,OACAkE,EAAY,oBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKqI,6BAA7B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAM1B,EAA2B,CAC7BnC,IAAK6D,YAAmBA,EADK,IAE7BnC,KAAMrC,EAFuB,OAG7BsC,OAAQ,CACJnG,GAAIiJ,EAASjJ,IAEjB2E,SAAUhE,KANmB,sBAO7B0F,oBAAqBjI,GAEzBoH,2BAGAoC,EAAY,8BAAZA,KA1LZ,qBA8LIhE,kBACI,OACAgE,EAAY,oBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKqI,6BAA7B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAM1B,EAA2B,CAC7BnC,IAAK6D,YAAmBA,EADK,IAE7BnC,KAAMrC,EAFuB,IAG7BsC,OAH6B,EAI7BxB,SAAUhE,KAJmB,sBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAoC,EAAY,8BAAZA,KA9MZ,2BAkNIhG,cACIjB,KAAA,wCAnNR,oBAsNI8B,gBACI9B,KAAA,wBAvNR,aA0NIE,WACIF,KAAA,uBA3NR,kBA8NIgC,gBACI,MAAMxC,MAAN,oBA/NR,iBAkOI+B,YACIvB,KAAA,cAnOR,wCAsOIG,kBACIH,KAAA,yDAvOR,gBA0OIkC,gBACI,UA3OR,sBA8OIC,kBAEI,OADAnC,KAAA,+BACA,GAhPR,iBAmPI0B,kBAnPJ,iBAqPIzB,WACID,KAAA,2BAtPR,oBAyPIqC,kBAEI,OADArC,KAAA,6BACA,GA3PR,M,SDSYuI,O,mBAAAA,I,eAAAA,I,oBAAAA,M,cAMAC,O,uBAAAA,I,4BAAAA,M,KE9BZ,IAAMC,EAAS3I,IAAf,aAsPA,EADoB,I,6BAzOhB,aAAc,KAPJ4I,cAA+B,GAQrC1I,KAAA,mBAA0BA,KAAK2I,mBAAmBlK,KAAlDuB,MACAA,KAAA,gBAAuBA,KAAK4I,gBAAgBnK,KAA5CuB,MACAA,KAAA,cACAA,KAAA,YACAA,KAAA,iBACAA,KAAA,mBAA0BA,KAAK2I,mBAAmBlK,KAAlDuB,MACAA,KAAA,iBAAwBA,KAAK6I,iBAAiBpK,KAA9CuB,MACAA,KAAA,kBAAyBA,KAAK8I,kBAAkBrK,KAAhDuB,MACAA,KAAA,oBAA2BA,KAAK+I,oBAAoBtK,KAApDuB,MACAA,KAAA,oBAA2BA,KAAKgJ,oBAAoBvK,KAApDuB,MACAA,KAAA,kBAAyBA,KAAKiJ,kBAAkBxK,KAAhDuB,MACAA,KAAA,gBAAuBA,KAAKkJ,gBAAgBzK,KAA5CuB,MACAA,KAAA,iBAAwBA,KAAKmJ,iBAAiB1K,KAA9CuB,MACAA,KAAA,oBAA2BA,KAAKoJ,oBAAoB3K,KAApDuB,MACAA,KAAA,yBAAgCA,KAAKqJ,yBAAyB5K,KAA9DuB,M,SApBGsJ,gBAAP,YACItJ,KAAA,uB,EAsBI2I,mBAAR,YACIF,EAAO,sBAAPA,GACA,IACIA,EADA,GAGA,IAAMc,EAAU7F,WAAhB,GACA1D,KAAA,uBAA2B,mBAAcwJ,iBAAd,MAE/B,MAAOC,GACHhB,KACAA,qB,EAKAI,iBAAR,YACIJ,EAAO,oBAAPA,GACAzI,KAAA,uBAA2B,mBAAcwJ,eAAd,O,EAIvBJ,oBAAR,YACIX,EAAO,wBAAPA,GACAzI,KAAA,uBAA2B,mBAAcwJ,kBAAd,O,EAGvBV,kBAAR,YACIL,EAAO,qBAAPA,GACAzI,KAAA,uBAA2B,mBAAcwJ,gBAAd,O,EAGvBT,oBAAR,YACIN,EAAO,0BAAPA,GACA,IACI,IAAMc,EAAU7F,WAAhB,GACA+E,KACAzI,KAAA,uBAA2B,mBAAcwJ,oBAAd,MAE/B,MAAOC,GACHhB,qB,EAIAO,oBAAR,YACIP,EAAO,wBAAPA,GACA,IACI,IAAMc,EAAU7F,WAAhB,GACA+E,KACAzI,KAAA,uBAA2B,mBAAcwJ,mBAAd,MAE/B,MAAOC,GACHhB,qB,EAIAQ,kBAAR,YACIR,EAAO,qBAAPA,GACA,IACI,IAAMc,EAAU7F,WAAhB,GACA+E,KACAzI,KAAA,uBAA2B,mBAAcwJ,oBAAd,MAE/B,MAAOC,GACHhB,qB,EAIAY,yBAAR,YACIZ,EAAO,8BAAPA,GACA,IACI,IAAMc,EAAU7F,WAAhB,GACA+E,KACAzI,KAAA,uBAA2B,mBAAcwJ,iBAAwBD,EAAxBC,KAAsCD,EAAtCC,SAAwDD,EAAtE,SAE/B,MAAOE,GACHhB,KACAA,qB,EAIAS,gBAAR,YACIT,EAAO,mBAAPA,GACA,IAEI,IAAMc,EAAU7F,WAAhB,GACA+E,KACAzI,KAAA,uBAA2B,mBAAcwJ,iBAAd,MAE/B,MAAOC,GACHhB,qB,EAIAU,iBAAR,YACIV,EAAO,2BAAPA,GACA,IACI,IAAMc,EAAU7F,WAAhB,GACA+E,EAFA,GAIIc,WAAoBA,iBAAxB,GACIvJ,KAAA,uBAA2B,mBAAcwJ,uBAA8BD,EAA5C,YAE3BA,YAAqBA,kBAAzB,GACIvJ,KAAA,uBAA2B,mBAAcwJ,wBAA+BD,EAA7C,aAGnC,MAAOE,GACHhB,qB,EAeAG,gBAAR,YACIH,mBACA,IACI,IAAMc,EAAU7F,WAAhB,GAEA,GADA+E,KACA,OAAIzI,KAAKa,SAAmB,OACxB0I,SAAiBvJ,KAAKa,SAA1B,iBACI4H,yCAGAA,iEACAzI,KAAA,4CAIR,MAAOyJ,GACHhB,qB,EAIDiB,YAAP,YACIjB,sBACAzI,KAAA,WACAyI,EAHwC,8BAKxCzI,KAAA,OAAc2J,KACdlB,0BACAzI,KAAA,oBAAyBA,KAAzB,oBACAA,KAAA,iBAAsBA,KAAtB,iBACAA,KAAA,kBAAuBA,KAAvB,kBACAA,KAAA,mBAAwBA,KAAxB,mBACAA,KAAA,qBAA0BA,KAA1B,qBACAA,KAAA,qBAA0BA,KAA1B,qBACAA,KAAA,mBAAwBA,KAAxB,mBACAA,KAAA,0BAA+BA,KAA/B,0BACAA,KAAA,iBAAsBA,KAAtB,iBACAA,KAAA,kBAAuBA,KAAvB,kBACAA,KAAA,qBAA0BA,KAA1B,sB,EAGG4J,MAAP,YACI5J,KAAA,oBAAyB,CAAC6J,c,EAGvBC,OAAP,YACI9J,KAAA,qBAA0B,CAAC6J,c,EAGxBE,SAAP,gBACI/J,KAAA,uBAA4B,CAAC6J,SAAD,EAAUG,KAAV,EAAezE,U,EAGxC0E,UAAP,gBACIjK,KAAA,uBAA6B,CAAC6J,SAAD,EAAUG,KAAV,EAAezE,U,EAGzC2E,WAAP,6BAA6K,IAAtH3E,MAAkBiD,EAAW2B,eAAyF,IAA/EC,OAAgC,QAA+C,IAAzCC,MAAiB,SAAwB,IAArBC,MAAiB,IACrK,IAAIC,EAAgB,CAChBC,KADgB,EAEhBC,GAFgB,EAGhBT,KAHgB,EAIhBzE,KAJgB,EAKhB6E,sBALgB,EAMhBC,QANgB,EAOhBC,WAAWA,GAEf7B,oBACAA,KACAzI,KAAA,yB,EAGG0K,YAAP,6BAAkJ,IAA3DC,MAAqBpC,EAASqC,aAA6B,IAArBN,MAAiB,IAC1I,IAAIO,EAAqB,CACrBL,KADqB,EAErBR,KAFqB,EAGrBc,QAHqB,EAIrBC,QAJqB,EAKrBJ,SALqB,EAMrBpF,KANqB,EAOrB+E,WAAYA,GAEhBtK,KAAA,uB,EAGGgL,YAAP,WACIhL,KAAA,yB,EAGGiL,kBAAP,gBACIjL,KAAA,4BAAiC,CAACgK,KAAD,EAAMQ,KAAN,EAAWjF,U,6NC7OpD,IAAM2F,EAAcpL,IAApB,uBAEqBqL,E,oBAIjB,gBAAwF,OACpF,8BACA,aACA,cACA,gBAEA,yBACA,IAAIC,EAAsB,YAA1B,0BAPoF,OASpF,eAAoB,sBAApB,IACA,wBAA6B,+BAA7B,IACA,0BAA+B,iCAA/B,IACA,0BAA+B,iCAA/B,IAGAA,WAA4B,YACzB,gDAhBiF,E,2GAoBxFtI,qCAA+E,IAAnCf,OAAsB,GAC9DmJ,EAAY,wBAAD,qBAAXA,GACAlL,KAAA,oC,EAIJyB,sBAKI,OAFAyJ,EAAY,iBAAZA,GACAlL,KAAA,4BACO,CAACvC,KAAD,EAAYS,MAAO,K,EAI9B6E,uCACImI,EAAY,4BAAZA,GACAlL,KAAA,wC,EAGJiD,qCACIiI,EAAY,0BAAZA,GACAlL,KAAA,sC,EAGJyC,kC,EACAE,yC,EACAC,0C,EACAhB,2B,EACAyJ,0C,EACAC,4C,EAGAC,6BAGIL,EAAY,qCAAD,EAAXA,4BACAA,KACAlL,KAAA,gC,EAGJwL,sCACIN,EAAY,wDAAD,EAAXA,4BACAlL,KAAA,sC,GAnE8CkB,G,4FCHtD,IAAMuK,EAAY3L,IAAlB,2BAOa4L,EAAb,Y,QAWI,aAAsB,aAClB,kCACA,iBACA,eAHkB,E,EAX1B,G,EAAA,G,sEAAA,cAII,WAII,OAHMA,EAAN,YACIA,YAAkC,IAAlCA,GAEGA,EAAP,WARR,2CAkBI,qBAAuG,IAA5CC,MAAoB,IAC3E,IAAIC,EAA0B,CAC1BC,QAD0B,EAE1BF,QAASA,GAEb3L,KAAA,sBACA,GAAiB8L,mBACjBL,gDAzBR,qBA4BI,cAEI,OADiBE,EAAA,WAAkB,mBAAYI,IAAZ,MACnC,GA9BR,6BAiCI,YAA2D,WACvD/L,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC2K,EAAzC,UACIA,4CApChB,YAyCI,YAA2C,WACnC3K,EAAoB,CACpB5D,KADoB,EAEpBS,MAAO,IAcX,OAZA8B,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC4K,EAAzC,WACIR,EAAU,0CAAVA,GACAA,EAAUQ,EAAVR,SACAQ,2BAKJjM,KAAKkM,cAActQ,OAAvB,IACIyF,EAAQrB,KAAKkM,cAAc,GAAGL,QAAQpK,UAAtCJ,IAEJ,GA1DR,sBA6DI,YAA+C,WAC3CrB,KAAA,uBAA2B,YAClB,uBAA8BgM,EAAnC,UACIA,qCAhEhB,8BAqEI,YAA4D,WACxDhM,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC2K,EAAzC,UACIA,6CAxEhB,aA6EI,cAAqD,WACjDhM,KAAA,uBAA2B,YAClB,uBAA8BgM,EAAnC,WACIP,EAAU,2CAAVA,GACAA,EAAUO,EAAVP,SACAA,KACAO,+BAnFhB,kBAwFIlJ,gBAA+E,oBAAnCf,OAAsB,GAC9D/B,KAAA,uBAA2B,YAClB,uBAA8BgM,EAAnC,WACIP,EAAU,oDAAD,sBAATA,GACAA,EAAUO,EAAVP,SACAA,KACAO,sCA9FhB,uBAmGIjJ,kBAAyH,WACrH/C,KAAA,uBAA2B,YAClB,uBAA8BgM,EAAnC,WACIP,EAAU,uDAAVA,GACAA,EAAUO,EAAVP,SACAA,KACAO,6CAzGhB,qBA8GI/I,kBAAuH,WACnHjD,KAAA,uBAA2B,YAClB,uBAA8BgM,EAAnC,WACIP,EAAU,sDAAVA,GACAA,EAAUO,EAAVP,SACAA,KACAO,2CApHhB,M,gGCZqBG,E,oBACnB,cAAqD,OAClD,YADkD,S,mGAK9CC,KAAP,oBAA6H,oBAAnFC,MAAmB,QAAgE,IAA7DC,MAAiB,aAA4C,IAApCC,MAAkB,KACzG,IAAIC,EAAcxM,KAAKyM,oBADoG,iBAGvHC,EAAJ,GACA,UACE,WACEA,YACA,MAEF,cACEA,eACA,MAEF,cACEA,eACA,MAEF,eACEA,cACA,MAEF,QACEA,YAKJ,IAAMC,EAAgBC,uBAAtB,OACAD,iCACAA,YAA6BN,EAA7BM,KACAA,+BACAA,+BA/B2H,SAkC3H,IAAME,EAAYD,uBAAlB,OACAC,yCAEA,IAAMC,EAAgBF,uBAAtB,UACAE,sBACAA,cAvC2H,EA0C3H,IAAMC,EAAkBH,uBAAxB,UACAG,8BACAA,kBACAA,4BAA0C,WACxC,mCAKF,IAAMC,EAA0BJ,uBAAhC,OACAI,yBACAA,cArD2H,EAyD3HH,iBACAA,iBACAF,iBACAA,iBACAA,sBA7D2H,GAgE3H,IAAMM,EAA+BL,wBAArC,GAcA,OAbA,GAAiBK,cAjE0G,GAqE3HC,yBArE2H,QAwEvHX,GAAJ,IACEA,OAEFY,YAAW,WACT,kCADFA,GAGA,G,IChFF,YACEnN,KAAA,KAAYA,KAAKoM,KAAK3N,KAAtBuB,MAEAA,KAAA,oBAH6D,EAM7DA,KAAA,YAAmBA,KAAKyM,oBAAxB,oBCCJ,EAF4B,I,WARxB,c,mBAGAW,+BACI,OAAO,IAAIjB,EAAX,I,MCuCR,EAFiB,IA3CjB,WAME,aACEnM,KAAA,iBACAA,KAAA,eACAA,KAAA,0BACAA,KAAA,4BAEAA,KAAA,KAAYA,KAAKoM,KAAK3N,KAAtBuB,MAZJ,0CAeE,WACE,OAAOA,KAAP,aAhBJ,OAmBE,uBAA2F,IAAjDsM,MAAiB,aAAgC,IAAxBC,MAAkB,KACnF,IACMc,EADeC,qBAArB,MACyBC,SAAkCvN,KAAKwN,aAAexN,KAAtDuN,wBAAzB,GACAvN,KAAA,eACAA,KAAA,uBAvBJ,SA0BE,YAA4C,WACpCO,EAAaP,KAAKyN,cAAchN,WAAU,SAAAC,GAAO,OAAIA,IAAJ,KACnDH,GAAJ,IACEP,KAAA,uBADmB,GAGnBA,KAAA,mBAAuB,cAErBqN,YAAgC,wBAAhCA,WAGJ,IAAMK,EAAWL,EAAjB,cACA,OAAIK,GAAmBA,iBACvB1N,KAAA,eACIA,KAAKwN,aAAT,IAA2BxN,KAAKwN,aAAe,IAvCnD,MCAO,SAASG,EAAOC,EAAhB,GACL,OAAQA,OAAaC,EAArB,GAGK,SAASC,EAAeF,EAAxB,GACL,OAAQA,aAAmBC,EAA3B,SAGK,SAASE,EAAWH,EAApB,GACL,OAAQA,WAAiBC,EAAzB,OCJF,IAAMG,EAAWlO,IAAjB,mBAEqBmO,E,WAGjB,cACIjO,KAAA,S,2BAGGkO,+BAAP,YACIF,EAAS,wBAAwBlD,EAAzB,wBAAwDA,EAAxD,2BAA0FA,EAAlGkD,MACA,IAAMG,EAAa,qCAA6CnO,KAAK0H,OAAO0G,WAAzD,MAA2E,CAAC/O,GAAIyL,EAAQuD,MAA3G,GACIxE,EAAJ,UACA,IACIA,EAAWsE,EAAXtE,UAEJmE,EAAS,wBAAwBlD,EAAzB,wBAAwDA,EAAxD,2BAARkD,GAEA,IAAI1F,EAAWwC,EAAf,KACAkD,EAV+C,GAY/C,IACI,OAAQlD,EAAR,MACI,aACI,OAAQA,EAAR,WACI,KAAK9K,KAAK0H,OAAO0G,WAAjB,SACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,YADkC,GAGlC,IAAMC,EAAe,qCAA6CvO,KAAK0H,OAAO0G,WAAzD,QAA6E,CAAC/O,GAAIiJ,EAASkG,WAAhH,GACA,GACIC,OAAcF,EAAdE,MAAqC5E,EAArC4E,kBAA+DnG,EAA/DmG,SAEJ,MAEJ,KAAKzO,KAAK0H,OAAO0G,WAAjB,QACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,cACAG,OAAcnG,EAAdmG,MAAiC5E,EAAjC4E,oBACA,MAEJ,KAAKzO,KAAK0H,OAAO0G,WAAjB,MACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,YACAG,OAAcnG,EAAdmG,SAAoCnG,EAApCmG,4CAIR,MAEJ,aACI,OAAQ3D,EAAR,WACI,KAAK9K,KAAK0H,OAAO0G,WAAjB,QACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,aADiC,GAMzC,MAEJ,aACI,OAAQxD,EAAR,WACI,KAAK9K,KAAK0H,OAAO0G,WAAjB,SACIE,yCAAiDtO,KAAK0H,OAAO0G,WAA7DE,iBACA,MAEJ,KAAKtO,KAAK0H,OAAO0G,WAAjB,QACI,IAAIM,EAAeJ,qCAA6CtO,KAAK0H,OAAO0G,WAAzDE,UAAnB,GACAA,yCAAiDtO,KAAK0H,OAAO0G,WAA7DE,gBACAG,OAAcC,EAAdD,MAAqC5E,EAArC4E,yCAOlB,MAAOhF,GACLuE,O,EAKRW,0BACIX,EAAS,qBAATA,I,EAGJY,0BACI,OAAON,GAAP,qB,mHCpFR,ICSKO,GDTCC,GAAWhP,IAAjB,iBAEqBiP,G,oBAYnB,cAAoD,sBAAjCC,OAA0B,IAC3C,gCADkD,iBAElD,UAAejQ,OAAf,eACA,IAAqB,UAAeA,OAAf,cACrB,gBAJkD,E,mFARtCwD,YAAd,YAIE,YAJyD,IAAjCyM,OAA0B,GAC5CD,EAAN,YACEA,YAAuC,IAAIA,EAA3CA,IAEKA,EAAP,W,2BAWMtM,oBAAR,YACE,OAAIzC,KAAKiP,QAAQC,QAAQzR,IACvBuC,KAAA,2BAAgC,CAACvC,KAAD,EAAYS,MAAM,M,EAI9CyE,2BAAR,YACEmM,GAAS,kCAAkCzN,EAA3CyN,MACAA,MACA,IAAMK,EAA6BzL,eAAerC,EAAlD,OACAyN,MACA9O,KAAA,gBAAqBqB,EAArB,S,EAGMuB,4BAAR,YACE5C,KAAA,+B,EAGMyB,UAAR,YACE,IAAI2N,EAAJ,GACAN,GAAS,mCAATA,GACA,IAAMO,EAAmBrP,KAAKiP,QAAQC,QAAtC,GAKA,OAJAJ,MACA,OAAIO,IACFD,EAAe1L,WAAf0L,IAEK,CAAC3R,KAAD,EAAYS,MAAMkR,I,EAGnBxN,WAAR,cACE5B,KAAA,2BAAgC,CAACvC,KAAD,EAAWS,MAAMoR,K,EAGnDxM,gCACG,QAD4E,IAAnCf,OAAsB,GAC/D,GAEA,IAAIV,EAAmBrB,KAAKyB,UAA5B,GACAqN,GAAS,wBAATA,GACAA,MACAzN,gBACArB,KAAA,iC,EAGH+C,uCACE,IAAI1B,EAAmBrB,KAAKyB,UAA5B,GACMuB,EAAa3B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCsC,GAAJ,IACE8L,GAAS,4BAATA,GACAA,MACAzN,qBAEFrB,KAAA,gC,EAGFiD,qCACE,IAAI5B,EAAmBrB,KAAKyB,UAA5B,GACMuB,EAAa3B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCsC,GAAJ,IACE3B,sBACAyN,GAAS,0BAATA,GACAA,OAEF9O,KAAA,gC,EAGF8H,+B,EAGAN,mCACE,OAAOxH,KAAP,e,EAGF2H,4BACE,U,EAMK4H,WAAP,YACEvP,KAAA,iB,GAnGoDkB,I,SCOnD2N,O,yBAAAA,I,wBAAAA,Q,KAKL,IAAMW,GAAW1P,IAAjB,gBAEa2P,GAAb,yBAGI,WAII,OAHMA,EAAN,YACIA,YAAwB,IAAxBA,GAEGA,EAAP,WAPR,kBAoCI,aAAsB,KAtBdC,gBAAkB,GAsBJ,KArBZC,YAAwB,GAqBZ,KAnBZC,cAA0B,GAmBd,KAjBdC,eAAiD,KAiBnC,KAdZC,cAA0B,GAehCN,yDAEAxP,KAAA,YACAA,KAAA,iBACAA,KAAA,qBACAA,KAAA,aAAoB,IAAI+O,IANN,GASlBgB,kBATkB,MAYlB/P,KAAA,aAAoBA,KAAKgQ,aAAavR,KAAtCuB,MACAA,KAAA,cAAqBA,KAAKiQ,cAAcxR,KAAxCuB,MACAA,KAAA,kBAAyBA,KAAKkQ,kBAAkBzR,KAAhDuB,MACAA,KAAA,eAAsBA,KAAKmQ,eAAe1R,KAA1CuB,MACAA,KAAA,sBAA6BA,KAAKoQ,sBAAsB3R,KAAxDuB,MACAA,KAAA,qBAA4BA,KAAKqQ,qBAAqB5R,KAAtDuB,MACAA,KAAA,kBAAyBA,KAAKsQ,kBAAkB7R,KAAhDuB,MACAA,KAAA,iBAAwBA,KAAKuQ,iBAAiB9R,KAA9CuB,MAvDR,6BA4BI,YACIA,KAAA,uBA7BR,0BAgCI,YACIA,KAAA,2BAjCR,iBA0DI,YACI,OAAQA,KAAK8P,cAAcrP,WAAU,mBAAUhD,IAAV,MAArC,GA3DR,kBA8DI+S,YACIxQ,KAAA,gBACAA,KAAA,2BAA+B,mBAAca,6BAAd,OAhEvC,WAmEI,WACIb,KAAA,4BAAiCyP,aAAuBzP,KAAxD,gBAA6EA,KAA7E,cApER,kBAuEI,WACIA,KAAA,4BAAiCyP,iBAA2BzP,KAA5D,gBAAiFA,KAAjF,iBAxER,oBA2EI,WACIA,KAAA,4BAAiCyP,mBAA6BzP,KAA9D,gBAAmFA,KAAnF,mBA5ER,uBA+EI,YAAkD,WAClCA,KAAK2P,YAAYlP,WAAU,mBAAagQ,IAAb,KACvC,IACIzQ,KAAA,oBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAca,4BAAmC,EAAjD,oBApF3C,4BAwFI,YAAuD,WAC/CD,EAAQZ,KAAK2P,YAAYlP,WAAU,mBAAagQ,IAAb,KACnC7P,GAAJ,IACIZ,KAAA,wBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAca,4BAAmC,EAAjD,oBA7F3C,sBAkGI,YACI,OAAQb,KAAK2P,YAAYlP,WAAU,mBAAagQ,IAAb,MAAnC,GAnGR,yBAuGI,YAAoD,WACpCzQ,KAAK4P,cAAcnP,WAAU,mBAAeiQ,IAAf,KACzC,IACI1Q,KAAA,sBACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAca,8BAAqC,EAAnD,oBA5G3C,8BAgHI,YAAyD,WACjDD,EAAQZ,KAAK4P,cAAcnP,WAAU,mBAAagQ,IAAb,KACrC7P,GAAJ,IACIZ,KAAA,0BACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAca,8BAAqC,EAAnD,oBArH3C,wBA0HI,YACI,OAAQb,KAAK4P,cAAcnP,WAAU,mBAAU4N,IAAV,MAArC,GA3HR,uBA8HI,WACI,gBAAWrO,KAAX,gBA/HR,qBAkII,WACI,gBAAWA,KAAX,cAnIR,iBAuII,YACIwP,GAAS,wBAATA,GACAxP,KAAA,gBAFwC,EAIxC,IAAI2Q,EAAY3Q,KAAK4Q,aAAarP,eAAekO,aAAuBzP,KAAxE,iBACAwP,MACA,IACIxP,KAAA,YAIJ,IAAI2P,EAAc3P,KAAK4Q,aAAarP,eAAekO,iBAA2BzP,KAA9E,iBACAwP,MACA,IACIxP,KAAA,eAIJ,IAAI4P,EAAgB5P,KAAK4Q,aAAarP,eAAekO,mBAA6BzP,KAAlF,iBACAwP,MACA,IACIxP,KAAA,iBAGJA,KAAA,uBAA2B,mBAAca,EAAd,4BA/JnC,iBAoKI,WACI,OAAOb,KAAP,iBArKR,sBAwKI,YACI,MACIY,EAAQZ,KAAK6Q,SAASpQ,WAAU,mBAASqQ,aAAT,KAgBpC,OAfIlQ,EAAJ,GACIkQ,EAAM,CACFC,SADE,EAEFC,MAAO,CAAChR,KAFN,kBAGFiR,SAHE,GAIFC,WAAYC,SAASC,aAJnB,mBAKFC,iBALE,EAMF9L,KAAMiD,EAAW2B,UAErBnK,KAAA,iBACAA,KAAA,YAGA8Q,EAAM9Q,KAAK6Q,SAAXC,GAEJ,GA1LR,8BA6LI,YAGI,IAFA,IAAIQ,EAAJ,KACI1Q,EAAJ,EACOA,EAAQZ,KAAK6Q,SAApB,QAAqC,CACjC,IAAIC,EAAM9Q,KAAK6Q,SAAf,GACA,IAAIC,gBAEIA,EAAA,iBAAoB,mBAAW5S,IAAX,MAAxB,IACIoT,IACA1Q,EAAQZ,KAAK6Q,SAAbjQ,QAGRA,IAcJ,OAZA,IACI0Q,EAAW,CACPP,SAAUhL,EADH,cAEPiL,MAAO,CAAChR,KAAD,iBAFA,GAGPiR,SAHO,GAIPC,WAAYC,SAASC,aAJd,mBAKPC,iBALO,EAMP9L,KAAMiD,EAAW2B,UAErBnK,KAAA,iBACAA,KAAA,YAEJ,GAvNR,oBA2NIsQ,YAGI,GAAIU,SAAexI,EAAnB,UAEA,IAAIsI,EAAc9Q,KAAKuR,oBAAoBP,EAA3C,MAEAxB,GAAS,sBAAsBwB,EAAvB,WAAuCA,gBAA/CxB,MACAsB,QAAYE,EARyB,SAUrC,IAAIjG,EAAUoG,SAASC,aAAvB,mBACMI,EAAeJ,aAArB,oBACItG,EAAkB,CAClBN,KADkB,GAElBO,QAFkB,EAGlBf,KAAMgH,EAHY,KAIlBrG,SAJkB,EAKlBpF,KAAMiD,EALY,SAMlBsC,QAAYkG,EAAL,gCAA0CQ,GAErDV,mBACA9Q,KAAA,WAEAA,KAAA,uBAA2B,mBAAca,0BAAd,QAlPnC,mBAqPI0P,YAEI,GAAIS,SAAexI,EAAnB,UACIwI,aAAmBhR,KAAvB,iBAEA,IAAI8Q,EAAc9Q,KAAKuR,oBAAoBP,EAA3C,MAEAxB,GAAS,sBAAsBwB,EAAvB,WAAuCA,gBAA/CxB,MACAsB,QAAYE,EARwB,SAUpC,IAAIjG,EAAUoG,SAASC,aAAvB,mBACMI,EAAeJ,aAArB,oBACItG,EAAkB,CAClBN,KADkB,GAElBO,QAFkB,EAGlBf,KAAMgH,EAHY,KAIlBrG,SAJkB,EAKlBpF,KAAMiD,EALY,SAMlBsC,QAAYkG,EAAL,8BAAwCQ,GAEnDV,mBACA9Q,KAAA,WAEAA,KAAA,uBAA2B,mBAAca,0BAAd,QA5QnC,oBA+QI,YAEI,OADYb,KAAK6Q,SAASpQ,WAAU,mBAAiBqQ,aAAjB,MACpC,GAjRR,oBAoRIZ,YACI,GAAIuB,SAAgBjJ,EAApB,SAGA,GAAKxI,KAAK0R,oBAAoBD,EAA9B,MAsCIjC,GAAS,QAAQiC,EAAT,KAARjC,gBAtCwC,CACxCA,GAAS,mBAAmBiC,EAA5BjC,MACA,IAAMmC,EAAsB3R,KAAK4R,kBAAkBH,EAAnD,MACAjC,MACAA,6FAEA,IAAIqC,GAAJ,EASA,GAPA,GACI7R,KAAA,uBAA2B,YAClBa,0BAAL,KACIgR,SAIZ,EAAoB,CAEhB,IAAIC,EAAmB9R,KAAKuR,oBAAoBE,EAFhC,MAIhBK,OAAeL,EAJC,KAOZA,EAAJ,UACIA,oBAAwB,YACfK,EAAA,iBAAwB,mBAAUzD,IAAV,KAA7B,GAAgEyD,aAAmBL,EAAnBK,SAInEA,EAAA,iBAAwB,mBAAUzD,IAASoD,EAAnB,QAA7B,GAAmEK,aAAmBL,EAAnBK,MAEnE9R,KAAA,WACAwP,GAAS,gBAAgBiC,EAAzBjC,MACAO,WAAuB/P,KAAvB+P,iBAA8C0B,EAA9C1B,KAA0DvH,EAA1DuH,UACA/P,KAAA,uBAA2B,mBAAca,0BAAd,SAzT3C,eAmUImP,YAAqC,WACjCR,GAAS,6BADwB,GAGrBxP,KAAK8P,cAAcrP,WAAU,mBAAU4N,IAAV,KACzC,GAAerO,KAAK8P,cAAc5T,KAAK2N,GACvC2F,GAASxP,KAATwP,eAEAxP,KAAA,2BAA+B,mBAAca,6BAAoC,EAAlD,mBAG1Bb,KAAK0R,oBAAN,IAAuC1R,KAAK+R,sBAAhD,KACIvC,GAAS,QAAD,EAARA,eACAxP,KAAA,2BAA+B,mBAAca,8BAAd,QA/U3C,gBAmVIoP,YAAsC,WAC9BrP,EAAQZ,KAAK8P,cAAcrP,WAAU,mBAAU4N,IAAV,KACrCzN,GAAJ,GAAgBZ,KAAK8P,cAAchT,OAAO8D,EAA1B,GAEhBZ,KAAA,2BAA+B,mBAAca,6BAAoC,EAAlD,mBAG1Bb,KAAK0R,oBAAN,IAAuC1R,KAAK+R,sBAAhD,KACIvC,GAAS,QAAD,EAARA,gBACAxP,KAAA,2BAA+B,mBAAca,+BAAd,QA5V3C,iBAgWImR,gBACQzM,IAASiD,EAAb,UAEIqB,IAAa7J,KAAjB,kBAGKA,KAAK0R,oBAAV,KACIlC,GAAS,QAAD,EAARA,gCACAxP,KAAA,uBAA2B,mBAAca,6BAAd,SAxWvC,yBA6WI,YACIb,KAAA,kBA9WR,gCAiXI,WAAwC,MAChCiS,EAAJ,EACAjS,KAAA,kBAAsB,YAClBiS,GAAenB,EAAfmB,oBAEJ,SAAAjS,KAAA,oCAtXR,sBA0XI,cACI8Q,qBACAA,mBAEA9Q,KAAA,gCAEI8K,SAAiB9K,KAArB,iBACIA,KAAA,aAAkB8Q,EADsB,UAIxC9Q,KAAA,YApYZ,eAwYI,YACI,IAAI8R,EAAU9R,KAAKuR,oBAAnB,GACAO,qBACAA,aAAqBX,SAASC,aAA9BU,mBAEA9R,KAAA,gCAEAA,KAAA,YA/YR,aAkZI,YACI,IAAI8Q,EAAJ,KACIlQ,EAAQZ,KAAK6Q,SAASpQ,WAAU,mBAASqQ,aAAT,KAEpC,OADIlQ,GAAJ,IAAgBkQ,EAAM9Q,KAAK6Q,SAAXC,IAChB,GAtZR,qCAyZI,cACgBgB,EAAA,iBAAwB,mBAAUzD,IAAV,KACpC,GACIyD,iBA5ZZ,iBAgaI3B,cACI,QAD8D,IAAlC+B,OAAqB,GAC7CpH,SAAiBtC,EAArB,UAEIsC,SAAiB9K,KAArB,iBAEA,GAAKA,KAAK0R,oBAAoB5G,EAA9B,MAYI0E,GAAS,8BAA8B1E,EAA/B,KAAR0E,6CAZyC,CAGzC,IAAIsC,EAAU9R,KAAKuR,oBAAoBzG,EAAvC,MACA9K,KAAA,qCAAiD8K,EAAjD,MACA9K,KAAA,yBACAwP,uBACAA,MAEAxP,KAAA,uBAA2B,mBAAca,yBAAd,QA9avC,uBAsbIwP,YAAyC,WAErC8B,WAAgB,YACZ,2BAzbZ,wBA6bI/B,YAA2C,WAEvCa,WAAiB,YACd,0BAEHjR,KAAA,uBAA2B,mBAAca,gCAAd,OAlcnC,WAqcIkJ,YACI,IAAI/J,KAAK4O,iBAAiBwD,OAAOxW,SACjCoE,KAAA,uBACA+P,WAAuB/P,KAAvB+P,mBAAkDvH,EAAlDuH,YAxcR,gBA2cI,YACI,IAAInP,EAAQZ,KAAK6Q,SAASpQ,WAAU,mBAASqQ,aAAT,KACpC,GAAIlQ,GAAJ,EAAgB,CACZ4O,GAAS,8BAATA,GACA,IAAI/S,EAASuD,KAAK6Q,SAAS/T,OAAO8D,EAAlC,GACA4O,GAAS/S,EAAT+S,QACAxP,KAAA,aAjdZ,YAqdIiK,YACI,IAAIjK,KAAK4O,iBAAiBwD,OAAOxW,SACjCoE,KAAA,iBACA+P,YAAwB/P,KAAxB+P,mBAAmDvH,EAAnDuH,YAxdR,QA2dInG,WAAc,WACV,IAAI5J,KAAK4O,iBAAiBwD,OAAOxW,SACjCmU,QAAoB/P,KAFV,kBAIV+P,EAJU,cAMV/P,KAAA,kBAAsB,YAClB+P,WAAuB,EAAvBA,gBAA4Ce,EAA5Cf,SAAyDvH,EAAzDuH,eAleZ,SAseIjG,WACI,IAAI9J,KAAK4O,iBAAiBwD,OAAOxW,QACjCmU,SAAqB/P,KAArB+P,mBAxeR,gBA2eIsC,YACI,IAAIrS,KAAK4O,iBAAiBwD,OAAOxW,QACjCmU,sBAAsC/P,KAAtC+P,iBAA4DvH,EAA5DuH,WA7eR,aAifI7F,0BAA4I,IAAxG3E,MAAkBiD,EAAW2B,eAA2E,IAAlEC,OAAgC,QAAkC,IAA3BC,MAAiB,IAC9H,IAAIrK,KAAK4O,iBAAiBwD,OAAOxW,UAE7BoE,KAAK0R,oBAAT,IAEoB1R,KAAKuR,oBAAzB,GACI,iBAAoB,mBAAWlD,IAAX,KAAxB,GACI0B,aAAyB/P,KAAzB+P,8BAxfZ,cA4fIrF,kBACI,QADoH,IAA7EC,MAAoBpC,EAASqC,QACpE,IAAI5K,KAAK4O,iBAAiBwD,OAAOxW,OAAc,OADqE,KAEpH,IAAIkV,EAAM9Q,KAAKuR,oBAFqG,GAIhHxG,EAAUoG,SAASC,aAAvB,mBACArB,cAA0B/P,KAA1B+P,uBAAuEvH,EAAvEuH,SAA4FxH,EAA5FwH,OALoH,IAQpH,IAAiBzF,MACjB,IAAIgI,EAAe,CACf9H,KAAKxK,KADU,iBAEfgK,KAFe,EAGfc,QAHe,EAIfC,QAJe,EAKfJ,SALe,EAMfpF,KAAMiD,EANS,SAOf8B,WAAYA,GAGhB,OADAtK,KAAA,yBACA,GA/gBR,cAkhBI,WACI,gBAAWA,KAAX,WAnhBR,oBAuhBI,YACI,IAAI+Q,EAAJ,KACA,KAAc,CACVvB,GAAS,sBADC,GAGV,IAAIsC,EAAmB9R,KAAKuS,4BAA5B,GACAvS,KAAA,uBAA2B,mBAAca,0BAAd,MAI3BkP,aAAyB/P,KAAzB+P,mBAA0D+B,EAA1D/B,SAA2EvH,EAA3EuH,YARU,IAUVA,WAAuB/P,KAAvB+P,iBAA8C+B,EAA9C/B,SAAgEvH,EAAhEuH,UACAgB,EAAWe,EAAXf,SAEJ,UAtiBR,KAAatB,GAaM+C,WAAa,qBAbnB/C,GAgBMgD,eAAiB,wBAhBvBhD,GAkBMiD,iBAAmB,0BCjCtC,ICRA,GDQMC,GAAY7S,IAAlB,2BAEa8S,GAAb,WAeI,aAAsB,KALdC,cAAwB,EAM5B7S,KAAA,YAAmByP,GAAnB,cACAzP,KAAA,gBACAA,KAAA,iBACAA,KAAA,kBAJkB,GAQlBA,KAAA,qBAA4BA,KAAK8S,qBAAqBrU,KAAtDuB,MACAA,KAAA,2BAAkCA,KAAK+S,2BAA2BtU,KAAlEuB,MACAA,KAAA,4BAAmCA,KAAKgT,4BAA4BvU,KAApEuB,MACAA,KAAA,6BAAoCA,KAAKiT,6BAA6BxU,KAAtEuB,MAEAA,KAAA,gCAAAA,MACAA,KAAA,oCAAAA,MA7BR,cAGI,WAII,OAHM4S,EAAN,YACIA,YAAmC,IAAnCA,GAEGA,EAAP,WAPR,oDAgCIM,cACSlT,KAAL,cAGAyO,iFApCR,0BAwCI0E,YAII,OAAI1B,SAAgBjJ,EAApB,YAEKxI,KAAD,eAAyByR,EAA7B,uBAEIA,EAAJ,uBAOIhD,2BAAkCgD,EAAlChD,sCAX8C,GA5C1D,cA6DI,YACIzO,KAAA,uBA9DR,kBAgEI,YACIA,KAAA,2BAjER,kBAoEI,iBAA6C,IAAtBoT,OAAgB,GACnCpT,KAAA,gBArER,gBAwEI,mBAAsE,IAAhCqT,OAA0B,GAC5D,EACIrT,KAAA,oCAGAA,KAAA,0CA7EZ,gBAiFI,mBAAmE,IAA7BsT,OAAuB,GACzD,EACItT,KAAA,sCAGAA,KAAA,4CAtFZ,kBA0FI,YACI,OAAOA,KAAKuT,YAAYxB,sBAAxB,IA3FR,gBA8FI,YACI,OAAO/R,KAAKuT,YAAY7B,oBAAxB,IA/FR,wBAkGI8B,WACIxT,KAAA,uBAA2B,mBAAca,EAAd,4BAnGnC,uBAsGIiS,cAOI,QAPwD,IAA1BZ,OAAa,GAC3CS,8BACAA,GAFwD,GAIxD3S,KAAA,uBAA2B,mBAAca,yBAAd,OAGvBb,KAAJ,eAEA,GAEQ8Q,kBAAJ,EAA6B,CACzB,IAAM2C,EAAiB3C,WAAaA,kBAApC,GACArC,OAAcgF,EAAdhF,KAAkCgF,EAAlChF,yBAnHhB,6BAwHIsE,YACIJ,qCACAA,GAFkD,GAKlD3S,KAAA,2BAA+B,mBAAca,6BAAd,OA7HvC,8BAgIImS,YACIL,GAAU,yBAAD,EADuC,cAGhD3S,KAAA,2BAA+B,mBAAca,8BAAd,MAG3Bb,KAAJ,cACAyO,qDAvIR,+BA0IIwE,YACIN,GAAU,yBAAD,EADwC,eAGjD3S,KAAA,2BAA+B,mBAAca,+BAAd,MAG3Bb,KAAJ,cACAyO,uDAjJR,4BAqJIiF,YACIf,GAAU,mCAAVA,GACA3S,KAAA,2BAA+B,mBAAca,4BAAd,OAvJvC,8BA0JI8S,YACIhB,GAAU,qCAAVA,GACA3S,KAAA,2BAA+B,mBAAca,8BAAd,OA5JvC,oBA+JI,YACI,OAAO4O,mCAAP,IAhKR,oBAoKImE,YACI5T,KAAA,uBAA2B,mBAAca,oBAAd,OArKnC,gCAwKIgT,YAEQ7T,KAAJ,cACA,IAAIiR,UAEJxC,wDAA+DwC,EAA/DxC,gDA7KR,KEQMqF,GAAgBhU,IAAtB,yBAsBaiU,GAAb,WAKI,aAAqB,KAJX5M,cAA4B,GAKlCnH,KAAA,SAAgB,IAAI,EAApB,WACAA,KAAA,aACAA,KAAA,oBAGAA,KAAA,mBAA0BA,KAAKoH,mBAAmB3I,KAAlDuB,MACAA,KAAA,sBAA6BA,KAAKqH,sBAAsB5I,KAAxDuB,MACAA,KAAA,sBAA6BA,KAAKsH,sBAAsB7I,KAAxDuB,MACAA,KAAA,oBAA2BA,KAAKuH,oBAAoB9I,KAApDuB,MAdR,mDAiBIwH,WACI,IAAIC,EAAJ,GAIA,OAHAzH,KAAA,uBAA2B,YACvByH,OAAaC,EAAbD,cAEJ,GAtBR,kBAyBIE,YACI,IAAIlL,GAAJ,EACI8D,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACI9D,EAASuD,KAAK4H,iBAAdnL,IAEJ,GA/BR,kBAkCIoL,YACI,IAAItH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBArCZ,mBAyCI8H,YACI,IAAIvH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBA5CZ,aAgDI,YACIA,KAAA,gBACA,IAAI+H,EAAJ,GACA/H,KAAA,uBAA2B,YACvB+H,cAEJ/H,KAAA,oBAtDR,+BAyDI,YACI,IAAI0H,EAAmB,CACnBM,UADmB,EAEnBgM,OAFmB,WAGnBC,KAAM,CACFC,QADE,GAEF3V,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFvR,KAAM,IAEVzH,KAAM,CACF8Y,QADE,GAEF3V,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFvR,KAAM,IAEVsF,UAAU,GAEV5H,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACImH,EAAS1H,KAAKmH,cAAdO,IAEJ,GAjFR,wBAoFI,gBACIoM,GAAc,sCAAD,oBAAbA,oBACI1L,QAAiBA,GAArB,KACI0L,OAvFZ,wBA2FI,gBACIA,GAAc,sCAAD,oBAAbA,oBACI1L,QAAiBA,GAArB,KACI0L,OA9FZ,sBAkGI,gBAEI,GADAA,GAAc,oCAAD,oBAAbA,iBACI1L,QAAiBA,GAArB,IAAoC,CAChC0L,MACA,IACIO,EADkBrU,KAAKqI,6BAA3B,GACoBX,KAApB,QACA1H,KAAA,mBACAA,KAAA,iDAAyE5E,OAAzE,GAAmGwE,EAAnG,qBAzGZ,qBA6GI,gBACIkU,GAAc,mCAAD,oBAAbA,iBACI1L,QAAiBA,GAArB,MACI0L,MACA9T,KAAA,mDAA+EJ,EAA/E,kBAjHZ,6BAqHI+C,cArHJ,YAwHIlB,YAEI,GADAqS,GAAc,eAAdA,GACI9T,KAAK2H,gBAAT,GACImM,GAAc,eAAD,EAAbA,0CACG,CACH,IAAIpM,EAAmB1H,KAAKqI,6BAA5B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAI/D,EAAQ+D,OAAZ,QACM1B,EAA2B,CAC7BnC,IAAK6D,EADwB,OAE7BnC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAAC7B,SACTK,SAAUhE,KAJmB,oBAK7B0F,oBAAqBjI,GAEzBqW,GAAc,eAAD,oBAAbA,KACAjP,2BAGAiP,GAAc,8BAAdA,GAIR,MADwB,CAACrW,KAAD,EAAaS,MAAO,KA9IpD,sBAkJIuE,cAlJJ,8BAqJIG,cArJJ,aAwJIhB,gBAxJJ,kBA2JIkB,gBACI,QAD6E,IAApCf,OAAuB,IAChE,GACA+R,GAAc,kBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKqI,6BAA5B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAI9B,EAAJ,GACAA,EAAS8B,OAAT9B,WAEA,IAAMI,EAA2B,CAC7BnC,IAAK6D,EADwB,OAE7BnC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACT5B,SAAUhE,KAJmB,mBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAiP,GAAc,8BAAdA,KA9KZ,uBAmLI/Q,kBACI,OACA+Q,GAAc,oBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKqI,6BAA5B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAI9B,EAAJ,GACAA,EAAS8B,OAAT9B,YAEA,IAAMI,EAA2B,CAC7BnC,IAAK6D,EADwB,OAE7BnC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACT5B,SAAUhE,KAJmB,sBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAiP,GAAc,8BAAdA,KAtMZ,qBA0MI7Q,kBACI,OACA6Q,GAAc,oBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKqI,6BAA5B,GACA,GAAIX,EAAJ,SAAqB,CACjB,IAAI9B,EAAJ,GACAA,EAAS8B,OAAT9B,YAEA,IAAMI,EAA2B,CAC7BnC,IAAK6D,EADwB,OAE7BnC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACT5B,SAAUhE,KAJmB,sBAK7B0F,oBAAqBjI,GAEzBoH,2BAGAiP,GAAc,8BAAdA,KA7NZ,2BAiOI7S,cACIjB,KAAA,wCAlOR,oBAqOI8B,gBACI9B,KAAA,wBAtOR,aAyOIE,WACIF,KAAA,uBA1OR,kBA6OIgC,gBACI,MAAMxC,MAAN,oBA9OR,iBAiPI+B,YACIvB,KAAA,cAlPR,wCAqPIG,kBACIH,KAAA,yDAtPR,gBAyPIkC,gBACI,UA1PR,sBA6PIC,kBAEI,OADAnC,KAAA,+BACA,GA/PR,iBAkQI0B,kBAlQJ,iBAoQIzB,WACID,KAAA,2BArQR,oBAwQIqC,kBAEI,OADArC,KAAA,6BACA,GA1QR,M,SDxCYsU,O,2BAAAA,I,uBAAAA,I,yBAAAA,I,wCAAAA,Q,mBE4EZ,GAFoB,I,WAzElB,c,2BAGAC,6BACE,IAAM7T,EAA2BkM,wBAAjC,GACA,OAAIlM,GACFA,iBAAuB,CACrB8T,MADqB,QAErBC,SAAU,Y,EAKhBC,8BACE,IACEhU,YAAoBA,eAAuBA,EAAvBA,aAApBA,M,EAIJiU,iCACE,IACEjU,iBAAuB,CACrB+T,SAAU,WAEZ/T,YAAoBA,eAAuBA,EAAvBA,aAApBA,M,EAIJkU,2BACElU,iBAAuB,CACrB8T,MADqB,QAErBC,SAAU,Y,EAIdI,qBACEnU,iBAAuB,CACrB8T,MAAO,W,EAIXM,8BACE,GAAIpU,GAAWA,EAAf,WACE,KAAOA,EAAP,YAA2B,CACzB,IAAMqU,EAA2BrU,EAAjC,UACA,GAAeA,mB,EAKrBsU,sCAAsF,IAA9BC,OAAmB,GACzDC,QAAhB,KACAC,SAAgB,YACRC,gBAAJ,IACE,EACE1U,mBAEAA,2B,EAMV2U,4BACG,GACEC,WAAmB,YAChB5U,eAAqB6U,EAArB7U,GAAkC6U,EAAlC7U,Q,MC5DJ8U,GAAY1V,IAAlB,oBAEa2V,GAAb,WAuBI,aAAsB,KAbdC,gBAA2B,KAab,KAXdC,OAA6B,KAWf,KAVdC,iBAA2C,KAU7B,KATdC,eAAwC,KAS1B,KARdC,QAA8B,KAQhB,KAPdC,aAAsC,KAOxB,KANdC,aAAmC,KAMrB,KAJdC,MAA0B,KAK9BjW,KAAA,WAAkBkW,GAAlB,cAxBR,cAGI,WAII,OAHMT,EAAN,YACIA,YAA2B,IAA3BA,GAEGA,EAAP,WAPR,4CA2BI,YACIzV,KAAA,kBACAA,KAAA,eAEAkW,4DAA8ElW,KAAK0V,gBAAgBrU,MAAM+M,WAAzG8H,WAJyC,MAQzClW,KAAA,OAAc4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IARtC,UAUzCrW,KAAA,iBAAwB4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAVhD,WAYzCrW,KAAA,eAAsB4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAZ9C,gBAczCrW,KAAA,QAAe4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAdvC,OAgBzCrW,KAAA,aAAoB4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAhB5C,KAkBzCrW,KAAA,aAAoB4M,wBAAwB5M,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAlB5C,YAqBzCrW,KAAA,qBAA4BA,KAAKsW,qBAAqB7X,KAAtDuB,MACAA,KAAA,iBAAwBA,KAAKuW,iBAAiB9X,KAA9CuB,MACAA,KAAA,eAAsBA,KAAKwW,eAAe/X,KAvBD,MA0BrCuB,KAAJ,gBAAyBA,KAAK6V,eAAeY,iBAAiB,QAAQzW,KAA7C,sBACrBA,KAAJ,cAAuBA,KAAK+V,aAAaU,iBAAiB,QAAQzW,KAA3C,kBACnBA,KAAJ,SACIA,KAAA,oCAAwC,YAAY0W,sBACpD1W,KAAA,+BAAoCA,KAApC,kBAzDZ,mBA6DIuW,YAGI,GAFAf,GAD+B,gBAG3BxV,KAAKsO,WAAWqI,uBAAyB3W,KAAKsO,WAAlD,eAA6E,CAGzE,IAAKsI,QAAL,kDAHyE,OAMzE5W,KAAA,WANyE,gBASzEA,KAAA,mBAEC,CAGD,IAAK4W,QAAL,kDAHC,OAMD5W,KAAA,WANC,QAUDA,KAAA,iBArFZ,uBAyFIsW,YACId,wBACIxV,KAAKsO,WAAT,eACItO,KAAA,wBAGAA,KAAA,yBA/FZ,iBAmGIwW,YAEI,GADAhB,wCACIxV,KAAKsO,WAAWqI,uBAAyB3W,KAAKsO,WAAlD,eAA6E,CAEzE,IAAMuI,EAAoBH,uBAA2B1W,KAAK0V,gBAAgBrU,MAAM8U,GAAGW,UAAnF,oBACMC,EAAgBrT,WAAtB,GACA8R,MAEIuB,EAAc/W,KAAK0V,gBAAgBrU,MAAM8U,GAAGW,UAA5CC,eAAuE/W,KAAK0V,gBAAgBrU,MAAM8U,GAAGW,UAAzG,iBAEI9W,KAAA,sBAA2B+W,EAA3B,YA7GhB,eAmHI,WACI/W,KAAA,MADkB,KAIdA,KAAJ,mBAA2BA,KAAK4V,iBAAiBoB,UAAY,IACzDhX,KAAJ,iBACIA,KAAA,yBAAgC,SAAWA,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAApF,UACArW,KAAA,+CACAiX,oBAA6BjX,KAA7BiX,iCACAA,oBAA6BjX,KAA7BiX,kCAEAjX,KAAJ,UAAkBA,KAAK8V,QAAQkB,UAAYhX,KAAKkX,mBAA9B,IACdlX,KAAJ,eAAuBA,KAAK+V,aAAaoB,UAAYnX,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAAvE,WACnBrW,KAAJ,cAAuBiX,qBAA8BjX,KAA9BiX,eAhI/B,qBAmII,YACI,IAAIxa,EAAJ,GACA,OAAI2a,EACA3a,eAGA,GAAI2a,GAAJ,GAAiB,CACb,IAAIC,EAAQ3S,WAAW0S,EAAvB,MACIE,EAAU5S,WAAW0S,EAAzB,IACIG,EAAUH,OAASC,EAAvB,GAAsCC,EAClCD,EAAJ,IACI5a,GAAa4a,EAAb5a,KAIIA,GAFJ6a,EAAJ,EACQA,EAAJ,GACc,IAAJ,EAAN7a,IAGa6a,EAAb7a,IAIJA,MAIIA,GAFJ8a,EAAJ,EACQA,EAAJ,GACc,IAAV9a,EAGU,GAAVA,EAIJA,UAIJA,QAGQA,GAFJ2a,EAAJ,EACQA,EAAJ,GACc,IAAV3a,EAGU,GAAVA,EAIJA,KAIZ,UAtLR,cA0LI,mBAA0D,IAA1B+a,OAAmB,GAE/ChC,GAAU,kBAAD,MAATA,GACIxV,KAAJ,iBACI,GACIA,KAAA,yBAAgC,WAAaA,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAAtF,UACAY,oBAA6BjX,KAA7BiX,iCACAA,oBAA6BjX,KAA7BiX,mCAGAjX,KAAA,yBAAgC,WAAaA,KAAK0V,gBAAgBrU,MAAM8U,GAAGC,WAAWC,IAAtF,eACAY,oBAA6BjX,KAA7BiX,iCACAA,oBAA6BjX,KAA7BiX,kCAEJjX,KAAA,4CAEAA,KAAJ,UAAkBA,KAAK8V,QAAQkB,UAAYhX,KAAKkX,mBAA9B,KA1M1B,eA6MI3L,gBACI,IAAI6K,EAAJ,EASA,GARAZ,2BACAA,MACIxV,KAAJ,gBAAyBA,KAAK6V,eAAe4B,gBAJoB,YAO7DzX,KAAJ,mBAA2BA,KAAK4V,iBAAiBoB,UAAY,GAAGZ,EAPC,eAU7DpW,KAAJ,MAAgB,CAEZ,IAAI0X,EAFQ,GAIZtB,gBAAwB,cACpBuB,WAAY,cACRD,OAAe,CAACE,EAAUC,EAA1BH,UAGRlC,qBACAA,GAVY,GAYZxV,KAAA,sBAAmCkW,GAAnC,kBAMIlW,KAAJ,eACIoW,0BAAqCA,EAArCA,KACApW,KAAA,MAAa,IAAI,GAAJ,EACTA,KADS,aAEToW,EAJe,oBAMnBpW,KAAA,4BAAiCA,KAAKsO,WAAtC,mBAMJtO,KAAJ,UAAkBA,KAAK8V,QAAQkB,UAAYhX,KAAKkX,mBAAmBd,EAAjD,SArP1B,eA0PI,WACI,OAAIpW,KAAJ,MACWA,KAAKiW,MAAZ,UAGA,IA/PZ,wBAmQIzK,kBAnQJ,0BAoQIH,kBApQJ,0BAqQIC,oBArQJ,KCNawM,GAAb,WAUI,cAVJ,cAGI,WAII,OAHMA,EAAN,YACIA,YAA4B,IAA5BA,GAEGA,EAAP,WAPR,wDAYI,YACI,MAAO,CAGHC,YAHG,EAIHC,YAJG,EAKHC,WALG,gCAMHC,oBANG,EAOHC,iBAPG,EAQHC,cARG,SASHC,cAAe,CACX,CACIC,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,GAEjB,CACIH,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIjT,KAJJ,MAKIkT,cAAa,MAtEjC,mCA6EI,YACI,MAAO,CACH,CAAC,MAAD,8BADG,OAEH,CAAC,IAAD,oBAFG,KAGH,CAAC,IAAD,oBAHG,KAIH,CAAC,IAAD,oBAJG,KAKH,CAAC,IAAD,oBALG,KAMH,CAAC,IAAD,oBANG,KAOH,CAAC,IAAD,oBAPG,KAQH,CAAC,IAAD,oBARG,KASH,CAAC,IAAD,oBATG,KAUH,CAAC,IAAD,oBAVG,KAWH,CAAC,IAAD,oBAXG,KAYH,CAAC,IAAD,oBAZJ,OA9ER,wBA+FI,YACI,OAAOzY,KAAK0Y,6BAAZ,IAhGR,4BAmGI,YACI,OAAO1Y,KAAK2Y,iCAAZ,IApGR,qBAuGI,YACI,IAAIC,EAAW,CACXvZ,GAAI+W,EADO,KAEXyC,SAAUnV,eAFC,GAGXoV,UAAW1H,aAHA,kBAIX2H,QAJW,GAKXC,OAAQ,IAKNC,EAAwB7C,OAXoB,GAa5C4C,EAAgB5C,OAAgBA,cAbY,GAmBlD,OAHAwC,UAhBkD,EAkBlDA,WACA,GA1HR,cA6HI,cACI,OAAO5Y,KAAKkZ,mBAAZ,IA9HR,KCaMC,GAAYrZ,IAAlB,0BAEaoW,GAAb,WAuBI,aAAsB,KAXdR,gBAA8B,KAWhB,KAVd0D,iBAAgC,KAUlB,KATdC,2BAAuC,KASzB,KARdC,kBAAqC,KAQvB,KAPd5J,gBAAyB,GAOX,KANd6J,eAAwB,EAMV,KAJdC,yBAAoC,GAItB,KAHdC,eAAwB,EAI5BzZ,KAAA,aAAoB,IAAI+O,IAAxB,GACAgB,kBAFkB,MAKlB/P,KAAA,aAAoBA,KAAKgQ,aAAavR,KAAtCuB,MACAA,KAAA,cAAqBA,KAAKiQ,cAAcxR,KAAxCuB,MACAA,KAAA,kBAAyBA,KAAKkQ,kBAAkBzR,KAAhDuB,MACAA,KAAA,eAAsBA,KAAKmQ,eAAe1R,KAA1CuB,MACAA,KAAA,sBAA6BA,KAAKoQ,sBAAsB3R,KAAxDuB,MACAA,KAAA,qBAA4BA,KAAKqQ,qBAAqB5R,KAAtDuB,MACAA,KAAA,kBAAyBA,KAAKsQ,kBAAkB7R,KAAhDuB,MACAA,KAAA,iBAAwBA,KAAKuQ,iBAAiB9R,KAA9CuB,MACAA,KAAA,iBAAwBA,KAAK0Z,iBAAiBjb,KAA9CuB,MACAA,KAAA,cAAqBA,KAAK2Z,cAAclb,KAAxCuB,MACAA,KAAA,WAAkBA,KAAK4Z,WAAWnb,KAfhB,MAmBlBuB,KAAA,QA1CR,cAKI,WAII,OAHMkW,EAAN,YACIA,YAAiC,IAAjCA,GAEGA,EAAP,WATR,iCA8CI,WACIlW,KAAA,sBACAA,KAAA,uBACAA,KAAA,gCACAA,KAAA,iBACAA,KAAA,4BACAA,KAAA,iCApDR,eAuDI,WACI,IAAIvD,GAAJ,EAIA,OAHIuD,KAAJ,oBACIvD,EAASuD,KAAKsZ,kBAAd7c,YAEJ,GA5DR,kBA+DI,WACI,OAAOuD,KAAP,cAhER,eAoEIgQ,cApEJ,gBAqEIC,cArEJ,iBAuEI,YACIkJ,GAAU,wBAAVA,GACAnZ,KAAA,mBAzER,iBA2EI,WACI,OAAOA,KAAP,iBA5ER,aA+EI,YACIA,KAAA,mBAhFR,aAmFI,WACI,OAAQA,KAAK4O,iBAAiBwD,OAAOxW,OAArC,GApFR,oBAuFIsU,YACI,GAAKlQ,KAAL,cACIyR,SAAgBjJ,EAApB,YAEA,IAAIiH,qCAA8CgC,EAAlD,MAMA,OAAIzR,KAAJ,oBACImZ,GADwB,wDAGpBnZ,KAAKsZ,kBAAkBtP,OAASyH,EAApC,OAEI0H,gEACApJ,oBAAgC0B,EAAhC1B,KAA4C/P,KAA5C+P,iBAAkEvH,EAHrB,mBAQjDiJ,EAAJ,uBAESmF,QAAQ,iCAAiCnF,EAAlC,iDAAyFA,EAAzF,QAAZ,iBAMJhD,uDACAsB,WAAuB/P,KAAvB+P,iBAA6C0B,EAA7C1B,KAAyDvH,EAAzDuH,YACA/P,KAAA,iBAAwByR,EAAxB,KACAzR,KAAA,2BAAkCyR,aAAlC,UACAzR,KAAA,kBAAyByR,aAAzB,WAEAnD,yBAAiCmD,aAnCO,WAsCpCzR,KAAJ,iBACIA,KAAA,gCACAA,KAAA,cAGJyV,oCAAgDzV,KA3CR,mBA8CxCA,KAAA,4CAtBQ+P,oBAAgC0B,EAAhC1B,KAA4C/P,KAA5C+P,iBAAkEvH,EAD8D,aAlBpI2Q,qDA5FZ,wBA0II/I,YAA2C,WAClCpQ,KAAL,cAEKA,KAAL,kBAEAiR,WAAiB,YACTnG,SAAiBtC,EAArB,YACQ,qBAA0BsC,EAA9B,MACI,wBAlJpB,uBAyJIuF,YAAyC,WAChCrQ,KAAL,cAEAmS,WAAgB,YACRV,SAAgBjJ,EAApB,YACG,2BA9Jf,iBAmKIwJ,gBACQzM,IAASiD,EAAb,aACA2Q,GAAU,4BAAD,WAATA,GACInZ,KAAJ,kBACQA,KAAKoZ,mBAAT,GACI3K,wEAxKhB,oBA6KI6B,YACQU,SAAexI,EAAnB,aACKxI,KAAL,cACIgR,aAAmBhR,KAAvB,kBAEIA,KAAKoZ,mBAAqBpI,EAA9B,OAEAmI,GAAU,wBAAwBnI,EAPG,UASzBhR,KAAKwZ,yBAAyB/Y,WAAU,mBAAcoJ,IAAamH,EAA3B,YACpD,IACIhR,KAAA,8BAAmCgR,EADxB,UAGXhR,KAAA,oBAAyBgR,EAHd,UAKPhR,KAAJ,mBAA4BA,KAAK6Z,sBAAsB7Z,KAA3B,oBAE5BA,KAAKuZ,eAAiBvZ,KAA1B,oBACImZ,GAAU,wBAAwBnI,EAAzB,SAATmI,cACAnZ,KAAA,oBAAyBA,KAAzB,uBAEJyO,OAAczO,KAAKqZ,2BAAnB5K,aAA2DuC,EAA3DvC,wBAlMR,mBAqMI8B,YACI,GAAIS,SAAexI,EAAnB,YACKxI,KAAL,cACIgR,aAAmBhR,KAAvB,kBAEIA,KAAKoZ,mBAAqBpI,EAA9B,MAEAmI,GAAU,sBAAsBnI,EAAhCmI,UAEA,IAAIvY,EAAQZ,KAAKwZ,yBAAyB/Y,WAAU,mBAAcoJ,IAAamH,EAA3B,YAChDpQ,GAAJ,IACIZ,KAAA,kCADY,GAGZA,KAAA,yBAA8BgR,EAHlB,UAKRhR,KAAJ,mBAA4BA,KAAK6Z,sBAAsB7Z,KAA3B,oBAE5BA,KAAKuZ,eAAiBvZ,KAA1B,oBACImZ,GAAU,sBAAsBnI,EAAvB,SAATmI,cACAnZ,KAAA,oBAAyBA,KAAzB,uBAEJyO,OAAczO,KAAKqZ,2BAAnB5K,aAA2DuC,EAA3DvC,qBA1NR,kBA6NI+B,cA7NJ,gBAgOI,WAEI2I,kCACInZ,KAAKuZ,eAAiBvZ,KAA1B,mBAAkDA,KAAK8Z,0BAA0B9Z,KAA/B,mBAC9CA,KAAJ,eACQA,KAAKoZ,kBAAoBpZ,KAA7B,oBACImZ,4CACAnZ,KAAA,oBAAyBA,KAAzB,mBAFiD,IAMrDA,KAAA,SAGJA,KAAA,QACAA,KAAA,0DA/OR,4BAkPI,YAII,GAHAmZ,GADqD,iBAIjDnZ,KAAJ,2BAAqC,CACjC,IAAM4Y,EAAWd,6BAA0C9X,KAA1C8X,2BAAjB,GACAqB,MACKnZ,KAAKqZ,2BAAV,cACIrZ,KAAA,2CAEJA,KAAA,+CACAsO,8BAAsCtO,KAAtCsO,gCA7PZ,kBAmQI,YACI,IACI6K,GAAU,4BAA4BY,EAAtCZ,MACAnZ,KAAA,6BACIA,KAAJ,eAAuBA,KAAKwZ,yBAA2B,CAACxZ,KAAjC,mBACvBA,KAAA,iBACAA,KAAA,iBAAwB+F,EAAxB,cACA/F,KAAA,kBAAyB,CACrBgK,KAAMhK,KADe,iBAErBga,cAAeD,EAFM,KAGrBE,mBAAoBnC,uCAHC,GAIrBV,MAJqB,EAKrB8C,YALqB,EAMrB9e,KAAM0c,2CANe,GAOrBqC,YAAW,GAEfhB,GAAUnZ,KAfC,mBAkBXA,KAAA,4BAAiCA,KAAK0V,gBAAgBrU,MAAM+M,WAA5D,WAAkFpO,KAAlF,mBAlBW,GAqBPA,KAAJ,cAAuB+P,WAAuB/P,KAAvB+P,iBAA6C/P,KAA7C+P,iBAAmEvH,EAAnEuH,cAzRnC,sBA8RI,WACI,IAAItT,GAAJ,EAKA,OAJIuD,KAAJ,mBACImZ,GAAUnZ,KAAVmZ,kBACA1c,MAEJ,GApSR,aAuSI,YACSuD,KAAL,cAEKA,KAAD,kBAA4BA,KAAhC,6BACImZ,GAAU,iBAAD,EAATA,mBACInZ,KAAJ,cACI+P,aAAyB/P,KAAzB+P,mBAAwD/P,KAAxD+P,iBAA8EvH,EAA9EuH,cAAyG/P,KAAKqZ,2BAA9GtJ,KAA8I,CAACqG,WAAYpW,KAAb,kBAAoC+Z,UAAU/Z,KAAKqZ,6BAGjMe,gEAhThB,iBAqTI,YAGI,GAFAjB,gCACAA,MACKnZ,KAAL,cACI8K,SAAiBtC,EAArB,YACIsC,SAAiB9K,KAArB,kBAEIA,KAAJ,kBACQA,KAAKoZ,mBAAqBtO,EAA9B,KAA4C,CACxC,GAAI2E,qCAA8C3E,EAAlD,MAEI,YADAqO,oDAMJ,GAFAA,GAAU,oCAAoCrO,EAA9CqO,MACAA,MACIrO,EAAJ,WAAwB,CAEpB,IAAIsL,EAAwBtL,EAA5B,WAIA,GAHAqO,GAHoB,GAMhBnZ,KAAJ,kBAA4B,CACxB,IAAIqa,EAAgBra,KAAKsZ,kBAAzB,WACAtZ,KAAA,uBAA8B8K,EAA9B,KACA9K,KAAA,gCAAuCoW,EAAvC,cACApW,KAAA,uBAA8BoW,EAA9B,KACApW,KAAA,wBAAgCoW,QAAmBpW,KAAKsZ,kBAAzB,MAAkDlD,EAAlD,MAAmEpW,KAAKsZ,kBAAvG,MACAtZ,KAAA,6BAAoCoW,EAApC,WACApW,KAAA,qCAA4CoW,EAA5C,mBACApW,KAAA,6BAAoCoW,EARZ,WAWpBA,EAAJ,WACI,IAKIpW,KAAA,gCACAA,KAAA,cAIJ,GAEIA,KAAA,gCASZmZ,0BACAA,GAAUnZ,KAxCU,mBA0ChBA,KAAJ,mBAA4BA,KAAK6Z,sBAAsB7Z,KAA3B,sBACxBoW,EAAJ,aACIgE,MADuB,2CAGvBpa,KAHuB,QAMvBA,KANuB,QASvByV,gCAEAzV,KAAA,6DA3XxB,eAmYI,WACI,OAAOA,KAAP,eApYR,wBAuYI,mBAAqF,IAAhC2B,OAA0B,GAC3E3B,KAAA,oBACAA,KAAA,4BAAiCA,KAAK0V,gBAAgBrU,MAAM+M,WAA5D,WAAkFpO,KAAlF,sBAzYR,4BA4YI,WACI,IAAIoW,EAAJ,KACIsB,EAAYjC,iBAAhB,eAYA,OAXIzV,KAAKsZ,mBAAqBtZ,KAA9B,mBACIoW,EAAa,CACTpM,KAAMhK,KADG,iBAET5E,KAFS,EAGT4e,cAAeha,KAAKqZ,2BAHX,KAITjC,MAAOpX,KAAKsZ,kBAJH,MAKTW,mBAAqBja,KAAD,2BAAkC8X,uCAAoD9X,KAAtF,4BALX,KAMTka,WAAYla,KAAKsZ,kBANR,WAOTa,YAAY,IAGpB,GA1ZR,sBA6ZI,cACI,QAD8E,IAAjCA,OAAqB,GAC9Dna,KAAKoZ,kBAAoBpZ,KAA7B,aAAgD,CAC5C,IAAM+K,EAAUoG,SAASC,aADmB,mBAG5CrB,cACI/P,KADJ+P,iBAEI/P,KAFJ+P,0BAKIvH,EALJuH,WAMIxH,EANJwH,YAjaZ,sBA4aI,cA5aJ,2BAgbI,cAhbJ,aAqbI,WAAoB,WAChBoJ,2BACKnZ,KAAL,oBAEAA,KAAA,gCACAA,KAAA,cAAqBsa,aAAY,WACzB,qBAA0B,oBAA9B,YACI,4BACA7E,6BAAyC,oBAAzCA,OAAuE,oBAAvEA,aAGI,EAAJ,oBACI,kCACAA,6BAAyC,oBAAzCA,OAAuE,oBAAvEA,eARZ,KAYIzV,KAAJ,mBACIA,KAAA,sBAA2BA,KAA3B,mBAEAA,KAAKua,cAAgBva,KAAzB,oBAEImZ,iDACAnZ,KAAA,oBAAyBA,KAAzB,yBA5cZ,gCAgdI,WACImZ,6CACInZ,KAAKyZ,cAAT,IACIe,cAAcxa,KAAdwa,eACIxa,KAAJ,mBAA4ByV,6BAAyCzV,KAAKsZ,kBAA9C7D,WAEhCzV,KAAA,kBAtdR,aAydI,WACImZ,2BACInZ,KAAKyZ,cAAT,IACIe,cAAcxa,KAAdwa,eACAxa,KAAA,iBAEIA,KAAJ,oBACIA,KAAA,gCACAA,KAAA,sBAA2BA,KAA3B,mBACAyV,6BAAyCzV,KAAKsZ,kBAA9C7D,OAAwEzV,KAAKsZ,kBAA7E7D,aAKAzV,KAAKua,cAAgBva,KAAzB,oBACImZ,gDACAnZ,KAAA,oBAAyBA,KAAzB,yBAzehB,mBA8eI,cAEI,GADAmZ,GAAU,+BAAVA,GACIsB,IAAWvE,EAAf,aAGA,SAAIuE,EAAJ,CAEA,IAAIrE,EAA6BpW,KAAjC,4BACAmZ,kCACAA,MACAA,MACA,IACInZ,KAAA,4BACIA,KAAJ,eACImZ,gDACAnZ,KAAA,8BA7fhB,QAkgBI,WACImZ,4BACInZ,KAAKsZ,mBAAqBtZ,KAA9B,mBACQA,KAAJ,cACI+P,YAAwB/P,KAAxB+P,iBAA8C/P,KAA9C+P,iBAAoEvH,EAApEuH,YAEJ/P,KAAA,QACAA,KAAA,2DAzgBZ,KAAakW,GACKwE,YAAqB,MCAvC,IAAMC,GAAU7a,IAAhB,iBACM8a,GAAgB9a,IAAtB,wBAumBA,GAFmB,I,WAxlBf,c,2BAGA+a,mCACI7a,KAAA,kBACAA,KAAA,oBACAA,KAAA,OAAcA,KAAK0V,gBAH4C,MAK/D,IAAIoF,EAAkB5T,EAAtB,cACA4T,aAA2B,CACvB,CACI9S,UAAWhI,KAAK0H,OAAO0G,WAD3B,WAEInG,UAAWjI,KAFf,kBAGIkI,IAAKlI,KAAK0H,OAAOuM,KAHrB,QAII9L,UAAU,GAEd,CACIH,UAAWhI,KAAK0H,OAAO0G,WAD3B,OAEInG,UAAWjI,KAFf,kBAGIkI,IAAKlI,KAAK0H,OAAOuM,KAHrB,SAII9L,UAAU,KAIlB,IAAI4S,EAAU,IAAd,GACAA,aAAmB,CACf,CACI/S,UAAWhI,KAAK0H,OAAO0G,WAD3B,MAEI4F,OAAQhU,KAAKgb,kBAAoBhb,KAAK0H,OAAOuM,KAFjD,QAGIA,KAAM,CACFpR,KADE,GAEFtE,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFF,QAASlU,KAAK0H,OAAOuM,KAAKgH,UAAUC,aAExC9f,KAAM,CACFyH,KADE,GAEFtE,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFF,QAASlU,KAAK0H,OAAOuM,KAAKgH,UAAUE,YAExChT,UAAU,KAOlB,IAAIiT,EAAc1P,EAAlB,cACI2P,EAAW7Y,EAAf,cAEI8Y,EAAY,IAAInQ,EAAyBiQ,EAA7C,GACIG,EAAY,IAAIpQ,EAAyBiQ,EAA7C,GA6BA,OA1BAA,2BACAA,oBAAuC,CAACpb,KAAK0H,OAAO0G,WAAb,cAAuCpO,KAAK0H,OAAO0G,WAAnD,mBAAkFpO,KAAK0H,OAAO0G,WAA9F,WAAqHpO,KAAK0H,OAAO0G,WAAxKgN,YACAA,oBAAuC,CAACpb,KAAK0H,OAAO0G,WAAb,MAA+BpO,KAAK0H,OAAO0G,WAA3C,WAAkEpO,KAAK0H,OAAO0G,WAA9E,OAAiGpO,KAAK0H,OAAO0G,WAA7G,cAAuIpO,KAAK0H,OAAO0G,WAA1LgN,wBAEApb,KAAA,aA1D+D,EA6D/DA,KAAA,aAAoBA,KAAKuL,aAAa9M,KAAtCuB,MACAA,KAAA,sBAA6BA,KAAKwL,sBAAsB/M,KAAxDuB,MACAA,KAAA,wBAA+BA,KAAKqL,wBAAwB5M,KAA5DuB,MACAA,KAAA,wBAA+BA,KAAKsL,wBAAwB7M,KAhEG,MAmE/DuB,KAAA,yBAAgCA,KAAKwb,yBAAyB/c,KAA9DuB,MACAA,KAAA,wBAA+BA,KAAKyb,wBAAwBhd,KAA5DuB,MACAA,KAAA,6BAAoCA,KAAK0b,6BAA6Bjd,KAAtEuB,MACAA,KAAA,sBAA6BA,KAAK2b,sBAAsBld,KAtEO,MAyE/DuB,KAAA,yBAAgCA,KAAK4b,yBAAyBnd,KAA9DuB,MACAA,KAAA,8BAAqCA,KAAK6b,8BAA8Bpd,KAAxEuB,MACAA,KAAA,2BAAkCA,KAAK8b,2BAA2Brd,KA3EH,MA8E/DuB,KAAA,gCAAuC,IAAI+O,IAA3C,GAEA,M,EAMGQ,WAAP,WACIoL,GADsB,2BAGtB,IAAIoB,EAAuB,IAAI,EAAuB/b,KAAtD,QAKA,GAJA+P,cAJsB,GAOtB4K,GAAQ,mCAAmC3a,KAApC,yBAAiEA,KAAxE2a,uBACI3a,KAAKgc,oBAAT,EAAkC,CAE9B,IAAIzI,EAAc9D,GAFY,cAK9BmD,iBACAW,iBAA2BvT,KAA3BuT,uBACA2C,gCAAkDlW,KAPpB,uBAU9BuT,yBAAmCvT,KAAnCuT,iBAEAA,EAZ8B,QAgB9BvT,KAAA,iCAAsCA,KAAK0H,OAAO0G,WAAlD,OAEJ,IAAI6N,EAAwBjc,KAAKkc,gCAAgC3a,eAAevB,KAAK0H,OAAO0G,WAA5F,YACA6N,EAAkBjc,KAAKmc,sBA3BD,GA+BtBnc,KAAA,yBAA8B,CAACoc,WAAYH,IAG3Cjc,KAAA,2C,EAGImc,sBAAR,YACI,IAAIE,EAAJ,GA2BA,OA1BAD,WAAmB,YAEf,IAAIxb,EAAQyb,EAAA,WAAwB,mBAAUC,WAAgBvC,EAA1B,UACpC,GAAInZ,GAAJ,EAAgB,CAEZ,IAAI2b,EAAmBF,EAAvB,GACIE,aAA8BA,cAA+BjI,GAAjE,WAKQyF,aAAuBA,cAAwBzF,GAAnD,WAEI+H,qBASRA,aAIR,G,EAIIG,wCAAR,WACQxc,KAAJ,cAEI6E,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,QAAqD7E,KAAK0H,OAAOuM,KAAKwI,yBAAtE5X,YAA4G,CAAC6X,OAAO1c,KAAKgc,qBAAsBhc,KAA/I6E,sBAA2K7E,KAAK0H,OAAO0G,WAAvLvJ,gB,EAID8X,gBAAP,WACI,OAAO3c,KAAP,c,EAQIgb,gBAAR,WACI,IAAIve,EAD0B,GAO9B,OAJKsC,OAAD,KAAiBA,WAArB,YAEItC,EAASsC,WAATtC,WAEJ,G,EAGG8d,WAAP,WACI,IAAIA,GAAJ,EACA,IAEI,iBACIA,MAEN,MAAOpW,IAET,U,EAGG6X,kBAAP,WACI,IAAIvf,GAAJ,EACA,IAEI,iBAEIA,kBAEN,MAAO0H,IAGT,OADAyW,GAAc,wBAAdA,GACA,G,EAGGgC,oBAAP,WACI,IAAIngB,EAAJ,GACA,IAEI,mBAEIA,oBAEN,MAAO0H,IAGT,OADAyW,GAAc,qBAAdA,GACA,G,EAUGjM,cAAP,YACIgM,O,EAGG/L,eAAP,WACI,OAAO5O,KAAP,qB,EAIJwL,sCAGI,OAFAmP,GAAQ,iBAAD,aAAPA,iBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK3a,KAAK0H,OAAO0G,WAAjB,Y,EAShB/C,wCAGI,OAFAsP,GAAQ,iBAAD,aAAPA,oBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK3a,KAAK0H,OAAO0G,WAAjB,a,EAShB9C,0CAGI,OAFAqP,GAAQ,iBAAD,aAAPA,mBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK3a,KAAK0H,OAAO0G,WAAjB,Y,EAUhB7C,6BAII,OAHAoP,GAAQ,iBAAD,aAAPA,KACAA,GAFyD,GAIzD,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,kCACA,GACI,KAAK3a,KAAK0H,OAAO0G,WAAjB,QAGA,KAAKpO,KAAK0H,OAAO0G,WAAjB,SAGA,KAAKpO,KAAK0H,OAAO0G,WAAjB,U,EAUTyO,sBAAP,YAEIlC,sCACAA,GAH+C,GAM/C,IAAImC,EAA4B9c,KAAK0V,gBAAgBrU,MAArD,WACYyb,EAAA,WAA6B,mBAAW5e,WAAiB6b,EAA5B,WACzC,EACIY,qCAKJZ,YAAsBzF,GAAtByF,WACA+C,UACAnC,gDACAA,MAEA3a,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACoc,WAAYU,IAG3CjY,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,QAAqD7E,KAAK0H,OAAOuM,KAAK8I,kBAAtElY,YAAqG,CAACmY,OAAOjD,EAAUiD,QAAShd,KAAhI6E,yBAA+J7E,KAAK0H,OAAO0G,WAA3KvJ,iB,EAGG2W,yBAAP,gBAEI,GADAb,GAAQ,iDAAD,kBAAPA,GACIvS,QAAiBA,GAArB,IAAoC,CAChCuS,MACA,IAAMsC,EAAmB7hB,OAAU4E,KAAK0H,OAAOuM,KAAK8I,kBAApD,YACApC,MACA,IAAIuC,EAAJ,SACAD,cAA+BA,wBAA/BA,QACAC,aACAD,cAA+BA,wBAA/BA,KACAC,aACAD,cAA+BA,wBAA/BA,KACAC,YACAD,cAA+BA,wBAA/BA,KACAC,aACAD,cAA+BA,wBAbC,KAiBhC,IAAIH,EAA4B9c,KAAK0V,gBAAgBrU,MAArD,WACIT,EAAQkc,EAAA,WAA6B,mBAAW5e,WAAiB+e,EAA5B,UACrCrc,GAAJ,GACI+Z,iCACAmC,gBACAnC,MACAsC,YAA6B3I,GAA7B2I,iBACAjd,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACoc,WAAYU,KAE3CnC,GAAQ,cAAcsC,EAAf,GAAPtC,iC,EAOJwC,yBAAR,YACI,IAAMC,EAA6Bpd,KAAK0V,gBAAgBrU,MAAxD,WACIT,EAAQwc,EAAA,WAAqC,mBAAed,WAAgBvC,EAA/B,UAC7CnZ,GAAJ,IACIwc,cACApd,KAAA,yBAA8B,CAACoc,WAAWgB,KAG9Cpd,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,kB,EAGIiP,8BAAR,YACI,IAAItD,EAAJ,KACAa,GAFgD,kCAIhD,IAAIvb,EAAKqX,sBAA0B1W,KAAK0H,OAAO4G,WAAWgP,OAAOlB,WAAjE,gBAEA,GADAxB,MACA,EAAQ,CAEJvb,EAAK8R,SAFD,GAIJ,IAAMiM,EAA6Bpd,KAAK0V,gBAAgBrU,MAAxD,WACIT,EAAQwc,EAAA,WAAqC,mBAAed,WAAf,KACjD1B,MACIha,GAAJ,IACImZ,EAAYqD,EAAZrD,IAIR,OADAa,MACA,G,EAOGa,wBAAP,gBAEI,GADAd,GAAQ,sCAAD,mCAAPA,GACIvS,QAAiBA,GAArB,IAAoC,CAChCuS,MACA,IAAMtb,EAAKjE,OAAU4E,KAAK0H,OAAOuM,KAAKsJ,kBAAtC,YACA5C,GAHgC,GAMhC,IAAIsB,EAAkBjc,KAAK0V,gBAAgBrU,MAA3C,WACIT,EAAQqb,EAAA,WAA0B,mBAAcK,WAAgBjd,EAA9B,UACtC,GAAIuB,GAAJ,EAAgB,CACZ,IAAI4c,EAAoBvB,EAAxB,GACAtB,GAAQ,uBAAuB6C,EAAxB,4BAAqEne,EAArE,GAAPsb,4BACA6C,YAA8BlJ,GAA9BkJ,UACAA,KAAuBne,EAAvBme,GACAxd,KAAA,yBAA8B,CAACoc,WAAWH,IAC1Cjc,KAAA,kDAAuDA,KAAK0H,OAAO0G,WAAnE,sB,EAKLsN,6BAAP,gBAEI,GADAf,GAAQ,yCAAD,qCAAPA,GACIvS,QAAiBA,GAArB,IAAoC,CAChCuS,MACA,IAAMtb,EAAKjE,OAAU4E,KAAK0H,OAAOuM,KAAKwJ,uBAAtC,YACA9C,Q,EAIDgB,sBAAP,gBAEI,GADAhB,GAAQ,qDAAD,mCAAPA,GACIvS,QAAiBA,GAArB,IAAoC,CAChCuS,MACA,IAAM+C,EAAiBtiB,OAAU4E,KAAK0H,OAAOuM,KAAKwI,yBAFlB,YAK5BR,EAAkBjc,KAAK0V,gBAAgBrU,MAA3C,WACAuZ,GAAc,gCAAgCqB,EAA9CrB,QACA8C,WAAuB,YACnB3D,YAAsBzF,GAAtByF,UACAa,0CACAA,MACA,IAAIha,EAAQqb,EAAA,WAA0B,mBAAcK,WAAgBvC,EAA9B,UACtCa,GAAc,uCAAsCha,GAApDga,IACIha,GAAJ,GACIga,GADY,+BAGZqB,kBAGArB,mCACAqB,cAGRA,EAAkBjc,KAAKmc,sBAAvBF,GACArB,GAAc,8BAA8BqB,EAA5CrB,QACA5a,KAAA,yBAA8B,CAACoc,WAAWH,IAC1Cjc,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,mB,EAIRuP,yCAGY3d,KAAKua,cAAiBR,aAAwBA,cAAwBzF,GAA1E,WAEIzP,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,QAAqD7E,KAAK0H,OAAOuM,KAAK2J,yBAAtE/Y,YACI,CAAC6X,OAAQ1c,KAAT,iBAAgC6d,YAAa9D,EAA7C,GAA0D+D,MAAM1H,IALjE,SAAChb,EAAD,QAOC4E,KAAK0H,OAAO0G,WAHhBvJ,eAMR,IAAIiY,EAA4B9c,KAAK0V,gBAAgBrU,MAArD,WACIT,EAAQkc,EAAA,WAA6B,mBAAW5e,WAAiB6b,EAA5B,UACzC,GAAInZ,GAAJ,EAAgB,CACZ,IAAMmd,EAAejB,EAArB,GACA/C,YAAsBgE,EAAtBhE,UAEAY,iCACAmC,gBACAnC,MACA3a,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACoc,WAAYU,SAE3CnC,GAAQ,cAAcZ,EAAf,GAAPY,gC,EAKRiB,qCACIjB,4CACA,IAAMZ,EAAwB/Z,KAAKqd,8BAAnC,GACA,MACQtD,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMzF,GAAN,UAIA,KAAMA,GAAN,WAEI,MAEJ,KAAMA,GAAN,iBACA,KAAMA,GAAN,SAEItU,KAAA,kDAAuDA,KAAK0H,OAAO0G,WAAnE,cAFuB,UAKhB2L,EAAP,iBACOA,EAAP,GACI/Z,KAAJ,cACI6E,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,QAAqD7E,KAAK0H,OAAOuM,KAAKsJ,kBAAtE1Y,YACI,CAAC6X,OAAQ1c,KAAT,iBAAgC+Z,UAAWA,GAC3C/Z,KAFJ6E,wBAGI7E,KAAK0H,OAAO0G,WAHhBvJ,eAKAkV,YAAsBzF,GAAtByF,UAGAA,YAAsBzF,GAAtByF,mB,EASxB8B,0CAEI,GADAlB,GAAQ,sDAAsDZ,EAA9DY,QACA,GACQZ,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMzF,GAAN,iBACA,KAAMA,GAAN,UAEItU,KAAA,4BACIA,KAAJ,cACI6E,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,QAAqD7E,KAAK0H,OAAOuM,KAAKwJ,uBAAtE5Y,YACI,CAAC6X,OAAQ1c,KAAT,iBAAgC6d,YAAa9D,EAAUiD,QACvDhd,KAFJ6E,6BAGI7E,KAAK0H,OAAO0G,WAHhBvJ,eAMJ,MAEJ,KAAMyP,GAAN,WAIA,KAAMA,GAAN,Y,EAShBwH,uCAEI,GADAnB,GAAQ,2CAA2CZ,EAAnDY,QACA,GACQZ,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMzF,GAAN,WAEI,MAEJ,KAAMA,GAAN,UACA,KAAMA,GAAN,iBACA,KAAMA,GAAN,SAEItU,KAAA,8B,MCzmBlBge,GAAWle,IAAjB,W,8NC6DA,G,oBA9DE,sBAA2H,aACzH,0BADyH,MAGzH,UAAiB,oBAAjB,IACA,YAAiB,oBAAjB,IAJyH,E,4GAO3Hme,4BAEEje,KAAA,UAFiB,MAKjB,IAAMke,EAAcle,KAAK4M,SAASuR,eAAene,KAAKoe,SAAS/H,IAA/D,WACA,UAAI6H,EAAJ,CAEA,IAAMG,EAAgBH,gBAAtB,UACA,GACEG,2BAAwCre,KAAxCqe,a,EAIIC,SAAR,YACE,IAAMJ,EAAcle,KAAK4M,SAASuR,eAAene,KAAKoe,SAAS/H,IAA/D,WACA,UAAI6H,EAEJ,OAAQle,KAAKue,QAAQC,KAArB,UACE,WAIA,YACEN,gBACA,MAEF,aAIA,UACEA,mB,EAMNO,sBACE,GAAW/H,mBACX1W,KAAA,gB,EAGF0e,sBACE,IAAIC,EAAO3e,KAAKue,QAAQC,KAAxB,aACIzf,kBAAJ,MACE4f,SAEE5f,kBAAJ,MACE4f,UAEF3e,KAAA,a,cD7CA,sBACIA,KAAA,kBACAA,KAAA,kBACAA,KAAA,WACAA,KAAA,UACAA,KAAA,OAAc0V,EAAd,MACA1V,KAAA,aAN6H,EAS7HA,KAAA,aAAoBA,KAAKuL,aAAa9M,KATuF,MAY7HuB,KAAA,eAAsBA,KAAK4e,eAAengB,KAA1CuB,MACAA,KAAA,eAAsBA,KAAK6e,eAAepgB,KAA1CuB,MACAA,KAAA,qBAA4BA,KAAK8e,qBAAqBrgB,KAAtDuB,M,2BAsBM4e,eAAV,YACIZ,GAAS,6BAATA,IACA,IAAM5iB,EAAOsI,eAAe1D,KAAK+e,YAAjC,IACAf,GAAS5iB,EAH8B,IAKvCsb,uBAA2B1W,KAAK0V,gBAAgBrU,MAAM8U,GAAGW,UAAzDJ,uB,EAGMsI,oBAAV,gBAA2F,oBAApCC,MAAiB,MACpEjB,sCACAA,MACA,IAAMkB,EAAYlf,KAAKoe,SAAvB,IAEMe,EAAkBnf,KAAKof,kBAAkB3hB,EAA/C,GACM4hB,EAAkBrf,KAAKsf,wBAAwB7hB,EAArD,GACA,IACIwhB,EAAaC,EAAbD,uBAIJ,IAAIM,EAAsBvf,KAAK4M,SAAS4S,cAAcN,EAAtD,oBACAjI,sBAAsCiI,EAAtCjI,gBACAA,mBAAmCiI,EAdoD,0BAgBvF,IAAIO,EAAJ,EACA,GAAIP,EAAJ,wBAAuC,CACnC,IAAIQ,EAAwB1f,KAAK4M,SAAS4S,cAA1C,OAeA,GAdAvI,sBAAwCiI,EAAxCjI,yBACAyI,eAAuBR,EAAvBQ,mBACAA,eAAuBR,EAAvBQ,yBACAA,eAAuBR,EAAvBQ,sBAGAD,EAASzf,KAAK4M,SAAS4S,cAAcN,EAArCO,8BACAxI,sBAAqCiI,EAArCjI,0BACAwI,eAAoBP,EAApBO,mBACAA,eAAoBP,EAApBO,yBACAA,eAAoBP,EAApBO,sBAEAC,iBAEIR,EAAJ,mBAAkC,CAC9B,IAAIS,EAAQ3f,KAAK4M,SAAS4S,cAAcN,EAAxC,gBACAjI,sBAAmCiI,EAAnCjI,YACA0I,qBAAyB3f,KAAK4f,mBAAmBniB,EAAjDkiB,IACAJ,iBAGJ,GAAIL,EAAJ,SAAwB,CACpB,IAAMW,EAAa7f,KAAK8f,cAAcriB,EAAtC,GACA,GAAIoiB,EAAJ,EAAoB,CAChB,IAAIE,EAAuB/f,KAAK4M,SAAS4S,cAAcN,EAAvD,kBACAjI,sBAAsCiI,EAAtCjI,cACA8I,eAAqBb,EAArBa,mBACAA,eAAqBb,EAArBa,yBACAA,eAAqBb,EAArBa,sBACAL,iBACAK,wDACA9I,mBAAmCiI,EAAnCjI,yBAIR,GAAIiI,EAAJ,aAA4B,CACxB,IAAIc,EAA6BhgB,KAAK4M,SAAS4S,cAA/C,UAQA,GAPAQ,gCACA/I,sBAA4CiI,EAA5CjI,qBACIiI,EAAJ,kBACQA,mCAAJ,IACIA,YAAsBA,EAAtBA,kBAGJA,EAAJ,wBAAuC,CACnC,IAAIe,EAASrT,uBAAb,KACAqK,sBAAoCiI,EAApCjI,yBACAgJ,eAAoBf,EAApBe,mBACAA,eAAoBf,EAApBe,yBACAA,eAAoBf,EAApBe,sBACAD,iBAEJA,eAA4Bd,EAA5Bc,mBACAA,eAA4Bd,EAA5Bc,yBACAA,eAA4Bd,EAA5Bc,sBACAA,4BAAwC,YACpCtJ,mBACAA,oBACA,6BAEJgJ,iBAEJH,iBAKJA,eAAqBL,EAArBK,mBACAA,eAAqBL,EAArBK,yBACAA,eAAqBL,EAArBK,sBACA,IAAMW,EAAclgB,KAAKmgB,4BAA4B1iB,EAzFkC,GA2FjF2iB,EAAWpgB,KAAKqgB,wBAAwB5iB,EAA9C,GACM6iB,EAAiBtgB,KAAKugB,iCAAiC9iB,EAA7D,GACA,UACI,aASI,OARAugB,iCACA/G,sBAAsCiI,EAAtCjI,qBACA,KAAIiI,aACAO,YAAmBS,OAAqBhB,EAAxCO,WAEAA,cAGJ,GACI,cACIxI,sBAAsCiI,EAAtCjI,wBACAA,sBAAsCiI,EAAtCjI,yBACA,KAAIiI,gBACAO,aAAoB,KAAOP,EAA3BO,aAEJ,MAEJ,aACI,MAEJ,aACI,KAAIP,eACAO,aAAoB,KAAOP,EAA3BO,YAMZ,MAEJ,aAQI,OAPAzB,GAAS,6BAATA,IACA/G,sBAAsCiI,EAAtCjI,qBACA,KAAIiI,aACAO,YAAmBS,OAAqBhB,EAAxCO,WAEAA,cAEJ,GACI,cACIxI,sBAAsCiI,EAAtCjI,wBACAA,sBAAsCiI,EAAtCjI,yBACA,KAAIiI,gBACAO,aAAoB,KAAOP,EAA3BO,aAQZ,MAEJ,eAQI,OAPAzB,GAAS,+BAATA,IACA/G,sBAAsCiI,EAAtCjI,uBACA,KAAIiI,eACAO,YAAmBS,OAAqBhB,EAAxCO,aAEAA,cAEJ,GACI,cACI,KAAIP,gBACAjI,sBAAsCiI,EAAtCjI,0BACAA,sBAAsCiI,EAAtCjI,yBACAwI,aAAoB,KAAOP,EAA3BO,aAEJ,MAEJ,aACI,MAEJ,aACI,KAAIP,eACAO,aAAoB,KAAOP,EAA3BO,aAQpB,U,EAIMe,sBAAV,cAAmE,WAC/DxC,GAAS,mCAATA,IACAA,MACA,IAAMkB,EAAYlf,KAAKoe,SAHwC,IAKzDqC,EAAS7T,wBAAwBsS,EAAvC,WACA,GAAYjI,qBANmD,GAS/DyJ,OAAa,cACT,IAAMnB,EAAU,wBADuB,GAGnCL,EAAJ,cACIK,mCACAA,+BAAsC,EAAtCA,iBAGAL,EAAJ,aACIK,2BAAkC,EAAlCA,gBAEJvB,GAAS,+BAA+BjX,EAAxCiX,IACA,GAAYyC,qB,EAIblV,aAAP,gBACIvL,KAAA,iB,EAGJwL,sCACIxL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,EAGJ8J,wCACIrL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,EAGJ+J,0CACItL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,gOE9QR,IAAMof,GAAU7gB,IAAhB,uBACM8gB,GAAgB9gB,IAAtB,8BA6XA,G,oBA/WI,kBAA0F,aACtF,kBAAqC4V,WAArC,kBAAiFA,gBAAjF,4BAEA,OAAcA,EAAd,MACA,gBAJsF,GAOtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,oBAAyB,4BAAzB,IACA,6BAAkC,qCAAlC,IACA,8BAAmC,sCAAnC,IACA,+BAAoC,uCAApC,IACA,8BAAmC,sCAAnC,IACA,4BAAiC,oCAAjC,IACA,6BAAkC,qCAAlC,IAEA,0BAA+B,kCAA/B,IACA,wBAA6B,gCAlByD,IAqBtF5J,2BAAsC,oBAAtCA,aACA,cAAmB,IAAIiD,IAAvB,GACA,uCAA0C,oBAA1C,0BACA6D,wCAEA+N,GAAQ,6BAAgC,oBAAxCA,qBA1BsF,E,4GA8B1FE,oCACIF,GADiC,4BAGjC,IAAM9J,EAAoBH,uBAA2B1W,KAAK0H,OAAOyO,GAAGW,UAApE,oBACMC,EAAgBrT,WAAtB,GAGA,GAFAid,MAEI5J,EAAc/W,KAAK0H,OAAOyO,GAAGW,UAA7BC,eAAwD/W,KAAK0H,OAAOyO,GAAGW,UAA3E,gBACK,OAAQC,EAAc/W,KAAK0H,OAAOyO,GAAGW,UAArC,cACG,KAAK9W,KAAK0H,OAAOyO,GAAGW,UAApB,sBAGI,GAAIrH,uCAAgDsH,EAApD,UAEI,YADA4J,GAAW5J,EAAJ,SAAP4J,wCAKJlR,wCAAiDsH,EAAjDtH,Y,EAOhBqR,kCACIH,GAD+B,+BAG/B,IAAM9J,EAAoBH,uBAA2B1W,KAAK0H,OAAOyO,GAAGW,UAApE,oBACMC,EAAgBrT,WAAtB,GAGA,GAFAid,MAEI5J,EAAc/W,KAAK0H,OAAOyO,GAAGW,UAA7BC,eAAwD/W,KAAK0H,OAAOyO,GAAGW,UAA3E,gBACI,OAAQC,EAAc/W,KAAK0H,OAAOyO,GAAGW,UAArC,cACI,KAAK9W,KAAK0H,OAAOyO,GAAGW,UAApB,sBAGI,GAAIrH,qCAA8CsH,EAAlD,UAEI,YADA4J,GAAW5J,EAAJ,SAAP4J,sCAKJlR,sCAA+CsH,EAA/CtH,Y,EAQhBsD,uCACI4N,oDACAA,MACA3gB,KAAA,gBACAA,KAAA,gB,EAGJgT,wCACI2N,GAAQ,yBAAD,EAAPA,cACA3gB,KAAA,gB,EAGJiT,yCACI0N,GAAQ,yBAAD,EAAPA,cACA3gB,KAAA,gB,EAGJ2T,wCACIgN,GAAQ,qCAARA,GACA3gB,KAAA,gB,EAGJ0T,sCACIiN,GAAQ,mCAARA,GACA3gB,KAAA,gB,EAGI+gB,qBAAR,WAA+B,WACrBC,EAAsBvR,iBAA5B,uBACIzP,KAAJ,aAAsBiX,qBAA8BjX,KAA9BiX,aAEtB+J,WAAkB,YAEd,IAAI3S,EAAW,+BAAkC,oBAAlC,MAAgE,CAACxE,YAAhF,GACA,KAAU,CACN,IAAIoX,EAAe,sBAAyB,oBAAzB,QAA2D,eAA9E,0BACAA,2BAAuC,EAAvCA,gBACAA,mCACAA,+BAA2C,EAA3CA,gBAGA,kC,EAKJC,mBAAR,WAA6B,WACnBF,EAAsBvR,iBAA5B,qBACIzP,KAAJ,iBAA0BiX,qBAA8BjX,KAA9BiX,iBAE1B+J,WAAkB,YAEd,IAAI3S,EAAW,+BAAkC,oBAAlC,MAAgE,CAACxE,YAAhF,GACA,KAAU,CACN,IAAIoX,EAAe,sBAAyB,oBAAzB,QAA2D,eAA9E,8BACAA,oCACAA,gCAA2C,YAAYvK,sBACvD,sC,EAMZuH,4BACI,kCADe,MAGM/Q,EAAE,IAAIlN,KAAKoe,SAAS/H,IAAI8K,MAA7C,mBACAC,wBAAsCphB,KAJvB,mBAQfA,KAAA,iBAAwB4M,wBAAwB5M,KAAKoe,SAAS/H,IAA9D,wBACArW,KAAA,8CAAmD,YAAY2gB,mBAAyBjK,sBACxF1W,KAAA,yCAA+CA,KAVhC,yBAafA,KAAA,YAAmB4M,wBAAwB5M,KAAKoe,SAAS/H,IAb1C,kBAiBfrW,KAAA,qBAA4B4M,wBAAwB5M,KAAKoe,SAAS/H,IAAlE,sBACArW,KAAA,kDAAuD,YAAY2gB,mBAAyBjK,sBAC5F1W,KAAA,6CAAmDA,KAnBpC,uBAsBfA,KAAA,gBAAuB4M,wBAAwB5M,KAAKoe,SAAS/H,IAA7D,gBAEArW,KAAA,uBACAA,KAAA,sB,EAKJof,gCACI,OAAOrY,EAAP,I,EAGJuY,sCACI,OAAOvY,EAAP,I,EAGJoZ,0CACI,OAAOpZ,EAAP,U,EAGJsZ,sCACI,IAAI5jB,EAAJ,SAOA,OANAmkB,kCACAA,GAH6C,GAKxCnR,gCAAyC1I,EAA9C,YACItK,cAEJ,G,EAGJ8jB,+CACI,IAAI9jB,EAAJ,SAWA,OAVAmkB,GAAc,yCAAyC7Z,EAFD,UAIlD6L,iCAAqD7L,EAAzD,YACI6Z,mBACAnkB,YAEAmW,+BAAmD7L,EAAvD,YACI6Z,iBACAnkB,aAEJ,G,EAGJoiB,2BACInI,mBACAA,oBACA2K,YAAY3K,EAHkB,QAK9B,IAAMgG,EAAShG,sBAA0B1W,KAAKoe,SAAS/H,IALzB,iBAOxB4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IAA3D,oBAEA,GAAI4I,IAAejf,KAAKoe,SAAS/H,IAAjC,8BAKAuK,GAAc,QAAQlK,EAAT,sCAAbkK,GAEA,IAAIvS,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI8R,SAASuL,IAA9F,GACAiE,MACA,IAAM5P,EAAW6B,mCAAuDvE,EAAxE,UACArO,KAAA,yCATI4gB,6C,EAaRU,gCAQI,GAPA5K,mBACAA,oBACAiK,GAAQ,QAAQxK,OAAT,kBAAkCA,OAAlC,MAH8B,aAKrCO,mBALqC,IAQjC1W,KAAKuhB,YAAYrf,cAAclC,KAAK0H,OAAO0G,WAA3C,mBAA0E,CAAC/O,GAAI8W,OAAQjY,OAA3F,IAEA,IAAMsjB,EAAqBxhB,KAAKuhB,YAAYhgB,eAAevB,KAAK0H,OAAO0G,WAAvE,oBAEA,GADAuS,GAAQ,4BAA4B3gB,KAAK0H,OAAO4G,WAAWmT,UAA3Dd,oBACIa,UAA6BxhB,KAAK0H,OAAO4G,WAAWmT,UAAxD,mBAAsF,CAClFd,GADkF,4CAGlF,IAAM5Z,EAAOya,EAAb,QACAxhB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,2BAGJpO,KAAA,8BAAmCA,KAAK0H,OAAO0G,WAA/C,mBAA8E,CAC1E/O,GAAI8W,OADsE,MAE1EtM,SAAUsM,OAAQuL,QAFtB,K,EAMJC,wBACI3hB,KAAA,WAAgBA,KAAK0H,OAAO0G,WAA5B,mBAA2DpO,KAAKuhB,YAAYhgB,eAAevB,KAAK0H,OAAO0G,WAAvG,qBACApO,KAAA,uBACAA,KAAA,sB,EAGJ4hB,yBAOI,GANInkB,IAASuC,KAAK0H,OAAO0G,WAAzB,qBACIuS,mCACAD,EAAW1gB,KAAKuhB,YAAYhgB,eAAevB,KAAK0H,OAAO0G,WAAvDsS,oBACAC,MACA3gB,KAAA,4BAEAvC,IAASuC,KAAK0H,OAAO0G,WAAzB,MAA2C,CAGvC,IAAIyT,EAAavT,GAHsB,sBAKjC8S,EAAelU,EAAE,IAAIlN,KAAKoe,SAAS/H,IAAI8K,MALN,mBAOjCW,EAAN,GACApB,WAAiB,YACb,IAAMqB,EAAc,CAChBL,MAAO3a,EADS,SAEhB7I,MAAO6I,EAAK1H,IAEZwiB,IAAe9a,EAAnB,UAAkC+a,OALN,MAOhCV,eAA0B,CAAC3G,OAAQqH,IACnCV,wBAAoC,CAACY,UAAD,EAAkBC,UAAW,M,EAIzElD,wBAGI,IAAMrC,EAAShG,sBAA0B1W,KAAKoe,SAAS/H,IAH7B,iBAK1BuK,GAAc,QAAQlK,SAAT,wBAAbkK,aACA,IAAIvS,EAAOrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI8R,SAASuL,IAAzF,GAIA,OAHAkE,MACAvS,EAAKrO,KAAK0H,OAAOyO,GAAGW,UAApBzI,aAA6CrO,KAAK0H,OAAOyO,GAAGW,UAA5DzI,gBACAA,EAAKrO,KAAK0H,OAAOyO,GAAGW,UAApBzI,aAA6CrO,KAAK0H,OAAOyO,GAAGW,UAA5DzI,sBACA,G,EAGMyQ,qBAAV,YACIpI,mBACAA,EAFoD,kBAIpD,IAAMgG,EAAShG,sBAA0B1W,KAAKoe,SAAS/H,IAJH,iBAM9C4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IANP,oBAQpDuK,GAAc,QAAQlK,EAAT,6CAAbkK,GAEA,IAAIvS,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI8R,SAASuL,IAA9F,GAEA,GADAiE,MACA,EAGI,UACI,KAAM3gB,KAAKoe,SAAS/H,IAApB,yBACIrW,KAAA,uBACA,MAEJ,KAAMA,KAAKoe,SAAS/H,IAApB,6BACIrW,KAAA,qBACA,MAEJ,KAAMA,KAAKoe,SAAS/H,IAApB,sBACIrW,KAAA,4B,EAOhBkiB,gCAEIvB,GAAQ,kBAAkBtS,EAAnB,qBAA4CA,EAA5C,GAAPsS,uBACAlR,6CAAsDpB,EAAtDoB,W,EAGJ0S,8BAEIxB,GAAQ,gBAAgBtS,EAAjB,qBAA0CA,EAA1C,GAAPsS,uBACAlR,2CAAoDpB,EAApDoB,W,EAGJ2S,mCAEIzB,GAAQ,sBAAsBtS,EAAvB,qBAAgDA,EAAhD,GAAPsS,uBACA3gB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,4B,EAGM0R,cAAV,cACI,U,EAGMF,mBAAV,cACI,U,GArX4ByC,I,0NCHpC,IAAMC,GAAWxiB,IAAjB,gBACMyiB,GAAiBziB,IAAvB,uBAwUA,G,oBAtTI,kBAA0F,aACtF,kBAAqC4V,WAArC,YAA2EA,gBAA3E,sBAHM8M,gBAAkC,KAKxC,SAAc9M,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,mBAAwB,2BAAxB,IACA,wBAA6B,gCAA7B,IACA,uBAA4B,+BAA5B,IACA,oBAAyB,4BAAzB,IACA,iBAAsB,yBAAtB,IACA,YAAiB,oBAAjB,IAEA9C,oCAfsF,E,4GAkB1FO,oCACI,MAAM,IAAI3T,MAAV,4B,EAGIyK,UAAR,YACIyM,mBACAA,oBACI1W,KAAJ,kBACIyP,2BAAoCzP,KAAKwiB,gBAAzC/S,UACAzP,KAAA,qBACAA,KAAA,eACAA,KAAA,mBAEJA,KAAA,mB,EAGJwW,2BAEI,GADA8L,sCACItiB,KAAJ,gBAA0B,CAEtB,IAAM6W,EAAoBH,uBAA2B1W,KAAK0H,OAAOyO,GAAGW,UAApE,oBACMC,EAAgBrT,WAAtB,GACA4e,MAEIvL,EAAc/W,KAAK0H,OAAOyO,GAAGW,UAA7BC,eAAwD/W,KAAK0H,OAAOyO,GAAGW,UAA3E,iBAEIrH,4BAAqCsH,EAArCtH,SAA4DzP,KAAKwiB,gBAAjE/S,Y,EAOZqD,iCACIwP,gCACAtiB,KAAA,kBACAA,KAAA,iBACAA,KAAA,mB,EAGJyiB,6BAII,GAHA/L,mBACAA,oBACA4L,6BACItiB,KAAJ,gBAA0B,CAEtB,GAAIA,KAAK0iB,WAAT,IAAsB1iB,KAAK0iB,UAAUxkB,MAAMkU,OAAOxW,OAF5B,OAItB,IAAM+mB,EAAiB3iB,KAAK0iB,UAAUxkB,MAJhB,OAMtB8B,KAAA,mBAEA,IAAI4iB,EAA2BnT,6BAAsCzP,KAAKwiB,gBAA3C/S,WAAoFlH,EAApFkH,OAA/B,IACA,KAAiB,CAEb,IAAIoT,EAAY7iB,KAAK8iB,eAFR,GAIb7L,wB,EAKJ8L,gBAAR,WACQ/iB,KAAJ,iBACQA,KAAJ,WAAoBA,KAAK0iB,UAAUjL,gBAAgB,YAC/CzX,KAAJ,mBAA4BA,KAAKgjB,kBAAkBvL,gBAAgB,YAC/DzX,KAAJ,iBAA0BA,KAAKijB,gBAAgBxL,gBAAgB,cAE3DzX,KAAJ,WAAoBA,KAAK0iB,UAAUQ,aAAa,WAAY,QACxDljB,KAAJ,mBAA4BA,KAAKgjB,kBAAkBE,aAAa,WAAY,QACxEljB,KAAJ,iBAA0BA,KAAKijB,gBAAgBC,aAAa,WAAY,U,EAMhFjF,4BAAmB,WACf,kCADe,MAGfje,KAAA,WAAkB4M,wBAAwB5M,KAAKoe,SAAS/H,IAHzC,WAKfrW,KAAA,UAAiB4M,wBAAwB5M,KAAKoe,SAAS/H,IALxC,WAOfrW,KAAA,SAAgB4M,wBAAwB5M,KAAKoe,SAAS/H,IAPvC,WASfrW,KAAA,kBAAyB4M,wBAAwB5M,KAAKoe,SAAS/H,IAThD,iBAWfrW,KAAA,gBAAuB4M,wBAAwB5M,KAAKoe,SAAS/H,IAX9C,aAafrW,KAAA,YAAmB4M,wBAAwB5M,KAAKoe,SAAS/H,IAAzD,eAEArW,KAAA,yCAA8C,YAAYuiB,mBAAoC,EAAJ,iBAA0B7L,sBACpH1W,KAAA,oCAA0CA,KAA1C,gBAGAA,KAAA,mCAAyCA,KAAzC,kBACAA,KAAA,yCAA8CA,KAA9C,WAEAA,KAAA,kBAEAA,KAAA,mB,EAGJof,gCACI,OAAOrY,EAAP,U,EAGJuY,sCACI,OAAOvY,EAAP,U,EAGJoZ,0CACI,OAAOpZ,aAAP,M,EAGJsZ,sCACI,IAAI5jB,EAAJ,WAOA,OANIuD,KAAJ,iBACQA,KAAKwiB,gBAAgBzR,WAAahK,EAAtC,WACItK,YAIR,G,EAGJ8jB,+CACI,OAAOvgB,KAAKqgB,wBAAwB5iB,EAApC,I,EAGMqiB,cAAV,cACI,OAAO/Y,EAAP,kB,EAGJ+b,2BACI,IAAIK,EAAgBvW,uBAApB,OAGA,GAFAqK,sBAF0C,WAI1C,IAAInM,qBAAkC,CAClC,IAAIsY,EAAkBxW,uBAAtB,OACAqK,wCACAmM,YAA4BtY,EAA5BsY,QACAD,qBAEC,CAED,GAAIrY,SAAiB2E,iBAArB,iBACIwH,wCACG,CACH,IAAImM,EAAkBxW,uBAAtB,OACAqK,wCACAmM,YAA4BtY,aAAuBsG,IAAOtG,EAAD,QAANsG,yBAAnDgS,eACAD,iBAGJ,IAAIzD,EAAY9S,uBAAhB,OACI9B,SAAiB2E,iBAArB,iBACIwH,4CAEAA,yCAEJyI,YAAsB5U,EAAtB4U,QACAyD,iBAIJ,OADAnjB,KAAA,0BACA,G,EAGIqjB,aAAR,WACIpM,qBAA8BjX,KAA9BiX,a,EAGJqM,iCAAuC,WACnCrM,qBAA8BjX,KAA9BiX,YACA,IAAI4L,EAAJ,KACA/Q,oBAAyB,YACrB+Q,EAAY,iBAAZA,MAGJ,GAAe5L,gB,EAInBsM,0BACIhB,GAAe,YAAYzQ,EAAb,SAAdyQ,cACIviB,KAAJ,iBACQA,KAAKwiB,gBAAgBzR,WAAae,EAAtC,WACI9R,KAAA,kBACAyP,8BAAuCqC,EAFa,UAIpD9R,KAAA,yBAGRA,KAAA,mB,EAGJ6e,2BACInI,mBACAA,oBACA2K,YAAY3K,EAHkB,QAK9B,IAAM1M,EAAO0M,sBAA0B1W,KAAKoe,SAAS/H,IALvB,iBAOxB4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IAP7B,oBAU9BkM,GAAe,YAAY7L,EAAb,sCAAd6L,GACAviB,KAAA,gBAAuByP,4BAAvB,GACIzP,KAAJ,kBACIA,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAIDwjB,eAAP,YACIjB,GAAe,oBAAD,EAAdA,aACAviB,KAAA,gBAAuByP,4BAAvB,GACIzP,KAAJ,kBACIA,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAMR4hB,yBACIW,uCACA7B,EAAWjR,iBAAXiR,cACA6B,MACAviB,KAAA,2BACAA,KAAA,mB,EAGJ+e,0B,EACUD,qBAAV,YACIpI,mBACAA,oBACA2K,YAAY3K,EAHwC,QAKpD,IAAM1M,EAAO0M,sBAA0B1W,KAAKoe,SAAS/H,IALD,iBAO9C4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IAPP,qBAUpDkM,GAAe,YAAY7L,EAAb,sCAAd6L,GAEA,KAC4B9S,4BAAxB,KAEIA,8BACIzP,KAAKwiB,iBAAoBxiB,KAAKwiB,gBAAgBzR,WAAlD,IACI/Q,KAAA,qBACAA,KAAA,eACAA,KAAA,mBAEJA,KAAA,qB,EAOZwT,iCACQxT,KAAJ,kBACIyP,8BAAuCzP,KAAKwiB,gBADtB,UAGtBxiB,KAAA,qBAA0BA,KAA1B,kBAEJA,KAAA,kBACAA,KAAA,mB,EAGJ4T,8BACI5T,KAAA,kBACAA,KAAA,iBACAA,KAAA,mB,EAGJ6T,4C,EAGU+L,mBAAV,cACI,U,EAGJ1M,yC,GAhU0BmP,I,0NCN9B,IAAM1B,GAAU7gB,IAAhB,6BACM8gB,GAAgB9gB,IAAtB,oCAgLA,G,oBA3KI,kBAA0F,aACtF,kBAAqC4V,WAArC,uBAAsFA,gBAAtF,iCAEA,OAAcA,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,eAAoB,uBAApB,IACA,wBAA6B,gCATyD,IAYtF,cAAmB,IAAnB,EACA,uCAA0C,oBAA1C,wBAEAiL,GAAQ,6BAAgC,oBAAxCA,mBAfsF,E,4GA0BlF8C,mBAAR,iBAAmD,IAAxBC,OAAiB,GACxCzM,qBAA8BjX,KAA9BiX,UACA,GACQjX,KAAJ,UAAmBA,KAAK2jB,SAASlM,gBAAgB,YAC7CzX,KAAJ,WAAmBA,KAAK2jB,SAASxM,UAAY,YAGzCnX,KAAJ,UAAmBA,KAAK2jB,SAAST,aAAa,WAA3B,QACfljB,KAAJ,WAAmBA,KAAK2jB,SAASxM,UAAY,yG,EAI7CyM,aAAR,YACIjD,sBACAjK,mBACAA,EAH8B,kBAK9B,IAAImN,EAAY7jB,KAAK8jB,QAAQ5lB,MAA7B,OACA,MAAI2lB,SAAJ,CAGA7jB,KAAA,oBAT8B,GAY9B,IAAI2D,EAAQ3D,KAAK0H,OAAOuM,KAAxB,cAGApP,kBAA2B7E,KAAK0H,OAAOuM,KAAvCpP,UAA4D,CAACqW,YAAY2I,GAAY7jB,KAArF6E,sBAAiH7E,KAAK0H,OAAO0G,WAA7HvJ,oB,EAGGkf,sBAAP,gBACI/jB,KAAA,uBACA2gB,GAAQ,2BAAD,oBAAPA,OACIvY,QAAiBA,GAArB,MACIwY,MACAA,GAAcxlB,OAAdwlB,gBACA5gB,KAAA,2BAAgCA,KAAK0H,OAAO0G,WAA5C,iBAAwEhT,OAAxE,qB,EAKR6iB,4BACI,kCADe,MAIfje,KAAA,OAAcA,KAAK4M,SAASuR,eAAene,KAAKoe,SAAS/H,IAJ1C,QAMfrW,KAAA,SAAgBA,KAAK4M,SAASuR,eAAene,KAAKoe,SAAS/H,IAN5C,UAQfrW,KAAA,QAAeA,KAAK4M,SAASuR,eAAene,KAAKoe,SAAS/H,IAA1D,SAEArW,KAAA,iCAAsCA,KAAtC,e,EAGJof,gCACI,OAAOrY,EAAP,Q,EAGJuY,sCACI,OAAOvY,EAAP,Q,EAGJoZ,0CACI,OAAUpZ,EAAV,UAAwBA,EAAxB,e,EAGJsZ,sCACI,gB,EAGJE,+CACA,gB,EAGA1B,2BACInI,mBACAA,oBACA2K,YAAY3K,EAHkB,QAK9B,IAAMmH,EAAcnH,sBAA0B1W,KAAKoe,SAAS/H,IAL9B,iBAOxB4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IAP7B,oBAU9BuK,GAAc,cAAclK,EAAf,sCAAbkK,GAEA,IAAI7G,EAAY/Z,KAAKuhB,YAAYvf,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAAyE,CAAC4O,OAAO7L,SAAS0M,IAA1G,GACA,GACI7d,KAAA,yCAEJA,KAAA,iB,EAOJ4hB,yBACQnkB,IAASuC,KAAK0H,OAAO0G,WAAzB,mBACIuS,mCACAD,EAAW1gB,KAAKuhB,YAAYhgB,eAAevB,KAAK0H,OAAO0G,WAAvDsS,kBACAC,MACA3gB,KAAA,6B,EAIR+e,wBAGI,IAAMlB,EAAcnH,sBAA0B1W,KAAKoe,SAAS/H,IAHlC,iBAK1BuK,GAAc,cAAclK,SAAf,wBAAbkK,aACA,IAAI7G,EAAY/Z,KAAKuhB,YAAYvf,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAA0E,CAAC4O,OAAQ7L,SAAS0M,IAA5G,GAIA,OAHA+C,MACA7G,EAAU/Z,KAAK0H,OAAOyO,GAAGW,UAAzBiD,aAAkD/Z,KAAK0H,OAAOyO,GAAGW,UAAjEiD,qBACAA,EAAU/Z,KAAK0H,OAAOyO,GAAGW,UAAzBiD,aAAkD/Z,KAAK0H,OAAOyO,GAAGW,UAAjEiD,2BACA,G,EAGM+E,qBAAV,YAEI,IAAMjB,EAAcnH,sBAA0B1W,KAAKoe,SAAS/H,IAFR,iBAI9C4I,EAAavI,sBAA0B1W,KAAKoe,SAAS/H,IAJP,oBAMpDuK,GAAc,cAAclK,EAAf,6CAAbkK,GAEA,IAAI7G,EAAgB/Z,KAAKuhB,YAAYvf,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAA0E,CAAC/O,GAAI8R,SAAS0M,IAA5G,GACA8C,MACA,GACI3gB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,0B,EAIE0R,cAAV,cACI,U,EAGMF,mBAAV,cACI,U,GAxKiCyC,ICHnC2B,GAAWlkB,IAAM,yBAIR,SAASmkB,GAAT,GAAmI,IAA3GlK,EAA2G,EAA3GA,UAAWmK,EAAgG,EAAhGA,kBAAmBC,EAA6E,EAA7EA,uBAAwBC,EAAqD,EAArDA,4BAA4BC,EAAyB,EAAzBA,uBACrH,GAAItK,EAAW,CACXiK,GAAS,cAAcjK,EAAUiD,QAEjC,IAAIsH,EAAY,6BACZ,4BAAQ/e,KAAK,SACLgf,UAAU,2CACVC,gBAAezK,EAAUiD,OAAQyH,QAASN,GAFlD,YAGyB7V,GAAWiM,aAAuB,GAAV,UAHjD,gBAII,uBAAGgK,UAAU,gBAJjB,MAMA,4BAAQhf,KAAK,SACLgf,UAAU,2CACVC,gBAAezK,EAAUiD,OAAQyH,QAASL,GAFlD,yBAGyC,uBAAGG,UAAU,uBAItDG,EACA,4BAAQnf,KAAK,SACLgf,UAAU,2CACVC,gBAAezK,EAAUiD,OAAQyH,QAASL,GAFlD,iBAG8B9V,GAAWiM,aAAuB,GAAV,UAHtD,gBAII,uBAAGgK,UAAU,gBAJjB,MAOAI,EACA,4BAAQpf,KAAK,SACLgf,UAAU,6CACVC,gBAAezK,EAAUiD,OAAQyH,QAASJ,GAFlD,wBAII,uBAAGE,UAAU,oBAJjB,MAQAK,EAAa,EACb7K,EAAU8K,cACVD,EAAa7K,EAAU8K,YAAYjpB,QAIvC,IAAIkpB,EAAgB,uBAAGP,UAAU,2BAC7BQ,EAAa,0BAAMP,gBAAezK,EAAUiD,OAAQuH,UAAU,sCAAsCE,QAASP,GAAoBU,GAErI,OAAK7K,EAAUiL,WAAejL,EAAUiL,YAAc1Q,GAAU2Q,WAGxD,yBAAKV,UAAU,4CACX,yBAAKA,UAAU,QACX,uBAAGW,KAAK,0DAA0DC,OAAO,UAAS,yBAAKZ,UAAU,eAAea,IAAKrL,EAAUsL,MAAOC,IAAI,oBAC1I,yBAAKf,UAAU,oBACX,wBAAIA,UAAU,cAAcxK,EAAUtc,KAAtC,KAA8Csc,EAAUwL,KAAxD,KAAkExL,EAAUiL,YAAc1Q,GAAUkR,WAAezL,EAAUiL,YAAc1Q,GAAUmR,iBAAmBX,EAAc,GAAtL,IAA6L/K,EAAUiL,YAAc1Q,GAAUkR,WAAezL,EAAUiL,YAAc1Q,GAAUmR,iBAAmBV,EAAW,GAAG,6BAAjT,KAA0TzW,GAAWiM,aAAgBR,EAAUiL,YAAc1Q,GAAUkR,UAAWd,EAAaJ,EAAWI,GAC1Z,uBAAGH,UAAU,aAAaxK,EAAU2L,aAEpC,uBAAGnB,UAAU,aACT,2BAAOA,UAAU,cAAjB,cACgBxK,EAAU4L,YAD1B,MAC0C5L,EAAU6L,YADpD,OACoE,6BADpE,YAEc7L,EAAU8L,WAFxB,MAEuC9L,EAAU+L,WAFjD,YAGK/L,EAAUgM,OAAO,6BAHtB,eAIiBhM,EAAUiM,cAInC,yBAAKzB,UAAU,qCAAf,SACWxK,EAAUkM,KADrB,WACmClM,EAAUmM,aAD7C,SACiEnM,EAAUoM,YAD3E,UAC8F,6BACzFxB,KAQjB,yBAAKJ,UAAU,4CACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAea,IAAI,mBAAmBE,IAAI,mBACzD,yBAAKf,UAAU,aACX,wBAAIA,UAAU,cAAcxK,EAAUtc,KAAtC,KAA8Csc,EAAUwL,KAAxD,MACA,uBAAGhB,UAAU,aAAb,cACA,uBAAGA,UAAU,aACT,2BAAOA,UAAU,cAAjB,gBAKR,yBAAKA,UAAW,qCAAhB,gBAOZ,OACI,yBAAKA,UAAU,4CACX,yBAAKA,UAAU,U,0NCjG/B,IAAMjC,GAAWxiB,IAAjB,uBACMyiB,GAAiBziB,IAAvB,8BAqIA,G,oBAhII,kBAA0F,aACtF,kBAAqC4V,WAArC,kBAAiFA,gBAAjF,4BAHM0Q,kBAAgC,KAKtC,SAAc1Q,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IAPsF,E,4GAU1FuI,4BACI,wCACAje,KAAA,mB,EAGGqmB,qBAAP,YACI/D,qCACAC,MACA,IACIviB,KAAA,oBACAA,KAAA,mB,EAIRof,gCACI,OAAOpf,KAAKomB,kBAAZ,a,EAGJ9G,sCACI,OAAOtf,KAAKomB,kBAAZ,a,EAQJjG,0CACI,IAAImG,EAAJ,GAiDA,OAvCAA,GAAU,0BAA0BtmB,KAAKomB,kBAAnC,UAA8DpmB,KAAKomB,kBAAnE,KAANE,SACAA,GAAU,mCAAmClV,IAAOrK,EAAD,UAANqK,yBAAvC,yBAANkV,OACAA,mCACIvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGJvf,EAAJ,SACQA,SAAJ,IACIuf,GAAavf,EAAP,YAAuBA,EAAvB,OAANuf,KAGRA,W,EAIJjG,sCACI,gB,EAGJE,+CACI,OAAOvgB,KAAKqgB,wBAAwB5iB,EAApC,I,EAGMqiB,cAAV,cACI,U,EAGMF,mBAAV,cACI,sC,EAIJf,6B,EACUC,qBAAV,YACI,MAAM,IAAItf,MAAV,4B,EAGJoiB,yBACIW,8CACA,GACQ7B,EAAJ,aACI1gB,KAAA,wBAAiC0gB,EAAjC,c,EAMZ3B,0B,GA7HgCsD,I,oVCOpC,IAAMkE,GAASzmB,IAAM,OAEf0mB,G,oBAkCF,aAAc,aAEV,sBACKnlB,MAAQ,CACTkZ,YAAY,EACZkM,gBAAiB,EACjBrK,WAAY,GACZhG,WAAY,CACRpM,KAAM,GACNgQ,cAAe,GACfC,mBAAoB,GACpB7C,MAAO,EACPsP,UAAW,IAEftY,WAAY,CACR4C,MAAO,QACPoL,WAAY,aACZpD,OAAQ,SACR2N,cAAe,gBACfnF,mBAAoB,qBACpBoF,iBAAkB,mBAClBxQ,WAAY,cAEhBnC,KAAM,CACFrK,MAAO,SACPid,QAAS,WACTC,cAAe,iGACf/J,kBAAmB,CACf7B,YAAa,wPACbC,WAAW,uBAEfF,UAAW,CACPC,YAAa,mCACbC,WAAY,aAEhBoC,kBAAmB,CACfrC,YAAa,iJACbC,WAAY,qBAEhBsC,uBAAwB,CACpBvC,YAAa,4IACbC,WAAY,0BAEhBsB,yBAA0B,CACtBvB,YAAa,uZACbC,WAAY,4BAEhByC,yBAA0B,CACtB1C,YAAa,0KACbC,WAAY,6BAMpBhF,GAAI,CACAW,UAAW,CACPiQ,mBAAoB,aACpBC,YAAa,cACbC,YAAa,cACbC,gBAAiB,OACjBC,qBAAsB,YACtBC,sBAAuB,aACvBC,2BAA4B,mBAEhCjN,MAAO,CACHkN,QAAS,QACTC,QAAS,cACTC,UAAW,gBACXC,eAAgB,eAChBC,gBAAiB,gBACjBC,cAAe,cACfC,UAAW,SACXC,UAAW,WAEfC,WAAY,CACRC,iBAAkB,6BAClBC,kBAAmB,gCACnBC,aAAc,2BACdC,OAAQ,qBACRC,eAAgB,4BAGpBC,YAAa,CACT/R,IAAK,CACDgS,UAAW,cACXC,UAAW,WACXC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,uEAChBtJ,gBAAiB,OACjBuJ,sBAAuB,OACvBC,mBAAoB,WACpBC,oBAAqB,GACrBC,sBAAuB,uBACvBC,oBAAqB,0BACrBC,qBAAsB,GACtBC,WAAY,GACZC,aAAc,GACdC,WAAY,GACZC,YAAa,GACbC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,yBACrBC,iBAAkB,GAClBC,wBAAwB,mBACxBC,UAAU,EACVC,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BC,iBAAkB,OAClBC,uBAAwB,CACpB,CAAC,QAAS,mBAEdC,aAAc,iCACdC,UAAW,aACXC,UAAW,UACXC,gBAAiB,gBACjBC,UAAW,UACXC,cAAe,cACfC,YAAa,cAGrBC,kBAAmB,CACflU,IAAK,CACDgS,UAAW,oBACXC,UAAW,qBACXkC,iBAAkB,iBAClBC,eAAgB,eAChBC,uBAAwB,yBACxBC,qBAAsB,uBACtBpC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,4EAChBtJ,gBAAiB,UACjBuJ,sBAAuB,iBACvBC,mBAAoB,cACpBiC,sBAAuB,qBACvBC,yBAA0B,iBAC1BC,6BAA8B,eAC9BlC,oBAAqB,0BACrBC,sBAAuB,wBACvBC,oBAAqB,uBACrBC,qBAAsB,yBACtBC,WAAY,oCACZC,aAAc,oCACdC,WAAY,kCACZC,YAAa,8CACbQ,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BT,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,yBACrBC,iBAAkB,GAClBC,wBAAwB,mBACxBtI,MAAO,CACH4J,kBAAmB,yBAI/BC,uBAAwB,CACpB3U,IAAK,CACDgS,UAAW,yBACXC,UAAW,mBACXC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,4EAChBtJ,gBAAiB,SACjBuJ,sBAAuB,SACvBC,mBAAoB,cACpBiC,sBAAuB,YACvBhC,oBAAqB,0BACrBC,sBAAuB,wBACvBC,oBAAqB,uBACrBC,qBAAsB,yBACtBC,WAAY,iCACZC,aAAc,iCACdC,WAAY,iCACZC,YAAa,gCACbQ,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BT,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,yBACrBC,iBAAkB,GAClBC,wBAAwB,mBACxBwB,OAAQ,YACRC,QAAS,YACTC,SAAU,oBAGlBC,kBAAmB,CACf/U,IAAK,CACDgS,UAAW,oBACXC,UAAW,cACXC,mBAAoB,MACpBC,yBAA0B,CACtB,CAAC,QAAQ,8BAEbC,eAAgB,0DAChBtJ,gBAAiB,SACjBuJ,sBAAuB,SACvBC,mBAAoB,cACpBiC,sBAAuB,aACvBhC,oBAAqB,GACrBC,sBAAuB,GACvBC,oBAAqB,GACrBC,qBAAsB,GACtBC,WAAY,IACZC,aAAc,IACdC,WAAY,IACZC,YAAa,IACbC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdK,wBAAyB,mBACzBC,6BAA8B,MAC9BC,yBAA0B,OAC1BwB,oBAAoB,EACpBC,eAAgB,MAChBC,WAAY,mBAGpBnV,WAAY,CACRC,IAAK,CACDmV,SAAU,iBACVzR,UAAW,oBACXlE,eAAgB,iBAChBuB,MAAO,eACPqU,IAAK,kBACLrV,WAAY,aACZsV,UAAW,yCACXC,eAAgB,wCAChBC,QAAS,uCACTC,UAAW,yCAMvBtN,QAAS,CACLuJ,WAAY,GACZgE,UAAW,GACXvB,kBAAmB,CACf/L,KAAM,CACFuN,SAAU,OACVC,aAAc,QAGtBhB,uBAAwB,CACpBxM,KAAM,CACFuN,SAAU,OACVC,aAAc,QAGtB5D,YAAa,CACT5J,KAAM,CACFuN,SAAU,QACVC,aAAc,QAGtBZ,kBAAmB,CACf5M,KAAM,CACFuN,SAAU,SACVC,aAAc,SAI1B1d,WAAY,CACRgP,OAAQ,CACJlB,WAAY,CACR6P,eAAgB,kBAGxBxK,UAAW,CACPD,mBAAoB,MAKhC,EAAK0K,aAAe,EAAKA,aAAaztB,KAAlB,OACpB,EAAK0tB,cAAgB,EAAKA,cAAc1tB,KAAnB,OACrB,EAAK2tB,sBAAwB,EAAKA,sBAAsB3tB,KAA3B,OAE7B,EAAK4tB,qBAAuB,EAAKA,qBAAqB5tB,KAA1B,OAC5B,EAAK6tB,eAAiB,EAAKA,eAAe7tB,KAApB,OACtB,EAAK8tB,oBAAsB,EAAKA,oBAAoB9tB,KAAzB,OAE3B,EAAK+tB,eAAiB,EAAKA,eAAe/tB,KAApB,OACtB,EAAKguB,WAAa,EAAKA,WAAWhuB,KAAhB,OAElB,EAAKiuB,qBAAuB,EAAKA,qBAAqBjuB,KAA1B,OAC5B,EAAKkuB,qBAAuB,EAAKA,qBAAqBluB,KAA1B,OAC5B,EAAKmuB,sBAAwB,EAAKA,sBAAsBnuB,KAA3B,OAC7B,EAAKouB,iBAAmB,EAAKA,iBAAiBpuB,KAAtB,OAExB6P,GAAWuM,qBAAX,MAAsC9b,OAAO6R,cAnTnC,E,4GAsTN4b,eAAR,SAAuB9V,GACnBA,EAAMoW,kB,EAGFL,WAAR,SAAmB/V,GAEf,IAAMG,EAAoBH,EAAMqW,aAAaC,QAAQhtB,KAAKqB,MAAM8U,GAAGW,UAAUiQ,oBAC7ER,GAAO1P,GACP,IAAME,EAAgBrT,KAAKupB,MAAMpW,GACjC0P,GAAOxP,GAEHA,EAAc/W,KAAKqB,MAAM8U,GAAGW,UAAUkQ,eAAiBhnB,KAAKqB,MAAM8U,GAAGW,UAAUqQ,sBAC/EnnB,KAAK6c,sBAAsB9F,I,EAK5B8F,sBAAP,SAA6B9F,GAEzBzI,GAAWuO,sBAAsB9F,I,EAGrCnI,eAAA,WACI,OAAON,GAAW0N,qB,EAGtB5B,MAAA,SAAM8S,EAAaC,GACfntB,KAAKotB,QAAQC,YAAcH,EAC3BltB,KAAK0f,UAAU2N,YAAcF,EAE7BntB,KAAKstB,QAAQC,UAAUC,OAAOxtB,KAAKqB,MAAM8U,GAAGiE,MAAMwN,WAElD5nB,KAAKstB,QAAQC,UAAUE,IAAIztB,KAAKqB,MAAM8U,GAAGiE,MAAMyN,Y,EAInD6F,OAAA,WAAS,WACLnH,GAAO,iBAEP,IAAInK,EAAmBpc,KAAKqB,MAAM+a,WAClCmK,GAAOnK,GAEP,IAAMuR,EAAQvR,EAAWld,KAAI,SAAC0uB,EAAOhtB,GAAR,OACzB,kBAACqjB,GAAD,CACIzlB,IAAKoC,EACLmZ,UAAW6T,EACX1J,kBAAmB,EAAK2I,iBACxB1I,uBAAwB7V,GAAWsN,yBACnCwI,4BAA6B,EAAKgI,sBAClC/H,uBAAwB,EAAKuI,2BAIrC,OACI,yBAAKrI,UAAU,wBACX,yBAAKA,UAAU,cACVoJ,K,EAMjBzB,aAAA,SAAaxV,GAET1W,KAAKstB,QAAQC,UAAUC,OAAOxtB,KAAKqB,MAAM8U,GAAGiE,MAAMyN,WAElD7nB,KAAKstB,QAAQC,UAAUE,IAAIztB,KAAKqB,MAAM8U,GAAGiE,MAAMwN,WAC/ClR,EAAMoW,kB,EAGVX,cAAA,SAAczV,GAEV1W,KAAKstB,QAAQC,UAAUC,OAAOxtB,KAAKqB,MAAM8U,GAAGiE,MAAMyN,WAElD7nB,KAAKstB,QAAQC,UAAUE,IAAIztB,KAAKqB,MAAM8U,GAAGiE,MAAMwN,WAC/ClR,EAAMoW,iBAEN,IAAIztB,EAAKW,KAAKstB,QAAQO,aAAa7tB,KAAKqB,MAAMiN,WAAWgP,OAAOlB,WAAW6P,gBAC3E5sB,EAAK8R,SAAS9R,GACdknB,GAAO,2BAA2BlnB,GAElC,IAAM+d,EAA6Bpd,KAAKqB,MAAM+a,WAC1Cxb,EAAQwc,EAA2B3c,WAAU,SAAC6b,GAAD,OAAcA,EAAKU,SAAW3d,KAC/E,GAAIuB,GAAS,EAAG,CACZ,IAAMmZ,EAAYqD,EAA2Bxc,GAC7C0N,GAAWuN,8BAA8B9B,K,EAIjD6S,sBAAA,SAAsBlW,GAGlB,GAFAA,EAAMoW,iBAEF5W,GAAqB3T,cAAcoU,sBAAuB,CAC1D,IAAIC,QAAQ,+FAKR,OAJAV,GAAqB3T,cAAcoX,gBAQ3C3Z,KAAK8tB,kBAEL,IAAIzuB,EAAKqX,EAAMyO,OAAO0I,aAAa7tB,KAAKqB,MAAMiN,WAAWgP,OAAOlB,WAAW6P,gBAE3E,GADA1F,GAAO,qCAAqClnB,GACxCA,EAAI,CAEJA,EAAK8R,SAAS9R,GAEd,IAAM+d,EAA6Bpd,KAAKqB,MAAM+a,WAC1Cxb,EAAQwc,EAA2B3c,WAAU,SAAC6b,GAAD,OAAeA,EAAKU,SAAW3d,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAMmZ,EAAYqD,EAA2Bxc,GAC7C2lB,GAAOxM,GACP7D,GAAqB3T,cAAcwrB,gBAAgBhU,GACnD/Z,KAAKguB,sCAAqC,M,EAMtD5B,sBAAA,SAAsB1V,GAClBA,EAAMoW,iBAGN,IAAIztB,EAAKqX,EAAMyO,OAAO0I,aAAa7tB,KAAKqB,MAAMiN,WAAWgP,OAAOlB,WAAW6P,gBAE3E,GADA1F,GAAO,8BAA8BlnB,GACjCA,EAAI,CAEJA,EAAK8R,SAAS9R,GAEd,IAAM+d,EAA6Bpd,KAAKqB,MAAM+a,WAC1Cxb,EAAQwc,EAA2B3c,WAAU,SAAC6b,GAAD,OAAcA,EAAKU,SAAW3d,KAC/E,GAAIuB,GAAS,EAAG,CACZ,IAAMmZ,EAAYqD,EAA2Bxc,GACzCmZ,EAAUiL,WAAcjL,EAAUiL,YAAc1Q,GAAUkR,WAC1De,GAAO,8BAA8BlnB,EAA/B,6DACFiP,GAAWiM,cAEXva,KAAKstB,QAAQpK,aAAaljB,KAAKqB,MAAMiN,WAAWgP,OAAOlB,WAAW6P,eAAe5sB,GACjFW,KAAKoa,MAASL,EAAUtc,KAAxB,KAAiCsc,EAAUwL,KAA3C,IAAoD,2EAGpDgB,GAAO,8BAA8BlnB,EAA/B,oGAENiP,GAAWwN,2BAA2B/B,MAK1CwM,GAAO,8BAA8BlnB,EAA/B,iDAENiP,GAAWwN,2BAA2B/B,O,EAOhDkU,kB,+CAAN,6FACI1H,GAAO,uBAGPvmB,KAAKkuB,SAAW,IAAIC,GAAgBnuB,KAAK4M,SAAS0B,GAAWqO,mBAC7D3c,KAAKkuB,SAASjQ,mBAEdje,KAAKouB,eAAiB,IAAIC,GAAsBruB,KAAK4M,SAAS0B,GAAWqO,mBACzE3c,KAAKouB,eAAenQ,mBAGpBje,KAAKsuB,cAAgB,IAAIC,GAA2BvuB,KAAK4M,SAAS0B,GAAWqO,mBAC7E3c,KAAKsuB,cAAcrQ,mBAEnBje,KAAKwuB,WAAa,IAAIC,GAAsBzuB,KAAK4M,SAAS0B,GAAWqO,mBACrE3c,KAAKwuB,WAAWvQ,mBAGhBje,KAAK0uB,eAAiBjZ,GAAelT,cACrCvC,KAAK0uB,eAAezQ,iBAAiBje,MAGjC4M,WAEAA,SAASuR,eAAene,KAAKqB,MAAM8U,GAAG2R,WAAWE,mBAAmBvR,iBAAiB,QAASzW,KAAKusB,qBAEnG3f,SAASuR,eAAene,KAAKqB,MAAM8U,GAAG2R,WAAWG,cAAcxR,iBAAiB,QAASzW,KAAKqsB,sBAE9FrsB,KAAK2uB,mBAAqB/hB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAG2R,WAAWI,QAG3EloB,KAAK2uB,mBAAmBlY,iBAAiB,QAASzW,KAAKssB,gBAEvD1f,SAASuR,eAAene,KAAKqB,MAAM8U,GAAG2R,WAAWC,kBAAkBtR,iBAAiB,QAASzW,KAAK0sB,sBAElG9f,SAASuR,eAAene,KAAKqB,MAAM8U,GAAG2R,WAAWK,gBAAgB1R,iBAAiB,QAASzW,KAAK2sB,uBAKpG3sB,KAAKstB,QAAU1gB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMkN,SAE3DtnB,KAAKotB,QAAUxgB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMmN,SAE3DvnB,KAAK0f,UAAY9S,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMoN,WAE7DxnB,KAAK4uB,YAAchiB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMqN,gBAE/DznB,KAAK6uB,aAAejiB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMsN,iBAEhE1nB,KAAK8uB,WAAaliB,SAASuR,eAAene,KAAKqB,MAAM8U,GAAGiE,MAAMuN,eAG1D3nB,KAAK4uB,aAAa5uB,KAAK4uB,YAAYnY,iBAAiB,QAAQzW,KAAKksB,cACjElsB,KAAK6uB,cAAc7uB,KAAK6uB,aAAapY,iBAAiB,QAAQzW,KAAKmsB,eACnEnsB,KAAK8uB,YAAY9uB,KAAK8uB,WAAWrY,iBAAiB,QAAQzW,KAAKksB,cAInElsB,KAAK2V,OAAS/I,SAASuR,eAAe,QAEtCne,KAAKgW,aAAepJ,SAASuR,eAAe,kBACxCne,KAAK2V,SACL3V,KAAK2V,OAAOc,iBAAiB,WAAYzW,KAAKwsB,gBAC9CxsB,KAAK2V,OAAOc,iBAAiB,OAAQzW,KAAKysB,aAI9CvW,GAAqB3T,cAAcgN,WAAWvP,MAC9CsO,GAAWiB,aArEf,gD,wOAwEAue,gBAAA,WACI9tB,KAAKkuB,SAASzP,UAAU,MACxBze,KAAKouB,eAAe3P,UAAU,MAC9Bze,KAAKsuB,cAAc7P,UAAU,O,EAGzBuP,qCAAR,SAA6Ce,GACrCA,GACI/uB,KAAK2V,QAAQsB,GAAYjC,iBAAiBhV,KAAK2V,OAAO,UAAS,GAC/D3V,KAAK2V,QAAQsB,GAAYjC,iBAAiBhV,KAAK2V,OAAO,WAAW,GACjE3V,KAAKgW,cAAciB,GAAYjC,iBAAiBhV,KAAKgW,aAAa,UAAU,GAC5EhW,KAAKgW,cAAciB,GAAYjC,iBAAiBhV,KAAKgW,aAAa,WAAW,IAG7EE,GAAqB3T,cAAcoU,wBAC/B3W,KAAK2V,QAAQsB,GAAYjC,iBAAiBhV,KAAK2V,OAAQ,UAAU,GACjE3V,KAAK2V,QAAQsB,GAAYjC,iBAAiBhV,KAAK2V,OAAQ,WAAW,GAClE3V,KAAKgW,cAAciB,GAAYjC,iBAAiBhV,KAAKgW,aAAc,UAAU,GAC7EhW,KAAKgW,cAAciB,GAAYjC,iBAAiBhV,KAAKgW,aAAc,WAAW,K,EAK9F0W,qBAAA,SAAqBhW,GACjB1W,KAAKguB,sCAAqC,I,EAG9CrB,qBAAA,SAAqBjW,GACjB1W,KAAKguB,sCAAqC,I,EAG9C3B,qBAAA,SAAqB3V,GACjB6P,GAAO,6BACP7P,EAAMoW,iBAGDxe,GAAWiM,aAKhBva,KAAKouB,eAAe1P,UAAUhI,GAH1B3X,OAAOgtB,SAAS7G,KAAOllB,KAAKqB,MAAM4S,KAAKrK,O,EAM/CijB,iBAAA,SAAiBnW,GACb6P,GAAO,mCACP7P,EAAMoW,iBAEN,IAAIztB,EAAKqX,EAAMyO,OAAO0I,aAAa7tB,KAAKqB,MAAMiN,WAAWgP,OAAOlB,WAAW6P,gBAE3E,GADA1F,GAAO,mCAAmClnB,GACtCA,EAAI,CAEJA,EAAK8R,SAAS9R,GAEd,IAAM+d,EAA6Bpd,KAAKqB,MAAM+a,WAC1Cxb,EAAQwc,EAA2B3c,WAAU,SAAC6b,GAAD,OAAeA,EAAKU,SAAW3d,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAMmZ,EAAYqD,EAA2Bxc,GAC7CZ,KAAKwuB,WAAWnI,qBAAqBtM,GACrC/Z,KAAKwuB,WAAW9P,UAAU,S,EAKtC4N,eAAA,SAAe5V,EAAY3F,GACvBwV,GAAO,sBACP7P,EAAMoW,iBAGDxe,GAAWiM,cAKhBva,KAAKkuB,SAASxP,UAAUhI,GACpB3F,GACA/Q,KAAKkuB,SAAS1K,eAAezS,IAL7BhS,OAAOgtB,SAAS7G,KAAOllB,KAAKqB,MAAM4S,KAAKrK,O,EAS/C2iB,oBAAA,SAAoB7V,GAChB6P,GAAO,iCACP7P,EAAMoW,iBAEDxe,GAAWiM,cACZva,KAAK8tB,kBAGT9tB,KAAKsuB,cAAc5P,UAAUhI,I,EAGjCsY,aAAA,SAAaC,GAET,IAAI3I,EAAS,oCACT2I,EAAW,IACX3I,GAAU,uDAAuD2I,EAA3D,iBAENjvB,KAAK2uB,qBAAoB3uB,KAAK2uB,mBAAmBxX,UAAxB,GAAuCmP,I,GAjqBzD4I,IAAMC,WAyqBzBve,aAAa9Q,MAAQ,yQACrBA,IAAMgR,IAAMuQ,QAAQ+N,KAAK3wB,KAAK4iB,SAG9B,IAAM3gB,GAAU,kBAAC,GAAD,CAAM6jB,UAAU,2CAEhC8K,IAAS3B,OAAOhtB,GAASkM,SAASuR,eAAe","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([449,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": 142,\n\t\"./af.js\": 142,\n\t\"./ar\": 143,\n\t\"./ar-dz\": 144,\n\t\"./ar-dz.js\": 144,\n\t\"./ar-kw\": 145,\n\t\"./ar-kw.js\": 145,\n\t\"./ar-ly\": 146,\n\t\"./ar-ly.js\": 146,\n\t\"./ar-ma\": 147,\n\t\"./ar-ma.js\": 147,\n\t\"./ar-sa\": 148,\n\t\"./ar-sa.js\": 148,\n\t\"./ar-tn\": 149,\n\t\"./ar-tn.js\": 149,\n\t\"./ar.js\": 143,\n\t\"./az\": 150,\n\t\"./az.js\": 150,\n\t\"./be\": 151,\n\t\"./be.js\": 151,\n\t\"./bg\": 152,\n\t\"./bg.js\": 152,\n\t\"./bm\": 153,\n\t\"./bm.js\": 153,\n\t\"./bn\": 154,\n\t\"./bn-bd\": 155,\n\t\"./bn-bd.js\": 155,\n\t\"./bn.js\": 154,\n\t\"./bo\": 156,\n\t\"./bo.js\": 156,\n\t\"./br\": 157,\n\t\"./br.js\": 157,\n\t\"./bs\": 158,\n\t\"./bs.js\": 158,\n\t\"./ca\": 159,\n\t\"./ca.js\": 159,\n\t\"./cs\": 160,\n\t\"./cs.js\": 160,\n\t\"./cv\": 161,\n\t\"./cv.js\": 161,\n\t\"./cy\": 162,\n\t\"./cy.js\": 162,\n\t\"./da\": 163,\n\t\"./da.js\": 163,\n\t\"./de\": 164,\n\t\"./de-at\": 165,\n\t\"./de-at.js\": 165,\n\t\"./de-ch\": 166,\n\t\"./de-ch.js\": 166,\n\t\"./de.js\": 164,\n\t\"./dv\": 167,\n\t\"./dv.js\": 167,\n\t\"./el\": 168,\n\t\"./el.js\": 168,\n\t\"./en-au\": 169,\n\t\"./en-au.js\": 169,\n\t\"./en-ca\": 170,\n\t\"./en-ca.js\": 170,\n\t\"./en-gb\": 171,\n\t\"./en-gb.js\": 171,\n\t\"./en-ie\": 172,\n\t\"./en-ie.js\": 172,\n\t\"./en-il\": 173,\n\t\"./en-il.js\": 173,\n\t\"./en-in\": 174,\n\t\"./en-in.js\": 174,\n\t\"./en-nz\": 175,\n\t\"./en-nz.js\": 175,\n\t\"./en-sg\": 176,\n\t\"./en-sg.js\": 176,\n\t\"./eo\": 177,\n\t\"./eo.js\": 177,\n\t\"./es\": 178,\n\t\"./es-do\": 179,\n\t\"./es-do.js\": 179,\n\t\"./es-mx\": 180,\n\t\"./es-mx.js\": 180,\n\t\"./es-us\": 181,\n\t\"./es-us.js\": 181,\n\t\"./es.js\": 178,\n\t\"./et\": 182,\n\t\"./et.js\": 182,\n\t\"./eu\": 183,\n\t\"./eu.js\": 183,\n\t\"./fa\": 184,\n\t\"./fa.js\": 184,\n\t\"./fi\": 185,\n\t\"./fi.js\": 185,\n\t\"./fil\": 186,\n\t\"./fil.js\": 186,\n\t\"./fo\": 187,\n\t\"./fo.js\": 187,\n\t\"./fr\": 188,\n\t\"./fr-ca\": 189,\n\t\"./fr-ca.js\": 189,\n\t\"./fr-ch\": 190,\n\t\"./fr-ch.js\": 190,\n\t\"./fr.js\": 188,\n\t\"./fy\": 191,\n\t\"./fy.js\": 191,\n\t\"./ga\": 192,\n\t\"./ga.js\": 192,\n\t\"./gd\": 193,\n\t\"./gd.js\": 193,\n\t\"./gl\": 194,\n\t\"./gl.js\": 194,\n\t\"./gom-deva\": 195,\n\t\"./gom-deva.js\": 195,\n\t\"./gom-latn\": 196,\n\t\"./gom-latn.js\": 196,\n\t\"./gu\": 197,\n\t\"./gu.js\": 197,\n\t\"./he\": 198,\n\t\"./he.js\": 198,\n\t\"./hi\": 199,\n\t\"./hi.js\": 199,\n\t\"./hr\": 200,\n\t\"./hr.js\": 200,\n\t\"./hu\": 201,\n\t\"./hu.js\": 201,\n\t\"./hy-am\": 202,\n\t\"./hy-am.js\": 202,\n\t\"./id\": 203,\n\t\"./id.js\": 203,\n\t\"./is\": 204,\n\t\"./is.js\": 204,\n\t\"./it\": 205,\n\t\"./it-ch\": 206,\n\t\"./it-ch.js\": 206,\n\t\"./it.js\": 205,\n\t\"./ja\": 207,\n\t\"./ja.js\": 207,\n\t\"./jv\": 208,\n\t\"./jv.js\": 208,\n\t\"./ka\": 209,\n\t\"./ka.js\": 209,\n\t\"./kk\": 210,\n\t\"./kk.js\": 210,\n\t\"./km\": 211,\n\t\"./km.js\": 211,\n\t\"./kn\": 212,\n\t\"./kn.js\": 212,\n\t\"./ko\": 213,\n\t\"./ko.js\": 213,\n\t\"./ku\": 214,\n\t\"./ku.js\": 214,\n\t\"./ky\": 215,\n\t\"./ky.js\": 215,\n\t\"./lb\": 216,\n\t\"./lb.js\": 216,\n\t\"./lo\": 217,\n\t\"./lo.js\": 217,\n\t\"./lt\": 218,\n\t\"./lt.js\": 218,\n\t\"./lv\": 219,\n\t\"./lv.js\": 219,\n\t\"./me\": 220,\n\t\"./me.js\": 220,\n\t\"./mi\": 221,\n\t\"./mi.js\": 221,\n\t\"./mk\": 222,\n\t\"./mk.js\": 222,\n\t\"./ml\": 223,\n\t\"./ml.js\": 223,\n\t\"./mn\": 224,\n\t\"./mn.js\": 224,\n\t\"./mr\": 225,\n\t\"./mr.js\": 225,\n\t\"./ms\": 226,\n\t\"./ms-my\": 227,\n\t\"./ms-my.js\": 227,\n\t\"./ms.js\": 226,\n\t\"./mt\": 228,\n\t\"./mt.js\": 228,\n\t\"./my\": 229,\n\t\"./my.js\": 229,\n\t\"./nb\": 230,\n\t\"./nb.js\": 230,\n\t\"./ne\": 231,\n\t\"./ne.js\": 231,\n\t\"./nl\": 232,\n\t\"./nl-be\": 233,\n\t\"./nl-be.js\": 233,\n\t\"./nl.js\": 232,\n\t\"./nn\": 234,\n\t\"./nn.js\": 234,\n\t\"./oc-lnc\": 235,\n\t\"./oc-lnc.js\": 235,\n\t\"./pa-in\": 236,\n\t\"./pa-in.js\": 236,\n\t\"./pl\": 237,\n\t\"./pl.js\": 237,\n\t\"./pt\": 238,\n\t\"./pt-br\": 239,\n\t\"./pt-br.js\": 239,\n\t\"./pt.js\": 238,\n\t\"./ro\": 240,\n\t\"./ro.js\": 240,\n\t\"./ru\": 241,\n\t\"./ru.js\": 241,\n\t\"./sd\": 242,\n\t\"./sd.js\": 242,\n\t\"./se\": 243,\n\t\"./se.js\": 243,\n\t\"./si\": 244,\n\t\"./si.js\": 244,\n\t\"./sk\": 245,\n\t\"./sk.js\": 245,\n\t\"./sl\": 246,\n\t\"./sl.js\": 246,\n\t\"./sq\": 247,\n\t\"./sq.js\": 247,\n\t\"./sr\": 248,\n\t\"./sr-cyrl\": 249,\n\t\"./sr-cyrl.js\": 249,\n\t\"./sr.js\": 248,\n\t\"./ss\": 250,\n\t\"./ss.js\": 250,\n\t\"./sv\": 251,\n\t\"./sv.js\": 251,\n\t\"./sw\": 252,\n\t\"./sw.js\": 252,\n\t\"./ta\": 253,\n\t\"./ta.js\": 253,\n\t\"./te\": 254,\n\t\"./te.js\": 254,\n\t\"./tet\": 255,\n\t\"./tet.js\": 255,\n\t\"./tg\": 256,\n\t\"./tg.js\": 256,\n\t\"./th\": 257,\n\t\"./th.js\": 257,\n\t\"./tk\": 258,\n\t\"./tk.js\": 258,\n\t\"./tl-ph\": 259,\n\t\"./tl-ph.js\": 259,\n\t\"./tlh\": 260,\n\t\"./tlh.js\": 260,\n\t\"./tr\": 261,\n\t\"./tr.js\": 261,\n\t\"./tzl\": 262,\n\t\"./tzl.js\": 262,\n\t\"./tzm\": 263,\n\t\"./tzm-latn\": 264,\n\t\"./tzm-latn.js\": 264,\n\t\"./tzm.js\": 263,\n\t\"./ug-cn\": 265,\n\t\"./ug-cn.js\": 265,\n\t\"./uk\": 266,\n\t\"./uk.js\": 266,\n\t\"./ur\": 267,\n\t\"./ur.js\": 267,\n\t\"./uz\": 268,\n\t\"./uz-latn\": 269,\n\t\"./uz-latn.js\": 269,\n\t\"./uz.js\": 268,\n\t\"./vi\": 270,\n\t\"./vi.js\": 270,\n\t\"./x-pseudo\": 271,\n\t\"./x-pseudo.js\": 271,\n\t\"./yo\": 272,\n\t\"./yo.js\": 272,\n\t\"./zh-cn\": 273,\n\t\"./zh-cn.js\": 273,\n\t\"./zh-hk\": 274,\n\t\"./zh-hk.js\": 274,\n\t\"./zh-mo\": 275,\n\t\"./zh-mo.js\": 275,\n\t\"./zh-tw\": 276,\n\t\"./zh-tw.js\": 276\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 457;","var map = {\n\t\"./af\": 306,\n\t\"./af.js\": 306,\n\t\"./ar\": 307,\n\t\"./ar-dz\": 308,\n\t\"./ar-dz.js\": 308,\n\t\"./ar-kw\": 309,\n\t\"./ar-kw.js\": 309,\n\t\"./ar-ly\": 310,\n\t\"./ar-ly.js\": 310,\n\t\"./ar-ma\": 311,\n\t\"./ar-ma.js\": 311,\n\t\"./ar-sa\": 312,\n\t\"./ar-sa.js\": 312,\n\t\"./ar-tn\": 313,\n\t\"./ar-tn.js\": 313,\n\t\"./ar.js\": 307,\n\t\"./az\": 314,\n\t\"./az.js\": 314,\n\t\"./be\": 315,\n\t\"./be.js\": 315,\n\t\"./bg\": 316,\n\t\"./bg.js\": 316,\n\t\"./bm\": 317,\n\t\"./bm.js\": 317,\n\t\"./bn\": 318,\n\t\"./bn.js\": 318,\n\t\"./bo\": 319,\n\t\"./bo.js\": 319,\n\t\"./br\": 320,\n\t\"./br.js\": 320,\n\t\"./bs\": 321,\n\t\"./bs.js\": 321,\n\t\"./ca\": 322,\n\t\"./ca.js\": 322,\n\t\"./cs\": 323,\n\t\"./cs.js\": 323,\n\t\"./cv\": 324,\n\t\"./cv.js\": 324,\n\t\"./cy\": 325,\n\t\"./cy.js\": 325,\n\t\"./da\": 326,\n\t\"./da.js\": 326,\n\t\"./de\": 327,\n\t\"./de-at\": 328,\n\t\"./de-at.js\": 328,\n\t\"./de-ch\": 329,\n\t\"./de-ch.js\": 329,\n\t\"./de.js\": 327,\n\t\"./dv\": 330,\n\t\"./dv.js\": 330,\n\t\"./el\": 331,\n\t\"./el.js\": 331,\n\t\"./en-SG\": 332,\n\t\"./en-SG.js\": 332,\n\t\"./en-au\": 333,\n\t\"./en-au.js\": 333,\n\t\"./en-ca\": 334,\n\t\"./en-ca.js\": 334,\n\t\"./en-gb\": 335,\n\t\"./en-gb.js\": 335,\n\t\"./en-ie\": 336,\n\t\"./en-ie.js\": 336,\n\t\"./en-il\": 337,\n\t\"./en-il.js\": 337,\n\t\"./en-nz\": 338,\n\t\"./en-nz.js\": 338,\n\t\"./eo\": 339,\n\t\"./eo.js\": 339,\n\t\"./es\": 340,\n\t\"./es-do\": 341,\n\t\"./es-do.js\": 341,\n\t\"./es-us\": 342,\n\t\"./es-us.js\": 342,\n\t\"./es.js\": 340,\n\t\"./et\": 343,\n\t\"./et.js\": 343,\n\t\"./eu\": 344,\n\t\"./eu.js\": 344,\n\t\"./fa\": 345,\n\t\"./fa.js\": 345,\n\t\"./fi\": 346,\n\t\"./fi.js\": 346,\n\t\"./fo\": 347,\n\t\"./fo.js\": 347,\n\t\"./fr\": 348,\n\t\"./fr-ca\": 349,\n\t\"./fr-ca.js\": 349,\n\t\"./fr-ch\": 350,\n\t\"./fr-ch.js\": 350,\n\t\"./fr.js\": 348,\n\t\"./fy\": 351,\n\t\"./fy.js\": 351,\n\t\"./ga\": 352,\n\t\"./ga.js\": 352,\n\t\"./gd\": 353,\n\t\"./gd.js\": 353,\n\t\"./gl\": 354,\n\t\"./gl.js\": 354,\n\t\"./gom-latn\": 355,\n\t\"./gom-latn.js\": 355,\n\t\"./gu\": 356,\n\t\"./gu.js\": 356,\n\t\"./he\": 357,\n\t\"./he.js\": 357,\n\t\"./hi\": 358,\n\t\"./hi.js\": 358,\n\t\"./hr\": 359,\n\t\"./hr.js\": 359,\n\t\"./hu\": 360,\n\t\"./hu.js\": 360,\n\t\"./hy-am\": 361,\n\t\"./hy-am.js\": 361,\n\t\"./id\": 362,\n\t\"./id.js\": 362,\n\t\"./is\": 363,\n\t\"./is.js\": 363,\n\t\"./it\": 364,\n\t\"./it-ch\": 365,\n\t\"./it-ch.js\": 365,\n\t\"./it.js\": 364,\n\t\"./ja\": 366,\n\t\"./ja.js\": 366,\n\t\"./jv\": 367,\n\t\"./jv.js\": 367,\n\t\"./ka\": 368,\n\t\"./ka.js\": 368,\n\t\"./kk\": 369,\n\t\"./kk.js\": 369,\n\t\"./km\": 370,\n\t\"./km.js\": 370,\n\t\"./kn\": 371,\n\t\"./kn.js\": 371,\n\t\"./ko\": 372,\n\t\"./ko.js\": 372,\n\t\"./ku\": 373,\n\t\"./ku.js\": 373,\n\t\"./ky\": 374,\n\t\"./ky.js\": 374,\n\t\"./lb\": 375,\n\t\"./lb.js\": 375,\n\t\"./lo\": 376,\n\t\"./lo.js\": 376,\n\t\"./lt\": 377,\n\t\"./lt.js\": 377,\n\t\"./lv\": 378,\n\t\"./lv.js\": 378,\n\t\"./me\": 379,\n\t\"./me.js\": 379,\n\t\"./mi\": 380,\n\t\"./mi.js\": 380,\n\t\"./mk\": 381,\n\t\"./mk.js\": 381,\n\t\"./ml\": 382,\n\t\"./ml.js\": 382,\n\t\"./mn\": 383,\n\t\"./mn.js\": 383,\n\t\"./mr\": 384,\n\t\"./mr.js\": 384,\n\t\"./ms\": 385,\n\t\"./ms-my\": 386,\n\t\"./ms-my.js\": 386,\n\t\"./ms.js\": 385,\n\t\"./mt\": 387,\n\t\"./mt.js\": 387,\n\t\"./my\": 388,\n\t\"./my.js\": 388,\n\t\"./nb\": 389,\n\t\"./nb.js\": 389,\n\t\"./ne\": 390,\n\t\"./ne.js\": 390,\n\t\"./nl\": 391,\n\t\"./nl-be\": 392,\n\t\"./nl-be.js\": 392,\n\t\"./nl.js\": 391,\n\t\"./nn\": 393,\n\t\"./nn.js\": 393,\n\t\"./pa-in\": 394,\n\t\"./pa-in.js\": 394,\n\t\"./pl\": 395,\n\t\"./pl.js\": 395,\n\t\"./pt\": 396,\n\t\"./pt-br\": 397,\n\t\"./pt-br.js\": 397,\n\t\"./pt.js\": 396,\n\t\"./ro\": 398,\n\t\"./ro.js\": 398,\n\t\"./ru\": 399,\n\t\"./ru.js\": 399,\n\t\"./sd\": 400,\n\t\"./sd.js\": 400,\n\t\"./se\": 401,\n\t\"./se.js\": 401,\n\t\"./si\": 402,\n\t\"./si.js\": 402,\n\t\"./sk\": 403,\n\t\"./sk.js\": 403,\n\t\"./sl\": 404,\n\t\"./sl.js\": 404,\n\t\"./sq\": 405,\n\t\"./sq.js\": 405,\n\t\"./sr\": 406,\n\t\"./sr-cyrl\": 407,\n\t\"./sr-cyrl.js\": 407,\n\t\"./sr.js\": 406,\n\t\"./ss\": 408,\n\t\"./ss.js\": 408,\n\t\"./sv\": 409,\n\t\"./sv.js\": 409,\n\t\"./sw\": 410,\n\t\"./sw.js\": 410,\n\t\"./ta\": 411,\n\t\"./ta.js\": 411,\n\t\"./te\": 412,\n\t\"./te.js\": 412,\n\t\"./tet\": 413,\n\t\"./tet.js\": 413,\n\t\"./tg\": 414,\n\t\"./tg.js\": 414,\n\t\"./th\": 415,\n\t\"./th.js\": 415,\n\t\"./tl-ph\": 416,\n\t\"./tl-ph.js\": 416,\n\t\"./tlh\": 417,\n\t\"./tlh.js\": 417,\n\t\"./tr\": 418,\n\t\"./tr.js\": 418,\n\t\"./tzl\": 419,\n\t\"./tzl.js\": 419,\n\t\"./tzm\": 420,\n\t\"./tzm-latn\": 421,\n\t\"./tzm-latn.js\": 421,\n\t\"./tzm.js\": 420,\n\t\"./ug-cn\": 422,\n\t\"./ug-cn.js\": 422,\n\t\"./uk\": 423,\n\t\"./uk.js\": 423,\n\t\"./ur\": 424,\n\t\"./ur.js\": 424,\n\t\"./uz\": 425,\n\t\"./uz-latn\": 426,\n\t\"./uz-latn.js\": 426,\n\t\"./uz.js\": 425,\n\t\"./vi\": 427,\n\t\"./vi.js\": 427,\n\t\"./x-pseudo\": 428,\n\t\"./x-pseudo.js\": 428,\n\t\"./yo\": 429,\n\t\"./yo.js\": 429,\n\t\"./zh-cn\": 430,\n\t\"./zh-cn.js\": 430,\n\t\"./zh-hk\": 431,\n\t\"./zh-hk.js\": 431,\n\t\"./zh-tw\": 432,\n\t\"./zh-tw.js\": 432\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 475;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  public constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n\n  public async postFetchJSON(url:string,query:any) {\n      const postParameters = {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({query})\n      };\n\n      const response = await fetch(url, postParameters);\n      return response.json();\n  }\n\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        if (response.status === 400) {\n          apiLogger(response.json());\n        }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType, RequestCallBackFunction} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addQLApiRequest(url:string, query:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {query:query, variables: variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n  public addQLMutationRequest(url:string, mutation:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {mutation:mutation, variables:variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export type Invitation = {\n    from:string,\n    room:string,\n    message:string,\n    created:number,\n    userList:string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject:string,\n    attachment:any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type:InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {Invitation, InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n    protected chatReceivers:ChatReceiver[] = [];\n\n    public addChatReceiver(receiver:ChatReceiver):void {\n        this.chatReceivers.push(receiver);\n    }\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    private callbackForMessage(content:any):void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        }\n        catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    private callbackForLogin(message:any):void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n\n    private callbackForUserList(message:any):void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message:any):void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data:any):void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data:any):void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data:any):void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data:any):void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        }\n        catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content:any):void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data:any):void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData);\n        this.socket.on('login',this.callbackForLogin);\n        this.socket.on('logout',this.callbackForLogout);\n        this.socket.on('joinroom',this.callbackForJoinRoom);\n        this.socket.on('exitroom',this.callbackForExitRoom);\n        this.socket.on('invite',this.callbackForInvite);\n        this.socket.on('declineinvite',this.callbackForDeclineInvite);\n        this.socket.on('chat',this.callbackForChat);\n        this.socket.on('queue',this.callbackForQueue);\n        this.socket.on('userlist',this.callbackForUserList);\n    }\n\n    public login(username:string): void {\n        this.socket.emit('login',{username});\n    }\n\n    public logout(username:string):void {\n        this.socket.emit('logout',{username});\n    }\n\n    public joinChat(username:string, room:string, type:number):void {\n        this.socket.emit('joinroom',{username,room,type});\n    }\n\n    public leaveChat(username:string, room:string, type:number):void {\n        this.socket.emit('exitroom', {username,room,type});\n    }\n\n    public sendInvite(from:string, to:string, room:string, type:InviteType = InviteType.ChatRoom, requiresAcceptDecline:boolean = false,subject:string = '',attachment:any = {}) {\n        let inviteObj:any = {\n            from:from,\n            to:to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject:subject,\n            attachment:attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from:string, room:string, message:string,created:number,type:number,priority: Priority = Priority.Normal, attachment:any = {}) {\n        let messageObj:Message = {\n            from: from,\n            room: room,\n            message:message,\n            created:created,\n            priority:priority,\n            type:type,\n            attachment: attachment\n        }\n        this.socket.emit('chat',messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room:string,from:string,type:number) {\n        this.socket.emit('declineinvite',{room,from,type});\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1:any, item2:any):boolean {\n  return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1:any, item2:any):boolean {\n  return (item1.gameId === item2.gameId);\n}\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager{\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  public constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  forceResetForGet(stateName: string): void {\n  }\n\n  getConfiguredStateNames(): string[] {\n    return this.configuration;\n  }\n\n  hasCompletedRun(stateName: string): boolean {\n    return false;\n  }\n\n  // @ts-ignore\n  private configuration:string[] = [];\n\n  public initialise(config:string[]) {\n    this.configuration = config;\n  }\n\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport socketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver,ChatEmitter {\n    private static _instance: ChatManager;\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage:StateManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private currentUsername = '';\n    protected blockedList: string[] = [];\n    private static blockedListKey = 'im-board-blocked-list';\n    protected favouriteList: string[] = [];\n    private static favouriteListKey = 'im-board-favourite-list';\n    private unreadListener:UnreadMessageCountListener|null = null;\n\n\n    protected loggedInUsers: string[] = [];\n\n\n    protected chatListeners:ChatEventListener[];\n    protected chatUserListeners:ChatUserEventListener[];\n\n    public addChatEventHandler(receiver:ChatEventListener):void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver:ChatUserEventListener):void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public isUserLoggedIn(username:string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    private saveLogs():void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey+this.currentUsername,this.chatLogs,false);\n    }\n\n    private saveBlockedList():void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey+this.currentUsername,this.blockedList, false);\n    }\n\n    private saveFavouriteList():void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey+this.currentUsername,this.favouriteList, false);\n    }\n\n    public addUserToBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index,1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username:string):boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n\n    public addUserToFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index,1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username:string):boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList():string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList():string[] {\n        return [...this.blockedList];\n    }\n\n\n    public setCurrentUser(username:string):void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey+this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey+this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey+this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    private ensureChatLogExists(room:string):ChatLog {\n        let log:ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        }\n        else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username:string):ChatLog {\n        let foundLog:ChatLog|null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(),username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    private doesChatRoomExist(room:string) {\n        let index = this.chatLogs.findIndex((log:ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                socketManager.joinChat(this.getCurrentUser(), invite.room,InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        }\n        else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index,1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type:number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room,username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener:UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n\n    private addMessageToChatLog(log:ChatLog, message:Message) {\n        log.numOfNewMessages ++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        }\n        else {\n            this.saveLogs();\n        }\n    }\n\n    public touchChatLog(room:string):void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room:string):ChatLog|null {\n        let log:ChatLog|null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog:ChatLog, sender:string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    receiveMessage(message: Message,wasOffline:boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,wasOffline));\n        }\n        else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite:Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message:Message) => {\n           this.receiveMessage(message,true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(),room,InviteType.ChatRoom);\n    }\n\n    private removeChatLog(room:string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index,1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(),room,InviteType.ChatRoom);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            socketManager.joinChat(this.currentUsername,log.roomName,InviteType.ChatRoom);\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    declineInvite(room:string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.sendDeclineInvite(room, this.getCurrentUser(),InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string,type:InviteType = InviteType.ChatRoom,requiresAcceptDecline:boolean = false, subject:string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log:ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) =>  user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(),to, room,type,requiresAcceptDecline,subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority:Priority = Priority.Normal, attachment:any|undefined): Message|null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(),room, content, created,InviteType.ChatRoom, Priority.Normal,{});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent:Message = {\n            from:this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs():ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n\n    public startChatWithUser(username:string):string|null {\n        let roomName:string|null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName,InviteType.ChatRoom,false,'');\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport controller from \"../Controller\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        notifier.show('Room',`User ${username} has declined the invitation to join you.`,'info',7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        }\n        else {\n            // notify the user of the new chat\n            notifier.show('Chat Room',`User ${invite.from} has invited you.`,'info',7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener:ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n    public addUserListener(listener:ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username:string, isBlackedListed:boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        }\n        else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username:string, isFavourited:boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        }\n        else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username:string):boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username:string):boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog,wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from,displayMessage.message,'message',3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged in.`,'warning',5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged out.`,'priority',4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username:string):string|null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\",`You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","export enum Decorator  {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any|null;\n    timer: number,\n    data: any[]|null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config:QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollToBottomNow (element:HTMLElement):void {\n    if (element) {\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollToBottomSmooth (element:HTMLElement):void {\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n      });\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  scrollTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n\n  addAttributes(element:HTMLElement, attributes:any[]|undefined) {\n     if (attributes) {\n       attributes.forEach((attribute:any) => {\n          element.setAttribute(attribute[0],attribute[1]);\n       });\n     }\n  }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import StateChangeListener from \"../state/StateChangeListener\";\nimport {ScoreSheetController} from \"./ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport debug from 'debug';\nimport {ScoreSheet} from \"../AppTypes\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetView implements StateChangeListener{\n    private static _instance: ScoreSheetView;\n\n    public static getInstance(): ScoreSheetView {\n        if (!(ScoreSheetView._instance)) {\n            ScoreSheetView._instance = new ScoreSheetView();\n        }\n        return ScoreSheetView._instance;\n    }\n\n    private applicationView:any|null = null;\n\n    private thisEl:HTMLDivElement|null = null;\n    private boardGameTitleEl:HTMLHeadingElement|null = null;\n    private startStopTimer:HTMLButtonElement|null = null;\n    private timerEl:HTMLDivElement|null = null;\n    private endOrLeaveEl:HTMLButtonElement|null = null;\n    private scoreSheetEl:HTMLDivElement|null = null;\n\n    private table:Handsontable|null = null;\n\n    private controller:ScoreSheetController;\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n    }\n\n    public onDocumentLoaded(applicationView:any) {\n        this.applicationView = applicationView;\n        this.resetDisplay();\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(this.applicationView.state.stateNames.scoreSheet,this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click',this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click',this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover',(event) => {event.preventDefault()});\n            this.thisEl.addEventListener('drop',this.handleUserDrop);\n        }\n    }\n\n    handleEndOrLeave(event:MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        }\n        else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event:MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        }\n        else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event:Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.applicationView.state.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[this.applicationView.state.ui.draggable.draggedType] === this.applicationView.state.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer,'btn-warning',false);\n            browserUtil.addRemoveClasses(this.startStopTimer,'btn-success',true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = this.applicationView.state.ui.scoreSheet.dom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n    }\n\n    private createTimerDisplay(timer:number):string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        }\n        else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer/3600);\n                let minutes = Math.floor(timer/60);\n                let seconds = timer - (hours*3600) - (minutes*60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    }\n                    else {\n                        result += `${minutes}:`\n                    }\n                }\n                else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    }\n                    else {\n                        result += `${seconds}`;\n                    }\n                }\n                else {\n                    result += '00';\n                }\n            }\n            else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    }\n                    else {\n                        result += `${timer}`;\n                    }\n                }\n                else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n\n    public updateTimer(time:number, isPaused:boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer,'btn-warning',false);\n                browserUtil.addRemoveClasses(this.startStopTimer,'btn-success',true);\n            }\n            else {\n                this.startStopTimer.innerHTML = 'Pause   ' + this.applicationView.state.ui.scoreSheet.dom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer,'btn-warning',true);\n                browserUtil.addRemoveClasses(this.startStopTimer,'btn-success',false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        let scoreSheet:ScoreSheet = newValue;\n        ssvLogger(`Processing new state`);\n        ssvLogger(scoreSheet);\n        if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n        // update the board game name\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n        // update the table\n        if (this.table) {\n            // process the data in the state change, will be array of array (rows) into what the table wants\n            let tableData:any = [];\n            // @ts-ignore\n            scoreSheet.data.forEach((row:any[],rowIndex:number) => {\n                row.forEach((column:any, columnIndex:number) => {\n                    tableData.push([rowIndex, columnIndex, column]);\n                });\n            });\n            ssvLogger(`Table data is `);\n            ssvLogger(tableData);\n            // @ts-ignore\n            this.table.setDataAtCell(tableData,ScoreSheetController.SOURCE_View);\n\n        }\n        else {\n            // create a new table\n\n            if (this.scoreSheetEl) {\n                scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                this.table = new Handsontable(\n                    this.scoreSheetEl,\n                    scoreSheet.sheetLayoutOptions);\n                // @ts-ignore\n                this.table.addHook('afterChange',this.controller.userChangedValue);\n            }\n        }\n\n\n        // update the timer\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n\n\n    }\n\n    public getTableData():any[] {\n        if (this.table) {\n            return this.table.getData();\n        }\n        else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n}","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    private constructor() {}\n\n    private getDefaultScoreSheetTemplate(boardGame:any):any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders:false,\n            rowHeaders:false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize:false,\n            manualRowResize:false,\n            selectionMode:'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn:0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame:any):any[] {\n        return [\n            ['P 1','P 2','P 3','P 4','P 5','P 6','P 7'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n        ];\n    }\n\n\n    public getScoreSheetTemplate(boardGame:any):any|null {\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame:any):any[]|null {\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    private getDefaultSaveData(scoreSheet:ScoreSheet):any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    public getSaveData(boardGame:any,scoreSheet:ScoreSheet):any {\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n}","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../socket/Types\";\nimport {ChatReceiver} from \"../socket/ChatReceiver\";\nimport notifier from \"../notification/NotificationManager\";\nimport {ScoreSheetView} from \"./ScoreSheetView\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport uuid from \"../util/UUID\";\nimport socketManager from \"../socket/SocketManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport moment from \"moment\";\nimport controller from \"../Controller\";\nimport {TemplateManager} from \"../template/TemplateManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    public static SOURCE_View:string = 'ssv';\n\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n\n    private applicationView: any | null = null;\n    private currentScoreRoom: string|null = null;\n    private currentlySelectedBoardGame: any|null = null;\n    private currentScoreSheet: ScoreSheet|null = null;\n    private currentUsername:string = '';\n    private isRoomCreator:boolean = false;\n    private stateManager:StateManager;\n    private currentUsersInScoreSheet:string[] = [];\n    private intervalTimer:number = -1;\n\n\n    private constructor() {\n        this.stateManager = new BrowserStorageStateManager(true);\n        socketManager.addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    private reset():void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    receiveLogin(username: string): void {}\n    receiveLogout(username: string): void {}\n\n    public setCurrentUser(username:string):void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView:any) {\n        this.applicationView = applicationView;\n    }\n\n    private isLoggedIn():boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                socketManager.sendDeclineInvite(invite.room,this.getCurrentUser(),InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                socketManager.sendDeclineInvite(invite.room,this.getCurrentUser(),InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            };\n        }\n        // notify the user of the new chat\n        notifier.show('Score Sheet',`Joining score sheet`,'info',7000);\n        socketManager.joinChat(this.getCurrentUser(),invite.room,InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        controller.addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetView.getInstance().stateChanged(\"\",\"\",this.currentScoreSheet);\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message:Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite:Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n               this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type:number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                notifier.show('Score Sheet',`User ${username} declined the invitation.`,'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n            this.addUserToScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name,`User ${users.username} joined.`);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index,1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name,`User ${users.username} left.`);\n    }\n\n    receiveUserList(users: string[]): void {} // will be managed in the transfer of sheet data\n\n\n    public endScoreSheet():void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet,true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet:ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame,scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            controller.scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n\n\n    public startScoreSheet(boardGame:any):void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer:0,\n                timerGoing:false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished:false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet,this.currentScoreSheet,true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) socketManager.joinChat(this.getCurrentUser(),this.currentScoreRoom,InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet():boolean {\n        let result = false;\n        if (this.currentScoreRoom) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username:string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame) ) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                socketManager.sendInvite(this.getCurrentUser(),username,this.currentScoreRoom,InviteType.ScoreSheet,true,this.currentlySelectedBoardGame.name,{scoreSheet: this.currentScoreSheet,boardGame:this.currentlySelectedBoardGame});\n            }\n            else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet:ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer)?scoreSheet.timer:this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            }\n                            else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        }\n                        else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            }\n                            else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet,true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner():boolean {\n        return this.isRoomCreator;\n    }\n\n    private saveCurrentScoreSheet(scoreSheet:ScoreSheet, informListeners:boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet,this.currentScoreSheet,informListeners);\n    }\n\n    public createScoreSheetFromTable():ScoreSheet|null {\n        let scoreSheet:ScoreSheet|null = null;\n        let tableData = ScoreSheetView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame)?TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame):null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet:ScoreSheet,isFinished:boolean = false):void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            socketManager.sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    protected addUserToScoreSheet(username:string):void {\n        // TO DO\n    }\n\n    protected removeUserFromScoreSheet(username:string):void {\n        // TO DO\n    }\n\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer ++;\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer,!this.currentScoreSheet.timerGoing);\n            }\n            else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer,!this.currentScoreSheet.timerGoing);\n                }\n            }\n        },1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer,true);\n        }\n        this.intervalTimer = -1;\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet,false);\n            }\n        }\n    }\n\n    public userChangedValue(value:any,source:string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet:ScoreSheet|null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            this.saveCurrentScoreSheet(scoreSheet,false);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet,false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                socketManager.leaveChat(this.getCurrentUser(),this.currentScoreRoom,InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n}\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {Invitation, Message} from \"./socket/Types\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n\n            // load the users\n            this.getStateManager().getStateByName(this.config.stateNames.users);\n        }\n        let currentGameList:any[] = this.displayedBoardGamesStateManager.getStateByName(this.config.stateNames.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    private cleanupBoardGameState(boardGames:any[]):any[]{ // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList:any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                }\n                else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index,1,boardGame);\n                    }\n                    else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            }\n            else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.getMyBoardGameCollection.queryString, {userId:this.getLoggedInUserId()}, this.callbackGetCollection, this.config.stateNames.boardGames, false);\n        }\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.bggSearchCallById.queryString, {gameId:boardGame.gameId}, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    private removeBoardGameFromState(boardGame:any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index,1);\n            this.applicationView.setState({boardGames:currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentBoardGamesOnDisplay,false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n\n\n\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game:any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n                this.applicationView.setState({boardGames:currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(this.config.stateNames.boardGames,updatingBoardGame,isSameGame,false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[this.config.apis.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame:any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n                let index = currentGameList.findIndex((game:any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >=0}`);\n                if (index >= 0) {\n                    cLoggerDetail(`in current state, replacing`);\n                    // replace the current entry\n                    currentGameList.splice(index,1,boardGame);\n                }\n                else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames:currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentGameList,false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame:any,scoreSheet:any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {};\n\n            if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n                downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                    {userId: this.getCurrentUser(), boardGameId: boardGame.id,sheet:scoreSheet},\n                    cb,\n                    this.config.stateNames.scoreSheet,\n                    false);\n        }\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(this.config.stateNames.boardGames,boardGame,true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                this.config.stateNames.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                        }\n                        else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                this.config.stateNames.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected abstract getDragData(event: DragEvent): any;\n    protected abstract getIdForStateItem(name: string, item: any): string;\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n    protected abstract getBadgeValue(name:string, item:any): number;\n    protected abstract getBackgroundImage(name:string,item:any) :string;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource:any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl:HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl:HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBackgroundImage) {\n                let imgEl = this.document.createElement(domConfig.imgElementType);\n                browserUtil.addRemoveClasses(imgEl,domConfig.imgClasses);\n                imgEl.setAttribute('src',this.getBackgroundImage(name,item));\n                childEl.appendChild(imgEl);\n            }\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name,item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    contentEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl:HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type','button');\n                browserUtil.addRemoveClasses(deleteButtonEl,domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length() > 0) {\n                        domConfig.innerText = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl,domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click',(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                contentEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name,item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n}\n","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {//414,768,1024\n    let size = this.uiPrefs.view.expandedSize;\n    if (window.innerWidth < 769) {\n      size = '50%';\n    }\n    if (window.innerWidth < 415) {\n      size = '100%';\n    }\n    this.showHide(size);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone:HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event:Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n             switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event:Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {event.preventDefault();});\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        const roomName = NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event,roomName);\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    deleteFavouriteUser(user:any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user:any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user:any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches,user,isSame,true);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../socket/Types\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    private leaveChat(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('',{});\n    }\n\n    handleUserDrop(event:Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username,this.selectedChatLog.roomName);\n            }\n        }\n\n    }\n\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('',{})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage:Message|null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent,Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {csLoggerDetail('Dragged over'); if (this.selectedChatLog) event.preventDefault();});\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click',this.leaveChat);\n\n        this.checkCanComment();\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        }\n        else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl:HTMLElement|null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    public selectChatRoom(room:string) {\n        csLoggerDetail(`Chat Log with id ${room} selected`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        this.createResultsForState(name, newState);\n        this.checkCanComment();\n    }\n\n    getDragData(event: DragEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog|null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('',{});\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameGame} from '../util/EqualityFunctions';\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    // @ts-ignore\n    private formEl:HTMLElement;\n    // @ts-ignore\n    private queryEl:HTMLInputElement;\n    // @ts-ignore\n    private buttonEl:HTMLButtonElement;\n\n\n    private changeSearchButton(enable:boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        }\n        else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\",\"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event:Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, {queryString:queryText}, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n    public handleSearchResultsCB(data:any,status:number,associatedStateName:string):void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults,data.data.findBoardGames,true);\n        }\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit',this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n    return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults,{gameId:parseInt(boardGameId)},isSameGame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame:any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSameGame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSameGame,true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler,startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 ml-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n            </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-primary ml-1' onClick={showScoresHandler}>{scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href=\"https://boardgamegeek.com/boardgame/${boardGame.gameId}\" target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image} alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?favouriteIcon:''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?scoreBadge:''}<br/>  {(controller.isLoggedIn())?((boardGame.decorator === Decorator.Persisted)?deleteButton:addButton):deleteButton}</h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                    <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                        <p className=\"card-text\">Loading...</p>\n                        <p className=\"card-text\">\n                            <small className=\"text-muted\">\n                                Loading...\n                            </small>\n                        </p>\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        Loading...\n                    </div>\n                </div>\n            </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport moment from \"moment\";\n\n\n\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetSidebarView extends SidebarView {\n    protected selectedBoardGame: any | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.scoreSheetSideBar, applicationView.state.uiPrefs.scoreSheetSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.updateView('', {});\n    }\n\n    public setSelectedBoardGame(boardGame:any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.updateView('',boardGame);\n        }\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return this.selectedBoardGame.boardGameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return this.selectedBoardGame.boardGameId;\n    }\n\n    /*\n        <h5 class=\"card-title\">Card title</h5>\n    <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n    <p class=\"card-text\">Last updated 3 mins ago</p>\n     */\n    getDisplayValueForStateItem(name: string, item: any) {\n        let buffer = '';\n        /*\n        type ScoreSheet {\n            id:Int!\n            players: [String],\n            scores: [Int],\n            jsonData: String,\n            createdOn: Int\n        }\n        */\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn,'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n\n    eventClickItem(event: MouseEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        throw new Error('Method not implemented.');\n    }\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with selected board game`);\n        if (newState) {\n            if (newState.scoresheets) {\n                this.createResultsForState(name, newState.scoresheets);\n            }\n        }\n\n    }\n\n    getDragData(event: DragEvent) {}\n\n\n\n}\n\nexport default ScoreSheetSidebarView;\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSearchSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {ScoreSheetView} from \"./component/ScoreSheetView\";\nimport ScoreSheetSidebarView from \"./component/ScoreSheetSidebarView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n    // @ts-ignore\n    private scoreSheetView: ScoreSheetView;\n    // @ts-ignore\n    private scoresView: ScoreSheetSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement|null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            scoreSheet: {\n                room: '',\n                boardGameName: '',\n                sheetLayoutOptions: {},\n                timer: 0,\n                sheetData: {}\n            },\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults',\n                scoreSheet: 'scoreSheet'\n            },\n            apis: {\n                login: '/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n                bggSearchCallById: {\n                    queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n                    resultName:'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {findUsers {id, username}}',\n                    resultName: 'findUsers',\n                },\n                addToMyCollection: {\n                    queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n                    resultName: 'addToMyCollection',\n                },\n                removeFromMyCollection: {\n                    queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n                getMyBoardGameCollection: {\n                    queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n                    resultName: 'getMyBoardGameCollection',\n                },\n                addScoreSheetToBoardGame: {\n                    queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n                    resultName: 'addScoreSheetToBoardGame'\n                }\n\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyCollection: 'navigationItemMyCollection',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat',\n                    showScoreSheet: 'navigationItemScoreSheet',\n\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n                scoreSheetSideBar: {\n                    dom: {\n                        sideBarId: 'scoreSheetSidebar',\n                        resultsId: 'scoreSheets',\n                        resultsElementType: 'div',\n                        resultsElementAttributes: [\n                            ['style','height:300px; width:120px']\n                        ],\n                        resultsClasses: 'text-white bg-info col-sm-6 col-md-3 col-lg-2 mt-1 mr-2',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'scoreSheet',\n                        modifierClassNormal: '',\n                        modifierClassInactive: '',\n                        modifierClassActive: '',\n                        modifierClassWarning: '',\n                        iconNormal: ' ',\n                        iconInactive: ' ',\n                        iconActive: ' ',\n                        iconWarning: ' ',\n                        isDraggable: false,\n                        isClickable: false,\n                        isDeleteable: false,\n                        resultContentDivClasses: 'card-img-overlay',\n                        resultContentTextElementType: 'div',\n                        resultContentTextClasses: 'ml-2',\n                        hasBackgroundImage: true,\n                        imgElementType: 'img',\n                        imgClasses: 'score-card-img',\n                    },\n                },\n                scoreSheet: {\n                    dom: {\n                        dropZone: \"scoreSheetZone\",\n                        boardGame: \"selectedBoardGame\",\n                        startStopTimer: \"startStopTimer\",\n                        timer: \"timerDisplay\",\n                        end: \"leaveScoreSheet\",\n                        scoreSheet: \"scoreSheet\",\n                        iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n                        iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n                        iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n                        iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n\n\n                    }\n                }\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                scoreSheetSideBar: {\n                    view: {\n                        location: 'bottom',\n                        expandedSize: '50%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    private handleDragOver(event:DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event:Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    public addBoardGameToDisplay(draggedObject:any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames:any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index:number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            controller.removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event:MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            }\n            else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n\n    handleDeleteBoardGame(event:MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (controller.isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(this.state.controller.events.boardGames.eventDataKeyId,id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    }\n                    else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        controller.removeBoardGameFromDisplay(boardGame);\n\n                    }\n                }\n                else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this,document,controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this,document,controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this,document,controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        this.scoresView = new ScoreSheetSidebarView(this,document,controller.getStateManager());\n        this.scoresView.onDocumentLoaded();\n\n\n        this.scoreSheetView = ScoreSheetView.getInstance();\n        this.scoreSheetView.onDocumentLoaded(this);\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(this.state.ui.navigation.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection:boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-none',false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-block', false);\n        }\n        else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n    handleShowCollection(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event:Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowScores(event:Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoresView.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(event:Event,roomName:string|null) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event:Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\nlocalStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts' ;\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n"],"sourceRoot":""}