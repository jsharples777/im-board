{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/AppTypes.ts","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BoardGameSerachSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","boardGames","selectedEntry","stateNames","users","scores","recentUserSearches","bggSearchResults","apis","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","ui","draggable","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyFavourites","boardGameSearchId","userSearchId","chatId","chatSideBar","dom","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultDataKeyId","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","extra","fastSearchInputId","boardGameSearchSideBar","formId","queryId","buttonId","uiPrefs","blogEntry","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","connectToApplication","window","localStorage","event","preventDefault","draggedObjectJSON","dataTransfer","getData","draggedObject","JSON","parse","addBoardGameToDisplay","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","games","map","entry","index","removeBoardGameFromDisplay","addBoardGameToCollection","handleDeleteBoardGame","id","getAttribute","removeBoardGameFromCollection","hideAllSideBars","target","setAttribute","parseInt","currentBoardGamesOnDisplay","findIndex","game","boardGame","decorator","Decorator","Persisted","name","year","componentDidMount","chatView","ChatSidebarView","document","getStateManager","onDocumentLoaded","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","thisEl","initialise","eventHide","href","eventShow","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","graphSM","apiURL","find","create","destroy","update","findAll","data","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncDBSM","asyncQLSM","socketListerDelegate","socketManager","chatManager","ChatManager","chatNotificationController","NotificationController","getServerAPIURL","result","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","currentListOfGames","value","query","downloader","callbackBoardGameDetails","status","boardGameDetails","regex","removeBoardGameFromState","findBoardGameInStateFromEvent","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","changedEntry","commentOn","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventStartDrag","createResultForItem","dataSource","domConfig","legacyDataKeyId","childEl","browserUtil","textEl","badgeValue","badgeEl","deleteButtonEl","iconEl","displayText","modifier","secondModifier","createResultsForState","viewEl","newState","item","vLogger","vLoggerDetail","changeSearchButton","enable","handleSearch","queryText","handleSearchResultsCB","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","boardGameId","updateView","getDragData","eventDeleteClickItem","getBadgeValue","SidebarView","beLogger","BoardGameView","showScoresHandler","removeFromDisplayHandler","addToCollectionHandler","removeFromCollectionHandler","removeButton","addButton","deleteButton","favouriteIcon","Incomplete","image","Complete","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","csLogger","csLoggerDetail","selectedChatLog","leaveChat","handleUserDrop","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","messageEl","checkCanComment","addChatMessage","chatMessageEl","messageSenderEl","moment","clearChatLog","reRenderChatMessages","chatLog","renderChatLog","room","handleChatLogsUpdated","handleChatStarted","handleOfflineMessagesReceived","sidePanelEl","closeButtonEl","showHide","size","stateManager","handleFavouriteUserDrop","handleBlockedUserDrop","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","fastSearchEl","$","userId","eventUserSelected","label","reRenderView","myUsername","fastSearchValues","searchValue","source","disabled","minLength","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","fetch","response","fetchJSON","callback","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","type","RequestType","params","associatedStateName","addApiRequest","requestId","uuid","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","parentEl","UserStatus","cmLogger","currentUsername","blockedList","favouriteList","loggedInUsers","receiveUserList","listener","blocked","favourite","savedLogs","roomName","messages","lastViewed","numOfNewMessages","foundLog","receiveJoinedRoom","created","joinDateTime","from","priority","receivedLeftRoom","receiveInvitation","invite","receiveLogin","receiveLogout","receiveMessage","wasOffline","receiveQueuedInvites","invites","receiveQueuedMessages","joinChat","logout","sendInvite","sendMessage","sent","chatLogKey","blockedListKey","favouriteListKey","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","SocketManager","setChatReceiver","callbackForMessage","dataObj","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForData","setListener","io","to","getUserList","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","filter","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","getInstance","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","configuration","results","config","setCompletedRun","runsComplete","dataAttribute","jsonRequest","mutation","Error","msManager","apiSMLogger","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,gBAAU,EAAE,EAHH;AAITC,mBAAa,EAAE,EAJN;AAKTC,gBAAU,EAAE;AACRC,aAAK,EAAE,OADC;AAERH,k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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSerachSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            selectedEntry: {},\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults'\n            },\n            apis: {\n                login: '/api/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query {\\n' +\n                    '  findBoardGames(query: \"@\") {\\n' +\n                    '    id, name, year\\n' +\n                    '  }\\n' +\n                    '} ',\n                bggSearchCallById: {\n                    queryString: 'query {\\n' +\n                            '  getBoardGameDetails(id: {id:@}) {\\n' +\n                        '    id,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories  \\n' +\n                        '  }\\n' +\n                        '}',\n                    resultName:'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {\\n  findUsers {\\n    id, username\\n  }\\n}',\n                    resultName: 'findUsers',\n                },\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyFavourites: 'navigationItemShowMyFavourites',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat'\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    private handleDragOver(event:DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event:Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    public addBoardGameToDisplay(draggedObject:any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames:any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index:number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                removeFromDisplayHandler={controller.removeBoardGameFromDisplay}\n                showScoresHandler={() => {}}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete with id ${id}`);\n        controller.removeBoardGameFromCollection(event);\n    }\n\n    handleDeleteBoardGame(event:MouseEvent) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,id);\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.id === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                }\n                else {\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(event);\n                }\n            }\n        }\n    }\n\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this,document,controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this,document,controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this,document,controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyFavourites).addEventListener('click', () => {});\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.chatId).addEventListener('click', this.handleShowChat);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    handleShowUserSearch(event:Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowChat(event:Event) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n    }\n\n    handleShowBGGSearch(event:Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts socket-ts socket-listener notification-controller chat-manager chat-sidebar chat-sidebar:detail';\nlocalStorage.debug = 'app controller-ts api-ts board-game-search-sidebar board-game-search-sidebar:detail view-ts:boardgameview';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","export enum Decorator  {\n    Incomplete,\n    Complete,\n    Persisted\n}\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected userStateManager: StateManager;\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            let chatNotificationController = NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            chatManager.login();\n        }\n\n        // load the users\n        this.userStateManager.getStateByName(this.config.stateNames.users);\n        //downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.findUsers, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.id === boardGame.id);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        let query = this.config.apis.bggSearchCallById.queryString;\n        query = query.replace(/@/, boardGame.id);\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n\n\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.id === boardGameDetails.id);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.Complete;\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    private removeBoardGameFromState(boardGame:any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.id === boardGame.id);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index,1);\n            this.applicationView.setState({boardGames:currentBoardGamesOnDisplay});\n        }\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.id === id);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        return boardGame;\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        alert(\"Implement persist the board game\");\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(event: MouseEvent) {\n        cLogger(`Handling Remove Board Game from collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        alert('implement delete board game from persistence');\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // in collection, should not be removed from display\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected abstract getDragData(event: DragEvent): any;\n    protected abstract getIdForStateItem(name: string, item: any): string;\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n    protected abstract getBadgeValue(name:string, item:any): number;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource:any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl:HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl:HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name,item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    contentEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl:HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type','button');\n                browserUtil.addRemoveClasses(deleteButtonEl,domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length() > 0) {\n                        domConfig.innerText = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl,domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click',(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                contentEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name,item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n}\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame} from '../util/EqualityFunctions';\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    // @ts-ignore\n    private formEl:HTMLElement;\n    // @ts-ignore\n    private queryEl:HTMLInputElement;\n    // @ts-ignore\n    private buttonEl:HTMLButtonElement;\n\n\n    private changeSearchButton(enable:boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        }\n        else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\",\"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>Loading...';\n        }\n    }\n\n    private handleSearch(event:Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n        vLoggerDetail(`query string is now ${query}`);\n\n        // replace the @ symbol with the query\n        const regex = /@/;\n\n        query = query.replace(regex,queryText);\n        vLoggerDetail(`query string is now ${query}`);\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n    public handleSearchResultsCB(data:any,status:number,associatedStateName:string):void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults,data.data.findBoardGames,true);\n        }\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit',this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n    return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults,{id:parseInt(boardGameId)},isSame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame:any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSame,true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, removeFromDisplayHandler,addToCollectionHandler, removeFromCollectionHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.id}`);\n\n        let removeButton =\n                <button type=\"button\"\n                        className=\"btn-info btn-sm rounded p-1 mr-2\"\n                        board-game-id={boardGame.id} onClick={removeFromDisplayHandler}>\n                    &nbsp;&nbsp;Remove &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        let addButton =\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                    board-game-id={boardGame.id} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                    board-game-id={boardGame.id} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n        let favouriteIcon = <div className=\"card-img-overlay\">\n                                <i className=\"fas fa-star\"></i>\n                            </div>\n\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src={boardGame.image} alt=\"Card image cap\"></img>\n                        {(boardGame.decorator === Decorator.Persisted)?favouriteIcon:''}\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year})<br/>{(boardGame.decorator === Decorator.Complete)?removeButton:''}  {(boardGame.decorator === Decorator.Persisted)?removeButton:addButton}</h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                    <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                        <p className=\"card-text\">Loading...</p>\n                        <p className=\"card-text\">\n                            <small className=\"text-muted\">\n                                Loading...\n                            </small>\n                        </p>\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        Loading...\n                    </div>\n                </div>\n            </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatLog, ChatManager} from \"../socket/ChatManager\";\nimport {Message} from \"../socket/ChatReceiver\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    private leaveChat(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('',{});\n    }\n\n    handleUserDrop(event:Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username,this.selectedChatLog.roomName);\n            }\n        }\n\n    }\n\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('',{})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage:Message|null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent);\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.sendMessageButton.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {csLoggerDetail('Dragged over'); if (this.selectedChatLog) event.preventDefault();});\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click',this.leaveChat);\n\n        this.checkCanComment();\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        }\n        else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl:HTMLElement|null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        this.createResultsForState(name, newState);\n        this.checkCanComment();\n    }\n\n    getDragData(event: DragEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog|null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('',{});\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {//414,768,1024\n    let size = this.uiPrefs.view.expandedSize;\n    console.log(window.innerWidth);\n    if (window.innerWidth < 769) {\n      size = '50%';\n    }\n    if (window.innerWidth < 415) {\n      size = '100%';\n    }\n    console.log(size);\n    this.showHide(size);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone:HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event:Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n             switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event:Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {event.preventDefault();});\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event);\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    deleteFavouriteUser(user:any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user:any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user:any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches,user,isSame,true);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n\n  public async postFetchJSON(url:string,query:any) {\n      const postParameters = {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({query})\n      };\n\n      const response = await fetch(url, postParameters);\n      return response.json();\n  }\n\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType, RequestCallBackFunction} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addQLApiRequest(url:string, query:string, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {query},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport moment from \"moment\";\n\nimport {ChatReceiver, Invitation, JoinLeft, Message} from \"./ChatReceiver\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport socketManager from \"./SocketManager\";\nimport {ChatEventListener, ChatUserEventListener} from \"./ChatEventListener\";\nimport uuid from \"../util/UUID\";\n\nexport type ChatLog = {\n    roomName: string,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver,ChatEmitter {\n    private static _instance: ChatManager;\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage:StateManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private currentUsername = '';\n    protected blockedList: string[] = [];\n    private static blockedListKey = 'im-board-blocked-list';\n    protected favouriteList: string[] = [];\n    private static favouriteListKey = 'im-board-favourite-list';\n\n\n    protected loggedInUsers: string[] = [];\n\n\n    protected chatListeners:ChatEventListener[];\n    protected chatUserListeners:ChatUserEventListener[];\n\n    public addChatEventHandler(receiver:ChatEventListener):void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver:ChatUserEventListener):void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.setChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public isUserLoggedIn(username:string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    private saveLogs():void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey+this.currentUsername,this.chatLogs,false);\n    }\n\n    private saveBlockedList():void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey+this.currentUsername,this.blockedList, false);\n    }\n\n    private saveFavouriteList():void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey+this.currentUsername,this.favouriteList, false);\n    }\n\n    public addUserToBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index,1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username:string):boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n\n    public addUserToFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index,1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username:string):boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList():string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList():string[] {\n        return [...this.blockedList];\n    }\n\n\n    public setCurrentUser(username:string):void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey+this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey+this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey+this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    private ensureChatLogExists(room:string):ChatLog {\n        let log:ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        }\n        else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username:string):ChatLog {\n        let foundLog:ChatLog|null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(),username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            let chatLog:ChatLog = this.ensureChatLogExists(invite.room);\n            // add the inviter to the user list for the room, if not already added\n            if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n            this.saveLogs();\n            cmLogger(`Joining chat ${invite.room}`);\n            cmLogger(invite);\n            socketManager.joinChat(this.getCurrentUser(),invite.room);\n            this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n        }\n        else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index,1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    private addMessageToChatLog(log:ChatLog, message:Message) {\n        log.numOfNewMessages ++;\n        log.messages.push(message);\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        }\n        else {\n            this.saveLogs();\n        }\n    }\n\n    public touchChatLog(room:string):void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n        this.saveLogs();\n    }\n\n    public getChatLog(room:string):ChatLog|null {\n        let log:ChatLog|null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message,wasOffline:boolean = false): void {\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,wasOffline));\n        }\n        else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite:Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message:Message) => {\n           this.receiveMessage(message,true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(),room);\n    }\n\n    private removeChatLog(room:string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index,1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(),room);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            socketManager.joinChat(this.currentUsername,log.roomName);\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    sendInvite(to: string, room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log:ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) =>  user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(),to, room);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority:number = 0): Message|null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(),room, content, created);\n\n        // add the message to the chat log\n        let sent:Message = {\n            from:this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs():ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n\n    public startChatWithUser(username:string) {\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName);\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName);\n        }\n    }\n}\n","import {ChatLog, ChatManager} from \"./ChatManager\";\nimport {ChatEventListener, ChatUserEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {Message} from \"./ChatReceiver\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener,ChatUserEventListener {\n    private static _instance: NotificationController;\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    private doNotDisturb:boolean = false;\n    private chatManager:ChatManager;\n    private chatListeners:ChatEventListener[];\n    private chatUserListeners:ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public addListener(listener:ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n    public addUserListener(listener:ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username:string, isBlackedListed:boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        }\n        else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username:string, isFavourited:boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        }\n        else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username:string):boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username:string):boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog,wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from,displayMessage.message,'message',3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged in.`,'warning',5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged out.`,'priority',4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username:string) {\n        ChatManager.getInstance().startChatWithUser(username);\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\",`You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n    protected chatReceiver:ChatReceiver|null;\n\n    public setChatReceiver(receiver:ChatReceiver):void {\n        this.chatReceiver = receiver;\n    }\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceiver = null;\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n    }\n\n    private callbackForMessage(content:any):void {\n        sDebug(`Received message : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    private callbackForLogin(message:any):void {\n        sDebug(`Received login : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogin(message);\n    }\n\n\n    private callbackForUserList(message:any):void {\n        sDebug(`Received user list : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveUserList(message);\n    }\n\n    private callbackForLogout(message:any):void {\n        sDebug(`Received logout : ${message}`);\n        if (this.chatReceiver === null) return;\n        this.chatReceiver.receiveLogout(message);\n    }\n\n    private callbackForJoinRoom(data:any):void {\n        sDebug(`Received joined room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveJoinedRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data:any):void {\n        sDebug(`Received left room : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receivedLeftRoom(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data:any):void {\n        sDebug(`Received invite : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceiver.receiveInvitation(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content:any):void {\n        sDebug(`Received chat : ${content}`);\n        if (this.chatReceiver === null) return;\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceiver.receiveMessage(dataObj);\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data:any):void {\n        sDebug(`Received queued items : ${data}`);\n        if (this.chatReceiver === null) return;\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceiver.receiveQueuedInvites(dataObj.invites);\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceiver.receiveQueuedMessages(dataObj.messages);\n            }\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData);\n        this.socket.on('login',this.callbackForLogin);\n        this.socket.on('logout',this.callbackForLogout);\n        this.socket.on('joinroom',this.callbackForJoinRoom);\n        this.socket.on('exitroom',this.callbackForExitRoom);\n        this.socket.on('invite',this.callbackForInvite);\n        this.socket.on('chat',this.callbackForChat);\n        this.socket.on('queue',this.callbackForQueue);\n        this.socket.on('userlist',this.callbackForUserList);\n    }\n\n    public login(username:string): void {\n        this.socket.emit('login',{username});\n    }\n\n    public logout(username:string):void {\n        this.socket.emit('logout',{username});\n    }\n\n    public joinChat(username:string, room:string):void {\n        this.socket.emit('joinroom',{username,room});\n    }\n\n    public leaveChat(username:string, room:string):void {\n        this.socket.emit('exitroom', {username,room});\n    }\n\n    public sendInvite(from:string, to:string, room:string) {\n        this.socket.emit('invite', {from,to,room});\n    }\n\n    public sendMessage(from:string, room:string, message:string,created:number) {\n        this.socket.emit('chat',{from, room, message,created});\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager{\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  public constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  forceResetForGet(stateName: string): void {\n  }\n\n  getConfiguredStateNames(): string[] {\n    return this.configuration;\n  }\n\n  hasCompletedRun(stateName: string): boolean {\n    return false;\n  }\n\n  // @ts-ignore\n  private configuration:string[] = [];\n\n  public initialise(config:string[]) {\n    this.configuration = config;\n  }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config:QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  public constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollToBottomNow (element:HTMLElement):void {\n    if (element) {\n      element.scrollTop = element.scrollHeight - element.clientHeight;\n    }\n  }\n\n  scrollToBottomSmooth (element:HTMLElement):void {\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n      });\n      element.scrollTop = element.scrollHeight - element.clientHeight;\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  scrollTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n\n  addAttributes(element:HTMLElement, attributes:any[]|undefined) {\n     if (attributes) {\n       attributes.forEach((attribute:any) => {\n          element.setAttribute(attribute[0],attribute[1]);\n       });\n     }\n  }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1:any, item2:any):boolean {\n  return (item1.username === item2.username);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}