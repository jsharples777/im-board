{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./node_modules/handsontable/node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/state/StateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/util/UUID.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/socket/Types.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/AppTypes.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/template/TemplateManager.ts","webpack:///./src/component/ScoreSheetView.ts","webpack:///./src/component/CallManager.ts","webpack:///./src/component/ScoreSheetController.ts","webpack:///./src/Controller.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/BoardGameSearchSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/ScoreSheetSidebarView.ts","webpack:///./src/App.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","stateEventType","smLogger","debug","suppressEventEmits","this","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","foundIndex","stateChangeListeners","findIndex","element","changeListenersForName","index","listener","addChangeListenerForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","AbstractStateManager","forceSaves","managerName","state","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","item","updateItemInState","msManager","getInstance","MemoryBufferStateManager","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","RequestType","queueType","apiLogger","postFetchJSON","postParameters","method","headers","body","JSON","query","fetch","url","response","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","fetchJSON","callback","getUniqueId","replace","Math","v","dlLogger","downloader","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","type","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","uuid","jsonRequest","managerRequest","originalRequest","priorityChangeListener","handleEventAddToQueue","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","apiUtil","apiSMLogger","RESTApiStateManager","configuration","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","getConfiguredStateNames","results","config","hasCompletedRun","bHasCompletedRun","setCompletedRun","forceResetForGet","runsComplete","getConfigurationForStateName","stateObj","stateName","serverURL","api","isActive","status","Priority","InviteType","sDebug","chatReceivers","callbackForMessage","callbackForData","callbackForLogin","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForUserList","callbackForDeclineInvite","addChatReceiver","setListener","io","login","username","logout","joinChat","room","leaveChat","sendInvite","ChatRoom","requiresAcceptDecline","subject","attachment","inviteObj","from","to","sendMessage","priority","Normal","messageObj","message","created","getUserList","sendDeclineInvite","dataObj","receiver","err","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","managerWithFilters","sm","stateManagers","filter","BootstrapNotification","show","topOffset","context","duration","containerId","notificationManager","bgColorClass","containerNode","document","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","createNotification","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","isSame","item1","item2","isSameUsername","isSameGame","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","changeUser","stateNames","user","controller","changedEntry","commentOn","notifier","deletedEntry","handleMessage","getCurrentUser","UserStatus","lsLogger","BrowserStorageStateManager","useLocalStorage","storage","getItem","stringifiedSaveData","savedResults","savedResultsJSON","newValue","initialise","cmLogger","ChatManager","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","socketManager","receiveLogin","receiveLogout","receiveInvitation","receiveMessage","receiveQueuedMessages","receiveQueuedInvites","receiveJoinedRoom","receivedLeftRoom","receiveUserList","blocked","favourite","savedLogs","localStorage","users","log","ensureChatLogExists","parseInt","moment","joinDateTime","invite","isUserInBlockedList","didChatAlreadyExist","doesChatRoomExist","happyToProceed","chatLog","isUserInFavouriteList","receiveDecline","chatLogs","wasOffline","invites","messages","trim","declineInvite","sent","roomName","ensureChatLogExistsWithUser","lastViewed","numOfNewMessages","foundLog","unreadCount","chatLogKey","blockedListKey","favouriteListKey","notLogger","NotificationController","doNotDisturb","handleChatLogUpdated","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleInvitationDeclined","handleNewInviteReceived","dontDisturbMe","isBlackedListed","isFavourited","chatManager","handleChatLogsUpdated","displayMessage","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","graphSMLogger","GraphQLApiStateManager","apiURL","apis","findAll","destroy","update","dataAttribute","Decorator","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","templateLogger","TemplateManager","boardGame","getDefaultScoreSheetTemplate","getDefaultScoreSheetStartingData","getOhanamiSaveData","getSkullKingSaveData","getDefaultSaveData","template","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","cells","column","row","readOnly","className","forceNumeric","columnSummary","destinationRow","destinationColumn","reversedRowCoords","saveData","scoreSheet","jsonData","createdOn","players","scores","playerNames","parsed","isNaN","score","numOfCards","calculateOhanamiPinkScore","round","parsedBid","parsedActual","parsedBonus","ssvLogger","ScoreSheetView","applicationView","thisEl","boardGameTitleEl","startStopTimer","timerEl","endOrLeaveEl","scoreSheetEl","table","ScoreSheetController","eventUserSelected","ui","dom","fastSearchEl","handleStartStopTimer","handleEndOrLeave","handleUserDrop","addEventListener","event","alert","hasActiveScoreSheet","confirm","draggedObjectJSON","draggable","draggedObject","innerText","browserUtil","createTimerDisplay","innerHTML","isPaused","myUsername","fastSearchValues","searchValue","label","source","disabled","minLength","removeAttribute","tableData","rowIndex","columnIndex","timer","hours","minutes","seconds","callLogger","CallManager","peer","webrtcDiv","myVideoStream","myVideo","callUser","Peer","path","host","secure","navigator","audio","video","currentUserList","track","srcObject","isCurrentUser","videoCardHolder","videoCard","videoCardTitle","videoCardBody","videoCardFooter","footerContent","stopVideoButton","muteMicButton","userId","numberOfAttempts","interval","setInterval","clearInterval","userVideoCard","videoEl","parentNode","prepareToAnswerCallFrom","sscLogger","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","isRoomCreator","currentUsersInScoreSheet","intervalTimer","userChangedValue","endScoreSheet","pauseTimer","isSheetOwner","inviteUser","getCurrentRoom","getSelectedBoardGame","startTimer","stopTimerStoppedByAnotherUser","isTimerGoing","reset","saveCurrentScoreSheet","saveScoreSheetToBoardGame","boardGameName","sheetLayoutOptions","timerGoing","isFinished","timerWasGoing","isLoggedIn","changedByTM","SOURCE_View","cLogger","cLoggerDetail","connectToApplication","apiStateManager","graphSM","getServerAPIURL","findUsers","queryString","resultName","aggregateSM","memorySM","asyncDBSM","asyncQLSM","callbackBoardGameDetails","callbackAddToCollection","callbackRemoveFromCollection","callbackGetCollection","addBoardGameToCollection","removeBoardGameFromCollection","removeBoardGameFromDisplay","socketListerDelegate","getLoggedInUserId","currentGameList","displayedBoardGamesStateManager","cleanupBoardGameState","boardGames","getStateManager","getLoggedInUsername","addBoardGameToDisplay","currentListOfGames","bggSearchCallById","gameId","boardGameDetails","regex","addToMyCollection","game","updatingBoardGame","cb","boardGameId","sheet","removeFromMyCollection","collectionData","getMyBoardGameCollection","locallySaveBoardGame","scoreSheetAddedToBoardGame","addScoreSheetToBoardGame","oldBoardGame","scoreSheetRemovedFromBoardGame","removeScoreSheet","sheetId","scoreSheetId","findBoardGameInStateFromEvent","scoreSheets","cleanedUpList","existingListGame","downloadAndSyncSavedBoardGameCollection","removeBoardGameFromState","currentBoardGamesOnDisplay","events","decorateScoreSheets","copyLocallySavedScoreSheetsToBoardGame","toSave","target","sheetToSave","convertScoreSheetToDatabaseFormat","convertScoreSheetToApiCallFormat","avLogger","onDocumentLoaded","sidePanelEl","getElementById","uiConfig","closeButtonEl","eventHide","eventShow","size","uiPrefs","view","showHide","eventStartDrag","eventClickItem","eventDeleteClickItem","eventAction2Clicked","eventAction1Clicked","getDragData","createResultForItem","dataSource","domConfig","resultDataKeyId","getIdForStateItem","legacyDataKeyId","getLegacyIdForStateItem","childEl","createElement","textEl","contentEl","imgEl","getBackgroundImage","buttonBadgeEl","badgeValue","getBadgeValue","badgeEl","action","iconEl","deleteButtonEl","displayText","getDisplayValueForStateItem","modifier","getModifierForStateItem","secondModifier","getSecondaryModifierForStateItem","createResultsForState","viewEl","newState","vLogger","vLoggerDetail","handleFavouriteUserDrop","handleBlockedUserDrop","extra","console","localisedSM","recentUserSearches","dataLimit","reRenderView","updateView","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","SidebarView","csLogger","csLoggerDetail","selectedChatLog","handleAddMessage","commentEl","messageContent","sentMessage","messageEl","addChatMessage","chatMessageEl","messageSenderEl","reRenderChatMessages","renderChatLog","selectChatRoom","checkCanComment","sendMessageButton","leaveChatButton","fastUserSearch","setAttribute","clearChatLog","handleSearchResultsCB","changeSearchButton","enable","buttonEl","handleSearch","queryText","queryEl","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","board-game-id","onClick","deleteButton","startScoreSheetButton","scoreCount","scoresheets","favouriteIcon","scoreBadge","decorator","Incomplete","bggURL","href","src","image","alt","year","Persisted","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","selectedBoardGame","setSelectedBoardGame","buffer","logger","Root","loggedInUserId","sheetData","selectedEntry","bggSearchResults","graphQL","bggSearchCall","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","chatSideBar","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","fastSearchInputId","extraAction1Classes","extraAction1Text","extraAction1IconClasses","extraAction2Classes","extraAction2Text","extraAction2IconClasses","boardGameSearchSideBar","formId","queryId","buttonId","scoreSheetSideBar","hasBackgroundImage","imgElementType","imgClasses","dropZone","end","iconStart","iconInProgress","iconEnd","iconLeave","ssFastSearchUserNames","webrtc","blogEntry","location","expandedSize","eventDataKeyId","cancelDelete","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","title","content","titleEl","textContent","modalEl","classList","remove","add","render","games","entry","preventDefault","getAttribute","hideAllSideBars","startScoreSheet","switchBetweenCollectionAndScoreSheet","componentDidMount","chatView","ChatSidebarView","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","scoresView","ScoreSheetSidebarView","scoreSheetView","setApplication","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","countChanged","newCount","dataTransfer","getData","parse","showCollection","React","Component","info","ReactDOM"],"mappings":"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d,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,QAAS,IACT,aAAc,IACd,gBAAiB,IACjB,WAAY,IACZ,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,KAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOrC,EAAoBsC,GAE5B,SAASC,EAAsBF,GAC9B,IAAIrC,EAAoBY,EAAEuB,EAAKE,GAAM,CACpC,IAAIG,EAAI,IAAIC,MAAM,uBAAyBJ,EAAM,KAEjD,MADAG,EAAEE,KAAO,mBACHF,EAEP,OAAOL,EAAIE,GAEZD,EAAeO,KAAO,WACrB,OAAO7D,OAAO6D,KAAKR,IAEpBC,EAAeQ,QAAUL,EACzBlC,EAAOD,QAAUgC,EACjBA,EAAeE,GAAK,K,4CC5QpB,E,8DAAYO,O,yBAAAA,I,6BAAAA,I,6BAAAA,I,gCAAAA,M,KCFZ,IAAMC,EAAWC,IAAjB,0BAsFA,E,WA/EI,cAAwC,KAH9BC,oBAA8B,EAIpCC,KAAA,cACAA,KAAA,wB,2BAGGC,eAAP,WACID,KAAA,uB,EAGGE,WAAP,WACIF,KAAA,uB,EAGJG,wDAEI,QAFkK,IAA9FC,MAA4BR,EAAeS,mBAAmD,IAArCC,MAA+B,MAC5JT,EAAS,+CAATA,GACIG,KAAJ,mBACIH,0CADJ,CAIA,IAAMU,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC9D,GAAIH,GAAJ,EAAqB,CACjBV,EAAS,2CAAD,sBAARA,GAGA,IADA,IAAMc,EAAyBX,KAAKQ,qBAApC,GACSI,EAAT,EAAoBA,EAAQD,YAA5B,OAAqEC,IAAS,CAC1Ef,EAAS,0CAAD,EAARA,gBACA,IAAMgB,EAAWF,YAAjB,GACA,UACI,KAAMf,EAAN,aACIiB,eAAsBb,KAAtBa,iBACA,MAEJ,KAAMjB,EAAN,UACIiB,wBAA+Bb,KAA/Ba,iBACA,MAEJ,KAAMjB,EAAN,YACIiB,0BAAiCb,KAAjCa,mBACA,MAEJ,KAAMjB,EAAN,YACIiB,0BAAiCb,KAAjCa,sB,EAepBC,uCACId,KAAA,8BACAH,EAAS,4CAATA,GACA,IAAMU,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC1DH,GAAJ,GACiCP,KAAKQ,qBAAlC,GACAG,mB,EAIAI,2BAAR,YAEI,GADmBf,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAC9D,EAAoB,CAChB,IAAMM,EAAyB,CAC3BvD,KAD2B,EAE3BwD,UAAW,IAEfjB,KAAA,+B,KC9ENH,EAAWC,IAAjB,oBAGsBoB,EAAtB,WAMI,cAA2C,KAJjCC,YAAsB,EAIW,KAHjCC,YAAsB,GAI5BpB,KAAA,SAAgB,IAAI,EAApB,GACAA,KAAA,cACAA,KAAA,aACAA,KAAA,cAVR,0CAaIC,WACID,KAAA,2BAdR,aAiBIE,WACIF,KAAA,uBAlBR,kCAsBI,WACIA,KAAA,eAvBR,8BA0BI,WACIA,KAAA,eA3BR,wCA8BIG,uBAAsK,IAA9FC,MAA4BR,EAAeS,mBAAmD,IAArCC,MAA+B,MAC5JN,KAAA,yDA/BR,2BAmCIc,cACId,KAAA,wCApCR,iBAuDI,cACIA,KAAA,uBAEA,IAAMqB,EAAoB,CACtB5D,KADsB,EAEtBS,MAAOoD,GAKX,OAFAtB,KAAA,+BACAA,KAAA,0CAAkEJ,EAAlE,cACA,GAjER,iBAoEI2B,YACIvB,KAAA,uBACAH,EAAS,oCAATA,GACA,IAAI2B,EAMJ,OAHAA,EAD0BxB,KAAKyB,UAA/B,GACAD,MACA3B,EAAS,2CAATA,GACAA,KACA,GA7ER,iBAgFI6B,gBASI,YATyF,IAAvCC,OAA2B,GAC7E3B,KAAA,uBACAH,EAAS,oCAATA,GACAA,EAHyF,GAK/DG,KAAKyB,UAA/B,GACAJ,QACIrB,KAAJ,YAAqBA,KAAK4B,WAAWnE,EAAMoE,GAC3C,GAAqB7B,KAAKG,sCAAsC1C,EAAMoE,GACtE,GAzFR,oBA4FIC,qBAA+E,IAApCC,OAAuB,GAC9D/B,KAAA,uBACAH,EAAS,uCAFkE,GAM3EG,KAAA,uBACAA,KAAA,0CAAuDJ,EAAvD,YAnGR,kBAsGIoC,gBACIhC,KAAA,uBACA,IAAIvD,EAAJ,GACM4E,EAAQrB,KAAKuB,eAAnB,GACMhB,EAAac,EAAA,WAAgB,mBAAkBY,EAAwBvB,EAA1C,MAMnC,OALAb,EAAS,yBAAD,oBAARA,GACAA,KACIU,GAAJ,IACI9D,EAAS4E,EAAT5E,IAEJ,GAhHR,gBAmHIyF,gBACIlC,KAAA,uBACA,IAAIvD,GAAJ,EAMA,OALcuD,KAAKuB,eAAnB,GACmB,WAAgB,mBAAkBU,EAAwBvB,EAA1C,OACnC,IACIjE,MAEJ,GA3HR,sBA8HI0F,kBACInC,KAAA,uBACA,IACIoC,EAAUpC,KAAKgC,gBAAgBvE,EAAM4E,EAH0E,GASnH,OAJAxC,2CACAG,KAAA,2BANmH,GAQnHA,KAAA,0CAA0DJ,EAA1D,cANA,GAhIR,oBA0II0C,kBACItC,KAAA,uBACA,IACIoC,EAAepC,KAAKgC,gBAAgBvE,EAAM4E,EAA9C,GAKA,OAJAxC,4CACAG,KAAA,yBALiH,GAOjHA,KAAA,0CAAuDJ,EAAvD,gBALA,GA5IR,K,4FCLA,ICLA,EAOA,EDFM2C,EAAYzC,IAAlB,oBAyGA,E,oBAlGI,aAAqB,aACjB,+BACA,oBACA,gBAHiB,E,kFAMP0C,YAAd,WAII,OAHMC,EAAN,YACIA,YAAqC,IAArCA,GAEGA,EAAP,W,2BAGGC,oBAAP,YAEI,GADiB1C,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KACxD,EAAoB,CAChB,IAAIW,EAAoB,CACpB5D,KADoB,EAEpBS,MAAO,IAEX8B,KAAA,2B,EAID4C,2BAAP,YACIL,EAAU,6BAAVA,MACAA,EAAUlB,EAAVkB,OACAvC,KAAA,0B,EAGG6C,4BAAP,YACI,IAAItC,EAAqBP,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAiBW,EAArB,QAC5Dd,GAAJ,IACIgC,EAAU,4BAAVA,MACAA,EAAUlB,EAAVkB,OACAvC,KAAA,iC,EAIDyB,UAAP,YAEI,IAAIJ,EAAoBrB,KAAK2C,iBAAiBG,MAAK,SAAApC,GAAO,OAAIA,SAAJ,KAG1D,OAFA6B,EAAU,0BAAVA,GACAA,EAAUlB,EAAVkB,OACA,G,EAGGX,WAAP,cACI,IAAIrB,EAAqBP,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAIc,EAAoBrB,KAAK2C,iBAA7B,GACAJ,EAAU,yBAAVA,GACAA,EAAUlB,EAAVkB,OACAlB,Y,EAIR0B,gCACI,QAD6E,IAApChB,OAAuB,GAChE,GACA,IAAIxB,EAAqBP,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAIc,EAAoBrB,KAAK2C,iBAA7B,GACAJ,EAAU,wBAAVA,GACAA,KACAlB,mB,EAIR2B,uCACI,IAAIzC,EAAqBP,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAIc,EAAoBrB,KAAK2C,iBAA7B,GACMM,EAAa5B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCuC,GAAJ,IACIV,EAAU,4BAAVA,GACAA,KACAlB,uB,EAKZ6B,qCACI,IAAI3C,EAAqBP,KAAK2C,iBAAiBlC,WAAU,SAAAC,GAAO,OAAIA,SAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAIc,EAAoBrB,KAAK2C,iBAA7B,GACMM,EAAa5B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCuC,GAAJ,IACI5B,sBACAkB,EAAU,0BAAVA,GACAA,WAGJvC,KAAA,yB,GAhG2BkB,G,kVCR3BiC,O,eAAAA,I,aAAAA,I,aAAAA,I,oBAAAA,M,cAOAC,O,uBAAAA,I,4BAAAA,M,KCJZ,IAAMC,EAAYvD,IAAlB,UAwGA,EAFgB,I,oDAjGCwD,c,+CAAb,+GACUC,EAAiB,CACnBC,OADmB,OAEnBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAA,UAAe,CAACC,WAJ9B,SAO2BC,MAAMC,EAPjC,iBAOUC,EAPV,yBAQWA,EARX,kD,yOAuBOC,qBAAP,YACIX,EAAU,4BAA4BY,kBAA7B,kBAAsEA,kBAA/EZ,QACA,IACIM,eAAeM,kBAAfN,QACF,MAAOO,GACLb,0CACAA,EAAUY,kBAAD,OAATZ,KACAY,oBAA4BA,EAA5BA,UAA+CA,EAA/CA,WAEJ,IAAMV,EAAiB,CACnBC,OADmB,OAEnBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,oBAAmBM,kBAAnBN,UAGV3D,KAAA,UAAeiE,kBAAf,MAA4DA,EAA5D,SAA8EA,EAA9E,UAAiGA,EAAjG,Y,EAGGE,oBAAP,YACId,EAAU,gCAAgCY,kBAAjC,gBAAwEA,yBAAjFZ,IAKIY,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvCjE,KAAA,UAAeiE,kBAAf,IANsB,CAClBT,OADkB,MAElBC,QAAS,CAAC,eAAgB,qBAI6BQ,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGGG,uBAAP,YACIf,EAAU,mCAAmCY,kBAApC,gBAA2EA,yBAApFZ,IAKIY,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvCjE,KAAA,UAAeiE,kBAAf,IANsB,CAClBT,OADkB,SAElBC,QAAS,CAAC,eAAgB,qBAI6BQ,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGGI,oBAAP,YACIhB,EAAU,gCAAgCY,kBAAjC,gBAAwEA,yBAAjFZ,IACA,IAAMiB,EAAgB,CAClBd,OADkB,MAElBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,oBAAmBM,kBAAnBN,UAENM,yBAAJ,KAAuCA,2BAAmCA,yBAAnCA,IAEvCjE,KAAA,UAAeiE,kBAAf,MAA2DA,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGIM,UAAR,oBACIV,MAAMC,EAAND,SACU,YAEF,GADAR,EAAU,qBAAqBU,EAA/BV,QACIU,eAA0BA,UAA9B,IACI,OAAOA,EAAP,OAEJ,MAAIA,UACAV,EAAUU,EAAVV,WAPZQ,MAUU,YACFR,KACAmB,EAASpJ,EAAM,IAAKgI,EAApBoB,MAZRX,OAcW,YACHR,KACAmB,EAAS,KAAM,IAAKpB,EAApBoB,O,MCrFhB,EAFa,I,WAZT,c,mBAGAC,uBACI,MAAO,uCAAuCC,QAAQ,SAAS,YAC3D,IAAM3G,EAAI4G,iBAAV,EAEA,OADUpH,SAAgBQ,IAA1B,GACO6G,SAAP,Q,kUCDZ,ICsBA,EAMA,ED5BMC,EAAW/E,IAAjB,UA+JMgF,EAAa,I,WAtJf,aACI9E,KAAA,mBACAA,KAAA,iBACAA,KAAA,cACAA,KAAA,8BACAA,KAAA,4BAEAA,KAAA,wBAA+BA,KAAK+E,wBAAwBtG,KAA5DuB,M,2BAGGgF,4BAAP,YACIhF,KAAA,4B,EAGGiF,0BAAP,YACIjF,KAAA,0B,EAGGkF,sBAAP,WACI,OAAOlF,KAAKmF,cAAZ,Q,EAGGC,wBAAP,WACI,OAAOpF,KAAKqF,gBAAZ,Q,EAGGC,gBAAP,2BAAyI,IAApBC,OAAa,GAC9H,IAAItB,EAAuB,CACvBH,IADuB,EAEvB0B,KAAMrC,EAFiB,KAGvBsC,OAAQ,CAAC7B,MAAD,EAAe8B,UAAWA,GAClClB,SAJuB,EAKvBmB,oBAAqBtE,GAGzByD,sB,EAGGc,qBAAP,2BAAiJ,IAApBL,OAAa,GACtI,IAAItB,EAAuB,CACvBH,IADuB,EAEvB0B,KAAMrC,EAFiB,KAGvBsC,OAAQ,CAACI,SAAD,EAAqBH,UAAWA,GACxClB,SAJuB,EAKvBmB,oBAAqBtE,GAGzByD,sB,EAGGgB,cAAP,mBAAmE,IAApBP,OAAa,GAExD,IAAMQ,EAAYC,EAAlB,cAIA,GAHAnB,EAAS,yCAATA,GACAA,EAASoB,EAATpB,KAEA,EAAgB,CACZ,IAAIqB,EAAiC,CACjCC,gBADiC,EAEjCJ,UAFiC,EAGjC3C,UAAWA,EAHsB,SAIjCoB,SAAUxE,KAAK+E,yBAEnB/E,KAAA,sBACIA,KAAJ,wBAAiCA,KAAKoG,uBAAuBC,4BAC1D,CACH,IAAIH,EAAiC,CACjCC,gBADiC,EAEjCJ,UAFiC,EAGjC3C,UAAWA,EAHsB,WAIjCoB,SAAUxE,KAAK+E,yBAEnB/E,KAAA,wBACIA,KAAJ,0BAAmCA,KAAKsG,yBAAyBD,wBAErErG,KAAA,iB,EAGUuG,qB,4CAAd,wGAEI,KADMC,EAAwCxG,KAAKmF,cADvD,UAEiCnF,KAAKyG,WAAWvK,KAAKsK,QAClD,IAAIA,GAAyBxG,KAAK0G,0BAA0BF,GAHhE,gD,uDAMcG,uB,4CAAd,wGAEI,KADMH,EAAwCxG,KAAKqF,gBADvD,UAEiCrF,KAAKyG,WAAWvK,KAAKsK,QAClD,IAAIA,GAAyBxG,KAAK0G,0BAA0BF,GAHhE,gD,uDAMcI,c,4CAAd,mGACQC,EAAmB7G,KAAKmF,cAAcvJ,OAASoE,KAAKqF,gBAD5D,mBAEWwB,EAFX,uBAGQhC,EAAS,uDAHjB,KAKY7E,KAAKmF,cAAcvJ,OAL/B,mCAMkBoE,KANlB,0DAOmBA,KAAKqF,gBAAgBzJ,OAPxC,qCAQkBoE,KARlB,iCAUQ6G,EAAmB7G,KAAKmF,cAAcvJ,OAASoE,KAAKqF,gBAApDwB,OAVR,gE,uDAcQ9B,wBAAR,kBAEQ+B,IAAY1D,EAAhB,SACQpD,KAAJ,wBAAiCA,KAAKoG,uBAAuBW,6BACtD/G,KAAJ,0BAAmCA,KAAKsG,yBAAyBS,6BAExElC,EAAS,iDAAD,gCAN2F,GAQnG,IAAMtE,EAAaP,KAAKyG,WAAWhG,WAAU,SAAAC,GAAO,OAAIA,cAAJ,KACpD,GAAIH,GAAJ,EAAqB,CAEjB,IAAMiG,EAAYxG,KAAKyG,WAAvB,GACAzG,KAAA,uBACA6E,KACAA,EAAS,6CAA6C2B,EALrC,WAOjBA,+BAAyDA,kBAAzDA,uB,EAIAE,0BAAR,YAGI,GAFA7B,EAAS,qDAAqDxC,EAA9DwC,WACAA,KACI,OAACxC,uBAAD,MAAwCA,0BAA5C,MAAqFA,2BACjF,OAAQA,kBAAR,MACI,KAAKc,EAAL,KACI6D,0BACA,MAEJ,KAAK7D,EAAL,IACI6D,yBACA,MAEJ,KAAK7D,EAAL,OACI6D,4BACA,MAEJ,KAAK7D,EAAL,IACI6D,2B,MAUpB,IE7JMC,EAAcnH,IAApB,qBASaoH,EAAb,WAMI,aAAwB,KAJdC,cAA6B,GAKnCnH,KAAA,SAAgB,IAAI,EAApB,WACAA,KAAA,aACAA,KAAA,oBAGAA,KAAA,mBAA0BA,KAAKoH,mBAAmB3I,KAAlDuB,MACAA,KAAA,sBAA6BA,KAAKqH,sBAAsB5I,KAAxDuB,MACAA,KAAA,sBAA6BA,KAAKsH,sBAAsB7I,KAAxDuB,MACAA,KAAA,oBAA2BA,KAAKuH,oBAAoB9I,KAApDuB,MAfR,cAkBI,WAII,OAHMkH,EAAN,YACIA,YAAgC,IAAhCA,GAEGA,EAAP,WAtBR,mDAyBIM,WACI,IAAIC,EAAJ,GAIA,OAHAzH,KAAA,uBAA2B,YACvByH,OAAaC,EAAbD,cAEJ,GA9BR,kBAiCIE,YACI,IAAIlL,GAAJ,EACI8D,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACI9D,EAASuD,KAAK4H,iBAAdnL,IAEJ,GAvCR,kBA0CIoL,YACI,IAAItH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBA7CZ,mBAiDI8H,YACI,IAAIvH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBApDZ,aAwDI,YACIA,KAAA,gBACA,IAAI+H,EAAJ,GACA/H,KAAA,uBAA2B,YACvB+H,cAEJ/H,KAAA,oBA9DR,6BAiEI4C,cAjEJ,YAoEInB,YAEI,GADAwF,EAAY,eAAZA,GACIjH,KAAK2H,gBAAT,GACIV,EAAY,eAAD,EAAXA,0CACG,CACH,IAAIS,EAAoB1H,KAAKgI,6BAA7B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAMzB,EAA2B,CAC7BnC,IAAK4D,YAAmBA,EADK,IAE7BlC,KAAMrC,EAFuB,IAG7BsC,OAH6B,GAI7BjB,SAAUxE,KAJmB,oBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAmC,EAAY,8BAAZA,GAIR,MADwB,CAACxJ,KAAD,EAAaS,MAAO,KAxFpD,sBA4FIwE,cA5FJ,8BA+FIG,cA/FJ,aAkGIjB,gBAlGJ,kBAqGImB,gBACI,QAD6E,IAApChB,OAAuB,IAChE,GACAkF,EAAY,kBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKgI,6BAA7B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAMzB,EAA2B,CAC7BnC,IAAK4D,YAAmBA,EADK,IAE7BlC,KAAMrC,EAFuB,KAG7BsC,OAH6B,EAI7BjB,SAAUxE,KAJmB,mBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAmC,EAAY,8BAAZA,KArHZ,uBAyHIjE,kBACI,OACAiE,EAAY,oBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKgI,6BAA7B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAMzB,EAA2B,CAC7BnC,IAAK4D,YAAmBA,EADK,IAE7BlC,KAAMrC,EAFuB,OAG7BsC,OAAQ,CACJpG,GAAI4I,EAAS5I,IAEjBmF,SAAUxE,KANmB,sBAO7B2F,oBAAqBlI,GAEzBqH,2BAGAmC,EAAY,8BAAZA,KA3IZ,qBA+II/D,kBACI,OACA+D,EAAY,oBAAZA,GACAA,KACA,IAAIS,EAAoB1H,KAAKgI,6BAA7B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAMzB,EAA2B,CAC7BnC,IAAK4D,YAAmBA,EADK,IAE7BlC,KAAMrC,EAFuB,IAG7BsC,OAH6B,EAI7BjB,SAAUxE,KAJmB,sBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAmC,EAAY,8BAAZA,KA/JZ,2BAmKInG,cACId,KAAA,wCApKR,oBAuKI8B,gBACI9B,KAAA,wBAxKR,aA2KIE,WACIF,KAAA,uBA5KR,kBA+KIgC,gBACI,MAAMxC,MAAN,oBAhLR,iBAmLI+B,YACIvB,KAAA,cApLR,wCAuLIG,kBACIH,KAAA,yDAxLR,gBA2LIkC,gBACI,UA5LR,sBA+LIC,kBAEI,OADAnC,KAAA,+BACA,GAjMR,iBAoMI0B,kBApMJ,iBAuMIzB,WACID,KAAA,2BAxMR,oBA2MIsC,kBAEI,OADAtC,KAAA,6BACA,GA7MR,+BAgNI,YACI,IAAI0H,EAAoB,CACpBQ,UADoB,EAEpBC,UAFoB,GAGpBC,IAHoB,GAIpBC,UAAU,GAEV9H,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACImH,EAAS1H,KAAKmH,cAAdO,IAEJ,GA3NR,wBA8NI,gBACIT,EAAY,sCAAD,oBAAXA,oBACIqB,QAAiBA,GAArB,KACIrB,MAjOZ,wBAqOI,gBACIA,EAAY,sCAAD,oBAAXA,oBACIqB,QAAiBA,GAArB,KACIrB,MAxOZ,sBA4OI,gBACIA,EAAY,oCAAD,oBAAXA,iBACIqB,QAAiBA,GAArB,MACIrB,KACAjH,KAAA,mBACAA,KAAA,mDAA+EJ,EAA/E,qBAjPZ,qBAqPI,gBACIqH,EAAY,mCAAD,oBAAXA,iBACIqB,QAAiBA,GAArB,MACIrB,KACAjH,KAAA,mDAA+EJ,EAA/E,kBAzPZ,M,SDSY2I,O,mBAAAA,I,eAAAA,I,oBAAAA,M,cAMAC,O,uBAAAA,I,4BAAAA,M,KE9BZ,IAAMC,EAAS3I,IAAf,aAyOA,EADoB,I,WAjOhB,aAAc,KAFJ4I,cAAgC,GAGtC1I,KAAA,mBAA0BA,KAAK2I,mBAAmBlK,KAAlDuB,MACAA,KAAA,gBAAuBA,KAAK4I,gBAAgBnK,KAA5CuB,MACAA,KAAA,cACAA,KAAA,YACAA,KAAA,iBACAA,KAAA,mBAA0BA,KAAK2I,mBAAmBlK,KAAlDuB,MACAA,KAAA,iBAAwBA,KAAK6I,iBAAiBpK,KAA9CuB,MACAA,KAAA,kBAAyBA,KAAK8I,kBAAkBrK,KAAhDuB,MACAA,KAAA,oBAA2BA,KAAK+I,oBAAoBtK,KAApDuB,MACAA,KAAA,oBAA2BA,KAAKgJ,oBAAoBvK,KAApDuB,MACAA,KAAA,kBAAyBA,KAAKiJ,kBAAkBxK,KAAhDuB,MACAA,KAAA,gBAAuBA,KAAKkJ,gBAAgBzK,KAA5CuB,MACAA,KAAA,iBAAwBA,KAAKmJ,iBAAiB1K,KAA9CuB,MACAA,KAAA,oBAA2BA,KAAKoJ,oBAAoB3K,KAApDuB,MACAA,KAAA,yBAAgCA,KAAKqJ,yBAAyB5K,KAA9DuB,M,2BAGGsJ,gBAAP,YACItJ,KAAA,uB,EAGGuJ,YAAP,YACId,sBACAzI,KAAA,WACAyI,EAHyC,8BAKzCzI,KAAA,OAAcwJ,KACdf,0BACAzI,KAAA,oBAA0BA,KAA1B,oBACAA,KAAA,iBAAuBA,KAAvB,iBACAA,KAAA,kBAAwBA,KAAxB,kBACAA,KAAA,mBAAyBA,KAAzB,mBACAA,KAAA,qBAA2BA,KAA3B,qBACAA,KAAA,qBAA2BA,KAA3B,qBACAA,KAAA,mBAAyBA,KAAzB,mBACAA,KAAA,0BAAgCA,KAAhC,0BACAA,KAAA,iBAAuBA,KAAvB,iBACAA,KAAA,kBAAwBA,KAAxB,kBACAA,KAAA,qBAA2BA,KAA3B,sB,EAGGyJ,MAAP,YACIzJ,KAAA,oBAA0B,CAAC0J,c,EAGxBC,OAAP,YACI3J,KAAA,qBAA2B,CAAC0J,c,EAGzBE,SAAP,gBACI5J,KAAA,uBAA6B,CAAC0J,SAAD,EAAWG,KAAX,EAAiBrE,U,EAG3CsE,UAAP,gBACI9J,KAAA,uBAA6B,CAAC0J,SAAD,EAAWG,KAAX,EAAiBrE,U,EAG3CuE,WAAP,6BAAsL,IAA5HvE,MAAmBgD,EAAWwB,eAA8F,IAApFC,OAAiC,QAAmD,IAA5CC,MAAkB,SAA0B,IAAtBC,MAAkB,IAC9K,IAAIC,EAAiB,CACjBC,KADiB,EAEjBC,GAFiB,EAGjBT,KAHiB,EAIjBrE,KAJiB,EAKjByE,sBALiB,EAMjBC,QANiB,EAOjBC,WAAYA,GAEhB1B,oBACAA,KACAzI,KAAA,yB,EAGGuK,YAAP,6BAA2J,IAA5DC,MAAqBjC,EAASkC,aAA8B,IAAtBN,MAAkB,IACnJ,IAAIO,EAAsB,CACtBL,KADsB,EAEtBR,KAFsB,EAGtBc,QAHsB,EAItBC,QAJsB,EAKtBJ,SALsB,EAMtBhF,KANsB,EAOtB2E,WAAYA,GAEhBnK,KAAA,uB,EAGG6K,YAAP,WACI7K,KAAA,yB,EAGG8K,kBAAP,gBACI9K,KAAA,4BAAkC,CAAC6J,KAAD,EAAOQ,KAAP,EAAa7E,U,EAG3CmD,mBAAR,YACIF,EAAO,sBAAPA,GACA,IACIA,EADA,GAGA,IAAMsC,EAAUpH,WAAhB,GACA3D,KAAA,uBAA2B,mBAAcgL,iBAAd,MAC7B,MAAOC,GACLxC,KACAA,qB,EAIAI,iBAAR,YACIJ,EAAO,oBAAPA,GACAzI,KAAA,uBAA2B,mBAAcgL,eAAd,O,EAGvB5B,oBAAR,YACIX,EAAO,wBAAPA,GACAzI,KAAA,uBAA2B,mBAAcgL,kBAAd,O,EAGvBlC,kBAAR,YACIL,EAAO,qBAAPA,GACAzI,KAAA,uBAA2B,mBAAcgL,gBAAd,O,EAGvBjC,oBAAR,YACIN,EAAO,0BAAPA,GACA,IACI,IAAMsC,EAAUpH,WAAhB,GACA8E,KACAzI,KAAA,uBAA2B,mBAAcgL,oBAAd,MAC7B,MAAOC,GACLxC,qB,EAIAO,oBAAR,YACIP,EAAO,wBAAPA,GACA,IACI,IAAMsC,EAAUpH,WAAhB,GACA8E,KACAzI,KAAA,uBAA2B,mBAAcgL,mBAAd,MAC7B,MAAOC,GACLxC,qB,EAIAQ,kBAAR,YACIR,EAAO,qBAAPA,GACA,IACI,IAAMsC,EAAUpH,WAAhB,GACA8E,KACAzI,KAAA,uBAA2B,mBAAcgL,oBAAd,MAC7B,MAAOC,GACLxC,qB,EAIAY,yBAAR,YACIZ,EAAO,8BAAPA,GACA,IACI,IAAMsC,EAAUpH,WAAhB,GACA8E,KACAzI,KAAA,uBAA2B,mBAAcgL,iBAAwBD,EAAxBC,KAAsCD,EAAtCC,SAAwDD,EAAtE,SAC7B,MAAOE,GACLxC,KACAA,qB,EAIAS,gBAAR,YACIT,EAAO,mBAAPA,GACA,IAEI,IAAMsC,EAAUpH,WAAhB,GACA8E,KACAzI,KAAA,uBAA2B,mBAAcgL,iBAAd,MAC7B,MAAOC,GACLxC,qB,EAIAU,iBAAR,YACIV,EAAO,2BAAPA,GACA,IACI,IAAMsC,EAAUpH,WAAhB,GACA8E,EAFA,GAIIsC,WAAoBA,iBAAxB,GACI/K,KAAA,uBAA2B,mBAAcgL,uBAA8BD,EAA5C,YAE3BA,YAAqBA,kBAAzB,GACI/K,KAAA,uBAA2B,mBAAcgL,wBAA+BD,EAA7C,aAEjC,MAAOE,GACLxC,qB,EAcAG,gBAAR,YACIH,mBACA,IACI,IAAMsC,EAAUpH,WAAhB,GAEA,GADA8E,KACA,OAAIzI,KAAKa,SAAmB,OACxBkK,SAAiB/K,KAAKa,SAA1B,iBACI4H,yCAEAA,iEACAzI,KAAA,4CAGN,MAAOiL,GACLxC,qB,6NC/NZ,IAAMyC,EAAcpL,IAApB,uBAEqBqL,E,oBAIjB,gBAA0F,OACtF,8BACA,aACA,cACA,gBAEA,yBACA,IAAIC,EAAsB,YAA1B,0BAPsF,OAStF,eAAoB,sBAApB,IACA,wBAA6B,+BAA7B,IACA,0BAA+B,iCAA/B,IACA,0BAA+B,iCAA/B,IAGAA,WAA4B,YACxB,gDAhBkF,E,2GAoB1FrI,qCAAiF,IAApChB,OAAuB,GAChEmJ,EAAY,wBAAD,qBAAXA,GACAlL,KAAA,oC,EAIJyB,sBAKI,OAFAyJ,EAAY,iBAAZA,GACAlL,KAAA,4BACO,CAACvC,KAAD,EAAaS,MAAO,K,EAI/B8E,uCACIkI,EAAY,4BAAZA,GACAlL,KAAA,wC,EAGJkD,qCACIgI,EAAY,0BAAZA,GACAlL,KAAA,sC,EAGJ0C,kC,EAEAE,yC,EAEAC,0C,EAEAjB,2B,EAEAyJ,0C,EAEAC,4C,EAIAC,6BAGIL,EAAY,qCAAD,EAAXA,4BACAA,KACAlL,KAAA,gC,EAGJwL,sCACIN,EAAY,wDAAD,EAAXA,4BACAlL,KAAA,sC,GAzE8CkB,G,4FCJtD,IAAMuK,EAAY3L,IAAlB,2BAOa4L,EAAb,Y,QAII,aAAsB,aAClB,kCACA,iBACA,eAHkB,E,EAJ1B,G,EAAA,G,sEAAA,cAWI,WAII,OAHMA,EAAN,YACIA,YAAkC,IAAlCA,GAEGA,EAAP,WAfR,2CAkBI,qBAAwG,IAA7CC,MAAoB,IAC3E,IAAIC,EAA0B,CAC1BC,QAD0B,EAE1BF,QAASA,GAEb3L,KAAA,sBACA,GAAiB8L,mBACjBL,gDAzBR,6BA4BI,YAA2D,WACvDzL,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC0K,EAAzC,UACIA,4CA/BhB,YAoCI,YAA2C,WACnC1K,EAAoB,CACpB5D,KADoB,EAEpBS,MAAO,IAcX,OAZA8B,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC2K,EAAzC,WACIP,EAAU,0CAAVA,GACAA,EAAUO,EAAVP,SACAO,2BAKJhM,KAAKiM,cAAcrQ,OAAvB,IACIyF,EAAQrB,KAAKiM,cAAc,GAAGJ,QAAQpK,UAAtCJ,IAEJ,GArDR,sBAwDI,YAA+C,WAC3CrB,KAAA,uBAA2B,YAClB,uBAA8B+L,EAAnC,UACIA,qCA3DhB,8BAgEI,YAA4D,WACxD/L,KAAA,uBAA2B,YAClB,qBAAwBqB,EAAxB,KAAoC0K,EAAzC,UACIA,6CAnEhB,aAwEI,cAAqD,WACjD/L,KAAA,uBAA2B,YAClB,uBAA8B+L,EAAnC,WACIN,EAAU,2CAAVA,GACAA,EAAUM,EAAVN,SACAA,KACAM,+BA9EhB,kBAmFIhJ,gBAAiF,oBAApChB,OAAuB,GAChE/B,KAAA,uBAA2B,YAClB,uBAA8B+L,EAAnC,WACIN,EAAU,oDAAD,sBAATA,GACAA,EAAUM,EAAVN,SACAA,KACAM,sCAzFhB,uBA8FI/I,kBAAyH,WACrHhD,KAAA,uBAA2B,YAClB,uBAA8B+L,EAAnC,WACIN,EAAU,uDAAVA,GACAA,EAAUM,EAAVN,SACAA,KACAM,6CApGhB,qBAyGI7I,kBAAuH,WACnHlD,KAAA,uBAA2B,YAClB,uBAA8B+L,EAAnC,WACIN,EAAU,sDAAVA,GACAA,EAAUM,EAAVN,SACAA,KACAM,2CA/GhB,qBAoHI,cAEI,OADiBJ,EAAA,WAAkB,mBAAYO,IAAZ,MACnC,GAtHR,M,gGCXqBC,E,oBACjB,cAAsD,OAClD,YADkD,S,mGAK/CC,KAAP,oBAAmI,oBAAvFC,MAAoB,QAAmE,IAAhEC,MAAkB,aAA8C,IAAtCC,MAAmB,KAC5G,IAAIC,EAAcxM,KAAKyM,oBADwG,iBAG3HC,EAAJ,GACA,UACI,WACIA,YACA,MAEJ,cACIA,eACA,MAEJ,cACIA,eACA,MAEJ,eACIA,cACA,MAEJ,QACIA,YAKR,IAAMC,EAAgBC,uBAAtB,OACAD,iCACAA,YAA6BN,EAA7BM,KACAA,+BACAA,+BA/B+H,SAkC/H,IAAME,EAAYD,uBAAlB,OACAC,yCAEA,IAAMC,EAAgBF,uBAAtB,UACAE,sBACAA,cAvC+H,EA0C/H,IAAMC,EAAkBH,uBAAxB,UACAG,8BACAA,kBACAA,4BAA0C,WACtC,mCAKJ,IAAMC,EAA2BJ,uBAAjC,OACAI,yBACAA,cArD+H,EAyD/HH,iBACAA,iBACAF,iBACAA,iBACAA,sBA7D+H,GAgE/H,IAAMM,EAAkCL,wBAAxC,GAcA,OAbA,GAAiBK,cAjE8G,GAqE/HC,yBArE+H,QAwE3HX,GAAJ,IACIA,OAEJY,YAAW,WACP,kCADJA,GAGA,G,IChFJ,YACInN,KAAA,KAAYA,KAAKoM,KAAK3N,KAAtBuB,MAEAA,KAAA,oBAH4D,EAM5DA,KAAA,YAAmBA,KAAKyM,oBAAxB,oBCCR,EAF4B,I,WARxB,c,mBAGAW,+BACI,OAAO,IAAIjB,EAAX,I,MCuCR,EAFiB,IA3CjB,WAMI,aACInM,KAAA,iBACAA,KAAA,eACAA,KAAA,0BACAA,KAAA,4BAEAA,KAAA,KAAYA,KAAKoM,KAAK3N,KAAtBuB,MAZR,0CAeI,WACI,OAAOA,KAAP,aAhBR,OAmBI,uBAA+F,IAAnDsM,MAAkB,aAAiC,IAAzBC,MAAmB,KACrF,IACMc,EADeC,qBAArB,MACyBC,SAAkCvN,KAAKwN,aAAexN,KAAtDuN,wBAAzB,GACAvN,KAAA,eACAA,KAAA,uBAvBR,SA0BI,YAA6C,WACnCO,EAAaP,KAAKyN,cAAchN,WAAU,SAAAC,GAAO,OAAIA,IAAJ,KACnDH,GAAJ,IACIP,KAAA,uBADiB,GAGjBA,KAAA,mBAAuB,cAEnBqN,YAAgC,wBAAhCA,WAGR,IAAMK,EAAWL,EAAjB,cACA,OAAIK,GAAmBA,iBACvB1N,KAAA,eACIA,KAAKwN,aAAT,IAA2BxN,KAAKwN,aAAe,IAvCvD,MCAO,SAASG,EAAOC,EAAhB,GACH,OAAQA,OAAaC,EAArB,GAGG,SAASC,EAAeF,EAAxB,GACH,OAAQA,aAAmBC,EAA3B,SAGG,SAASE,EAAWH,EAApB,GACH,OAAQA,WAAiBC,EAAzB,OCJJ,IAAMG,EAAWlO,IAAjB,mBAEqBmO,E,WAGjB,cACIjO,KAAA,S,2BAGGkO,+BAAP,YACIF,EAAS,wBAAwBrD,EAAzB,wBAAwDA,EAAxD,2BAA0FA,EAAlGqD,MACA,IAAMG,EAAa,qCAA6CnO,KAAK0H,OAAO0G,WAAzD,MAA2E,CAAC/O,GAAIsL,EAAQ0D,MAA3G,GACI3E,EAAJ,UACA,IACIA,EAAWyE,EAAXzE,UAEJsE,EAAS,wBAAwBrD,EAAzB,wBAAwDA,EAAxD,2BAARqD,GAEA,IAAI/F,EAAW0C,EAAf,KACAqD,EAVgD,GAYhD,IACI,OAAQrD,EAAR,MACI,aACI,OAAQA,EAAR,WACI,KAAK3K,KAAK0H,OAAO0G,WAAjB,SACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,YADkC,GAGlC,IAAMC,EAAe,qCAA6CvO,KAAK0H,OAAO0G,WAAzD,QAA6E,CAAC/O,GAAI4I,EAASuG,WAAhH,GACA,GACIC,OAAcF,EAAdE,MAAqC/E,EAArC+E,kBAA+DxG,EAA/DwG,SAEJ,MAEJ,KAAKzO,KAAK0H,OAAO0G,WAAjB,QACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,cACAG,OAAcxG,EAAdwG,MAAiC/E,EAAjC+E,oBACA,MAEJ,KAAKzO,KAAK0H,OAAO0G,WAAjB,MACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,YACAG,OAAcxG,EAAdwG,SAAoCxG,EAApCwG,4CAIR,MAEJ,aACI,OAAQ9D,EAAR,WACI,KAAK3K,KAAK0H,OAAO0G,WAAjB,QACIE,uCAA+CtO,KAAK0H,OAAO0G,WAA3DE,aADiC,GAMzC,MAEJ,aACI,OAAQ3D,EAAR,WACI,KAAK3K,KAAK0H,OAAO0G,WAAjB,SACIE,yCAAiDtO,KAAK0H,OAAO0G,WAA7DE,iBACA,MAEJ,KAAKtO,KAAK0H,OAAO0G,WAAjB,QACI,IAAIM,EAAeJ,qCAA6CtO,KAAK0H,OAAO0G,WAAzDE,UAAnB,GACAA,yCAAiDtO,KAAK0H,OAAO0G,WAA7DE,gBACAG,OAAcC,EAAdD,MAAqC/E,EAArC+E,yCAOlB,MAAOxD,GACL+C,O,EAKRW,0BACIX,EAAS,qBAATA,I,EAGJY,0BACI,OAAON,GAAP,qB,mHCpFR,ICSKO,GDTCC,GAAWhP,IAAjB,iBAEqBiP,G,oBAMjB,cAAqD,sBAAlCC,OAA2B,IAC1C,gCAHI7H,cAA0B,GAI9B,UAAepI,OAAf,eACA,IAAqB,UAAeA,OAAf,cACrB,gBAJiD,E,mFAOvCyD,YAAd,YAII,YAJwD,IAAlCwM,OAA2B,GAC3CD,EAAN,YACIA,YAAuC,IAAIA,EAA3CA,IAEGA,EAAP,W,2BAGGrM,oBAAP,YACI,OAAI1C,KAAKiP,QAAQC,QAAQzR,IACrBuC,KAAA,2BAAgC,CAACvC,KAAD,EAAaS,MAAO,M,EAIrD0E,2BAAP,YACIkM,GAAS,kCAAkCzN,EAA3CyN,MACAA,MACA,IAAMK,EAA8BxL,eAAetC,EAAnD,OACAyN,MACA9O,KAAA,gBAAqBqB,EAArB,S,EAIGwB,4BAAP,YACI7C,KAAA,+B,EAGGyB,UAAP,YACI,IAAI2N,EAAJ,GACAN,GAAS,mCAATA,GACA,IAAMO,EAAmBrP,KAAKiP,QAAQC,QAAtC,GAKA,OAJAJ,MACA,OAAIO,IACAD,EAAezL,WAAfyL,IAEG,CAAC3R,KAAD,EAAaS,MAAOkR,I,EAGxBxN,WAAP,cACI5B,KAAA,2BAAgC,CAACvC,KAAD,EAAaS,MAAOoR,K,EAGxDvM,gCACI,QAD6E,IAApChB,OAAuB,GAChE,GAEA,IAAIV,EAAoBrB,KAAKyB,UAA7B,GACAqN,GAAS,wBAATA,GACAA,MACAzN,gBACArB,KAAA,iC,EAGJgD,uCACI,IAAI3B,EAAoBrB,KAAKyB,UAA7B,GACMwB,EAAa5B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCuC,GAAJ,IACI6L,GAAS,4BAATA,GACAA,MACAzN,qBAEJrB,KAAA,gC,EAGJkD,qCACI,IAAI7B,EAAoBrB,KAAKyB,UAA7B,GACMwB,EAAa5B,EAAA,iBAAsB,mBAAkBY,EAAwBvB,EAA1C,MACrCuC,GAAJ,IACI5B,sBACAyN,GAAS,0BAATA,GACAA,OAEJ9O,KAAA,gC,EAGJ8H,+B,EAGAN,mCACI,OAAOxH,KAAP,e,EAGJ2H,4BACI,U,EAGG4H,WAAP,YACIvP,KAAA,iB,GAlGgDkB,I,SCOnD2N,O,yBAAAA,I,wBAAAA,Q,KAKL,IAAMW,GAAW1P,IAAjB,gBAEa2P,GAAb,WAgBI,aAAsB,KARZC,YAAwB,GAQZ,KAPZC,cAA0B,GAOd,KANZC,cAA0B,GAMd,KAHdC,gBAAkB,GAGJ,KAFdC,eAAoD,KAGxDN,yDAEAxP,KAAA,YACAA,KAAA,iBACAA,KAAA,qBACAA,KAAA,aAAoB,IAAI+O,IANN,GASlBgB,kBATkB,MAYlB/P,KAAA,aAAoBA,KAAKgQ,aAAavR,KAAtCuB,MACAA,KAAA,cAAqBA,KAAKiQ,cAAcxR,KAAxCuB,MACAA,KAAA,kBAAyBA,KAAKkQ,kBAAkBzR,KAAhDuB,MACAA,KAAA,eAAsBA,KAAKmQ,eAAe1R,KAA1CuB,MACAA,KAAA,sBAA6BA,KAAKoQ,sBAAsB3R,KAAxDuB,MACAA,KAAA,qBAA4BA,KAAKqQ,qBAAqB5R,KAAtDuB,MACAA,KAAA,kBAAyBA,KAAKsQ,kBAAkB7R,KAAhDuB,MACAA,KAAA,iBAAwBA,KAAKuQ,iBAAiB9R,KAA9CuB,MAnCR,cAsCI,WAII,OAHMyP,EAAN,YACIA,YAAwB,IAAxBA,GAEGA,EAAP,WA1CR,+CA6CI,YACIzP,KAAA,uBA9CR,0BAiDI,YACIA,KAAA,2BAlDR,iBAqDI,YACI,OAAQA,KAAK4P,cAAcnP,WAAU,mBAAUhD,IAAV,MAArC,GAtDR,kBAyDI+S,YACIxQ,KAAA,gBACAA,KAAA,2BAA+B,mBAAca,6BAAd,OA3DvC,uBA8DI,YAAoD,WACpCb,KAAK0P,YAAYjP,WAAU,mBAAagQ,IAAb,KACvC,IACIzQ,KAAA,oBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAca,4BAAmC,EAAjD,oBAnE3C,4BAuEI,YAAyD,WACjDD,EAAQZ,KAAK0P,YAAYjP,WAAU,mBAAagQ,IAAb,KACnC7P,GAAJ,IACIZ,KAAA,wBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAca,4BAAmC,EAAjD,oBA5E3C,sBAiFI,YACI,OAAQb,KAAK0P,YAAYjP,WAAU,mBAAagQ,IAAb,MAAnC,GAlFR,yBAqFI,YAAsD,WACtCzQ,KAAK2P,cAAclP,WAAU,mBAAeiQ,IAAf,KACzC,IACI1Q,KAAA,sBACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAca,8BAAqC,EAAnD,oBA1F3C,8BA8FI,YAA2D,WACnDD,EAAQZ,KAAK2P,cAAclP,WAAU,mBAAagQ,IAAb,KACrC7P,GAAJ,IACIZ,KAAA,0BACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAca,8BAAqC,EAAnD,oBAnG3C,wBAwGI,YACI,OAAQb,KAAK2P,cAAclP,WAAU,mBAAU4N,IAAV,MAArC,GAzGR,uBA4GI,WACI,gBAAWrO,KAAX,gBA7GR,qBAgHI,WACI,gBAAWA,KAAX,cAjHR,iBAoHI,YACIwP,GAAS,wBAATA,GACAxP,KAAA,gBAF0C,EAI1C,IAAI2Q,EAAY3Q,KAAK4Q,aAAarP,eAAekO,aAAyBzP,KAA1E,iBACAwP,MACA,IACIxP,KAAA,YAIJ,IAAI0P,EAAc1P,KAAK4Q,aAAarP,eAAekO,iBAA6BzP,KAAhF,iBACAwP,MACA,IACIxP,KAAA,eAIJ,IAAI2P,EAAgB3P,KAAK4Q,aAAarP,eAAekO,mBAA+BzP,KAApF,iBACAwP,MACA,IACIxP,KAAA,iBAGJA,KAAA,uBAA2B,mBAAca,EAAd,4BA5InC,iBAiJI,WACI,OAAOb,KAAP,iBAlJR,oBAqJIsQ,YAGI,GAAIO,SAAerI,EAAnB,UAEA,IAAIsI,EAAe9Q,KAAK+Q,oBAAoBF,EAA5C,MAEArB,GAAS,sBAAsBqB,EAAvB,WAAuCA,gBAA/CrB,MACAsB,QAAYD,EARyB,SAUrC,IAAIjG,EAAUoG,SAASC,aAAvB,mBACMC,EAAeD,aAArB,oBACItG,EAAmB,CACnBN,KADmB,GAEnBO,QAFmB,EAGnBf,KAAMgH,EAHa,KAInBrG,SAJmB,EAKnBhF,KAAMgD,EALa,SAMnBmC,QAAYkG,EAAL,gCAA0CK,GAErDJ,mBACA9Q,KAAA,WAEAA,KAAA,uBAA2B,mBAAca,0BAAd,QA5KnC,mBA+KI0P,YAEI,GAAIM,SAAerI,EAAnB,UACIqI,aAAmB7Q,KAAvB,iBAEA,IAAI8Q,EAAe9Q,KAAK+Q,oBAAoBF,EAA5C,MAEArB,GAAS,sBAAsBqB,EAAvB,WAAuCA,gBAA/CrB,MACAsB,QAAYD,EARwB,SAUpC,IAAIjG,EAAUoG,SAASC,aAAvB,mBACMC,EAAeD,aAArB,oBACItG,EAAmB,CACnBN,KADmB,GAEnBO,QAFmB,EAGnBf,KAAMgH,EAHa,KAInBrG,SAJmB,EAKnBhF,KAAMgD,EALa,SAMnBmC,QAAYkG,EAAL,8BAAwCK,GAEnDJ,mBACA9Q,KAAA,WAEAA,KAAA,uBAA2B,mBAAca,0BAAd,QAtMnC,oBAyMIqP,YACI,GAAIiB,SAAgB3I,EAApB,SAGA,GAAKxI,KAAKoR,oBAAoBD,EAA9B,MAqCI3B,GAAS,QAAQ2B,EAAT,KAAR3B,gBArCwC,CACxCA,GAAS,mBAAmB2B,EAA5B3B,MACA,IAAM6B,EAAsBrR,KAAKsR,kBAAkBH,EAAnD,MACA3B,MACAA,6FAEA,IAAI+B,GAAJ,EASA,GAPA,GACIvR,KAAA,uBAA2B,YAClBa,0BAAL,KACI0Q,SAIZ,EAAoB,CAEhB,IAAIC,EAAmBxR,KAAK+Q,oBAAoBI,EAFhC,MAIhBK,OAAeL,EAJC,KAOZA,EAAJ,UACIA,oBAAwB,YACfK,EAAA,iBAAwB,mBAAUnD,IAAV,KAA7B,GAAgEmD,aAAmBL,EAAnBK,SAInEA,EAAA,iBAAwB,mBAAUnD,IAAS8C,EAAnB,QAA7B,GAAmEK,aAAmBL,EAAnBK,MAEnExR,KAAA,WACAwP,GAAS,gBAAgB2B,EAAzB3B,MACAO,WAAuB/P,KAAvB+P,iBAA8CoB,EAA9CpB,KAA2DvH,EAA3DuH,UACA/P,KAAA,uBAA2B,mBAAca,0BAAd,SA9O3C,eAsPImP,YAAqC,WACjCR,GAAS,6BADwB,GAGrBxP,KAAK4P,cAAcnP,WAAU,mBAAU4N,IAAV,KACzC,GAAerO,KAAK4P,cAAc1T,KAAKwN,GACvC8F,GAASxP,KAATwP,eAEAxP,KAAA,2BAA+B,mBAAca,6BAAoC,EAAlD,mBAG1Bb,KAAKoR,oBAAN,IAAuCpR,KAAKyR,sBAAhD,KACIjC,GAAS,QAAD,EAARA,eACAxP,KAAA,2BAA+B,mBAAca,8BAAd,QAlQ3C,gBAsQIoP,YAAsC,WAC9BrP,EAAQZ,KAAK4P,cAAcnP,WAAU,mBAAU4N,IAAV,KACrCzN,GAAJ,GAAgBZ,KAAK4P,cAAc9S,OAAO8D,EAAO,GAEjDZ,KAAA,2BAA+B,mBAAca,6BAAoC,EAAlD,mBAG1Bb,KAAKoR,oBAAN,IAAuCpR,KAAKyR,sBAAhD,KACIjC,GAAS,QAAD,EAARA,gBACAxP,KAAA,2BAA+B,mBAAca,+BAAd,QA/Q3C,iBAmRI6Q,gBACQlM,IAASgD,EAAb,UAEIkB,IAAa1J,KAAjB,kBAGKA,KAAKoR,oBAAV,KACI5B,GAAS,QAAD,EAARA,gCACAxP,KAAA,uBAA2B,mBAAca,6BAAd,SA3RvC,yBAgSI,YACIb,KAAA,kBAjSR,eAoSI,YACI,IAAIwR,EAAUxR,KAAK+Q,oBAAnB,GACAS,qBACAA,aAAqBR,SAASC,aAA9BO,mBAEAxR,KAAA,gCAEAA,KAAA,YA3SR,aA8SI,YACI,IAAI8Q,EAAJ,KACIlQ,EAAQZ,KAAK2R,SAASlR,WAAU,mBAASqQ,aAAT,KAEpC,OADIlQ,GAAJ,IAAgBkQ,EAAM9Q,KAAK2R,SAAXb,IAChB,GAlTR,iBAqTIX,cACI,QADgE,IAAnCyB,OAAsB,GAC/CjH,SAAiBnC,EAArB,UAEImC,SAAiB3K,KAArB,iBAEA,GAAKA,KAAKoR,oBAAoBzG,EAA9B,MAWI6E,GAAS,8BAA8B7E,EAA/B,KAAR6E,6CAXyC,CAGzC,IAAIgC,EAAUxR,KAAK+Q,oBAAoBpG,EAAvC,MACA3K,KAAA,qCAAiD2K,EAAjD,MACA3K,KAAA,yBACAwP,uBACAA,MAEAxP,KAAA,uBAA2B,mBAAca,yBAAd,QAnUvC,uBA0UIwP,YAAyC,WAErCwB,WAAgB,YACZ,2BA7UZ,wBAiVIzB,YAA2C,WAEvC0B,WAAiB,YACb,0BAEJ9R,KAAA,uBAA2B,mBAAca,gCAAd,OAtVnC,WAyVI+I,YACI,IAAI5J,KAAK4O,iBAAiBmD,OAAOnW,SACjCoE,KAAA,uBACA+P,WAAuB/P,KAAvB+P,mBAAoDvH,EAApDuH,YA5VR,YA+VIjG,YACI,IAAI9J,KAAK4O,iBAAiBmD,OAAOnW,SACjCoE,KAAA,iBACA+P,YAAwB/P,KAAxB+P,mBAAqDvH,EAArDuH,UACA/P,KAAA,kCAnWR,QAsWIyJ,WAAc,WACV,IAAIzJ,KAAK4O,iBAAiBmD,OAAOnW,SACjCmU,QAAoB/P,KAFV,kBAIV+P,EAJU,cAMV/P,KAAA,kBAAsB,YACd8Q,SAAatI,EAAjB,UACIuH,WAAuB,EAAvBA,gBAA6Ce,EAA7Cf,SAA2DvH,EAA3DuH,eA9WhB,SAmXIpG,WACI,IAAI3J,KAAK4O,iBAAiBmD,OAAOnW,QACjCmU,SAAqB/P,KAArB+P,mBArXR,gBAwXIiC,YACI,IAAIhS,KAAK4O,iBAAiBmD,OAAOnW,QACjCmU,sBAAsC/P,KAAtC+P,iBAA6DvH,EAA7DuH,WA1XR,aA8XIhG,0BAAiJ,IAA5GvE,MAAmBgD,EAAWwB,eAA8E,IAApEC,OAAiC,QAAmC,IAA5BC,MAAkB,IACnI,IAAIlK,KAAK4O,iBAAiBmD,OAAOnW,UAE7BoE,KAAKoR,oBAAT,IAEqBpR,KAAK+Q,oBAA1B,GACI,iBAAoB,mBAAU1C,IAAV,KAAxB,GACI0B,aAAyB/P,KAAzB+P,8BArYZ,cAyYIxF,kBACI,QAD0H,IAAnFC,MAAqBjC,EAASkC,QACrE,IAAIzK,KAAK4O,iBAAiBmD,OAAOnW,OAAc,OAD2E,KAE1H,IAAIkV,EAAM9Q,KAAK+Q,oBAF2G,GAItHnG,EAAUoG,SAASC,aAAvB,mBACAlB,cAA0B/P,KAA1B+P,uBAAyEvH,EAAzEuH,SAA8FxH,EAA9FwH,OAL0H,IAQ1H,IAAiB5F,MACjB,IAAI8H,EAAgB,CAChB5H,KAAMrK,KADU,iBAEhB6J,KAFgB,EAGhBc,QAHgB,EAIhBC,QAJgB,EAKhBJ,SALgB,EAMhBhF,KAAMgD,EANU,SAOhB2B,WAAYA,GAGhB,OADAnK,KAAA,yBACA,GA5ZR,cA+ZI,WACI,gBAAWA,KAAX,WAhaR,oBAmaI,YACI,IAAIkS,EAAJ,KACA,KAAc,CACV1C,GAAS,sBADC,GAGV,IAAIgC,EAAmBxR,KAAKmS,4BAA5B,GACAnS,KAAA,uBAA2B,mBAAca,0BAAd,MAI3BkP,aAAyB/P,KAAzB+P,mBAA0DyB,EAA1DzB,SAA4EvH,EAA5EuH,YARU,IAUVA,WAAuB/P,KAAvB+P,iBAA8CyB,EAA9CzB,SAAgEvH,EAAhEuH,UACAmC,EAAWV,EAAXU,SAEJ,UAlbR,WAqbI,WACIlS,KAAA,4BAAiCyP,aAAyBzP,KAA1D,gBAAgFA,KAAhF,cAtbR,kBAybI,WACIA,KAAA,4BAAiCyP,iBAA6BzP,KAA9D,gBAAoFA,KAApF,iBA1bR,oBA6bI,WACIA,KAAA,4BAAiCyP,mBAA+BzP,KAAhE,gBAAsFA,KAAtF,mBA9bR,sBAicI,YACI,MACIY,EAAQZ,KAAK2R,SAASlR,WAAU,mBAASqQ,aAAT,KAepC,OAdIlQ,EAAJ,GACIkQ,EAAM,CACFoB,SADE,EAEFrB,MAAO,CAAC7Q,KAFN,kBAGF8R,SAHE,GAIFM,WAAYpB,SAASC,aAJnB,mBAKFoB,iBALE,EAMF7M,KAAMgD,EAAWwB,UAErBhK,KAAA,iBACAA,KAAA,YAEA8Q,EAAM9Q,KAAK2R,SAAXb,GAEJ,GAldR,8BAqdI,YAGI,IAFA,IAAIwB,EAAJ,KACI1R,EAAJ,EACOA,EAAQZ,KAAK2R,SAApB,QAAqC,CACjC,IAAIb,EAAM9Q,KAAK2R,SAAf,GACA,IAAIb,gBAEIA,EAAA,iBAAoB,mBAAW5S,IAAX,MAAxB,IACIoU,IACA1R,EAAQZ,KAAK2R,SAAb/Q,QAGRA,IAcJ,OAZA,IACI0R,EAAW,CACPJ,SAAUlM,EADH,cAEP6K,MAAO,CAAC7Q,KAAD,iBAFA,GAGP8R,SAHO,GAIPM,WAAYpB,SAASC,aAJd,mBAKPoB,iBALO,EAMP7M,KAAMgD,EAAWwB,UAErBhK,KAAA,iBACAA,KAAA,YAEJ,GA/eR,oBAkfI,YAEI,OADYA,KAAK2R,SAASlR,WAAU,mBAAkBqQ,aAAlB,MACpC,GApfR,gCAufI,WAAwC,MAChCyB,EAAJ,EACAvS,KAAA,kBAAsB,YAClBuS,GAAezB,EAAfyB,oBAEJ,SAAAvS,KAAA,oCA5fR,sBA+fI,cACI8Q,qBACAA,mBAEA9Q,KAAA,gCAEI2K,SAAiB3K,KAArB,iBACIA,KAAA,aAAkB8Q,EADsB,UAGxC9Q,KAAA,YAxgBZ,qCA4gBI,cACgBwR,EAAA,iBAAwB,mBAAUnD,IAAV,KACpC,GACImD,iBA/gBZ,gBAmhBI,YACI,IAAI5Q,EAAQZ,KAAK2R,SAASlR,WAAU,mBAASqQ,aAAT,KACpC,GAAIlQ,GAAJ,EAAgB,CACZ4O,GAAS,8BAATA,GACA,IAAI/S,EAASuD,KAAK2R,SAAS7U,OAAO8D,EAAlC,GACA4O,GAAS/S,EAAT+S,QACAxP,KAAA,aAzhBZ,KAAayP,GAEM+C,WAAa,qBAFnB/C,GAGMgD,eAAiB,wBAHvBhD,GAIMiD,iBAAmB,0BCpBtC,ICPA,GDOMC,GAAY7S,IAAlB,2BAEa8S,GAAb,WAOI,aAAsB,KALdC,cAAwB,EAM5B7S,KAAA,YAAmByP,GAAnB,cACAzP,KAAA,gBACAA,KAAA,iBACAA,KAAA,kBAJkB,GAQlBA,KAAA,qBAA4BA,KAAK8S,qBAAqBrU,KAAtDuB,MACAA,KAAA,2BAAkCA,KAAK+S,2BAA2BtU,KAAlEuB,MACAA,KAAA,4BAAmCA,KAAKgT,4BAA4BvU,KAApEuB,MACAA,KAAA,6BAAoCA,KAAKiT,6BAA6BxU,KAAtEuB,MAEAA,KAAA,gCAAAA,MACAA,KAAA,oCAAAA,MArBR,cAwBI,WAII,OAHM4S,EAAN,YACIA,YAAmC,IAAnCA,GAEGA,EAAP,WA5BR,oDA+BIM,cACSlT,KAAL,cAGAyO,iFAnCR,0BAuCI0E,YAII,OAAIhC,SAAgB3I,EAApB,YAEKxI,KAAD,eAAyBmR,EAA7B,uBAEIA,EAAJ,uBAMI1C,2BAAmC0C,EAAnC1C,sCAV8C,GA3C1D,cA2DI,YACIzO,KAAA,uBA5DR,kBA+DI,YACIA,KAAA,2BAhER,kBAmEI,iBAA6C,IAAtBoT,OAAgB,GACnCpT,KAAA,gBApER,gBAuEI,mBAAwE,IAAjCqT,OAA2B,GAC9D,EACIrT,KAAA,oCAEAA,KAAA,0CA3EZ,gBA+EI,mBAAqE,IAA9BsT,OAAwB,GAC3D,EACItT,KAAA,sCAEAA,KAAA,4CAnFZ,kBAuFI,YACI,OAAOA,KAAKuT,YAAY9B,sBAAxB,IAxFR,gBA2FI,YACI,OAAOzR,KAAKuT,YAAYnC,oBAAxB,IA5FR,wBA+FIoC,WACIxT,KAAA,uBAA2B,mBAAca,EAAd,4BAhGnC,uBAmGIiS,cAOI,QAPyD,IAA1BlB,OAAa,GAC5Ce,8BACAA,GAFyD,GAIzD3S,KAAA,uBAA2B,mBAAca,yBAAd,OAGvBb,KAAJ,eAEA,GAEQ8Q,kBAAJ,EAA6B,CACzB,IAAM2C,EAAiB3C,WAAaA,kBAApC,GACArC,OAAcgF,EAAdhF,KAAmCgF,EAAnChF,yBAhHhB,6BAqHIsE,YACIJ,qCACAA,GAFkD,GAKlD3S,KAAA,2BAA+B,mBAAca,6BAAd,OA1HvC,8BA6HImS,YACIL,GAAU,yBAAD,EADuC,cAGhD3S,KAAA,2BAA+B,mBAAca,8BAAd,MAG3Bb,KAAJ,cACAyO,qDApIR,+BAuIIwE,YACIN,GAAU,yBAAD,EADwC,eAGjD3S,KAAA,2BAA+B,mBAAca,+BAAd,MAG3Bb,KAAJ,cACAyO,uDA9IR,4BAkJIiF,YACIf,GAAU,mCAAVA,GACA3S,KAAA,2BAA+B,mBAAca,4BAAd,OApJvC,8BAuJI8S,YACIhB,GAAU,qCAAVA,GACA3S,KAAA,2BAA+B,mBAAca,8BAAd,OAzJvC,oBA4JI,YACI,OAAO4O,mCAAP,IA7JR,oBAiKImE,YACI5T,KAAA,uBAA2B,mBAAca,oBAAd,OAlKnC,gCAqKIgT,YAEQ7T,KAAJ,cACA,IAAI8R,UAEJrD,wDAAgEqD,EAAhErD,gDA1KR,KESMqF,GAAgBhU,IAAtB,yBAsBaiU,GAAb,WAKI,aAAqB,KAJX5M,cAA4B,GAKlCnH,KAAA,SAAgB,IAAI,EAApB,WACAA,KAAA,aACAA,KAAA,oBAGAA,KAAA,mBAA0BA,KAAKoH,mBAAmB3I,KAAlDuB,MACAA,KAAA,sBAA6BA,KAAKqH,sBAAsB5I,KAAxDuB,MACAA,KAAA,sBAA6BA,KAAKsH,sBAAsB7I,KAAxDuB,MACAA,KAAA,oBAA2BA,KAAKuH,oBAAoB9I,KAApDuB,MAdR,mDAiBIwH,WACI,IAAIC,EAAJ,GAIA,OAHAzH,KAAA,uBAA2B,YACvByH,OAAaC,EAAbD,cAEJ,GAtBR,kBAyBIE,YACI,IAAIlL,GAAJ,EACI8D,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACI9D,EAASuD,KAAK4H,iBAAdnL,IAEJ,GA/BR,kBAkCIoL,YACI,IAAItH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBArCZ,mBAyCI8H,YACI,IAAIvH,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAC1CnH,GAAJ,IACIP,KAAA,yBA5CZ,aAgDI,YACIA,KAAA,gBACA,IAAI+H,EAAJ,GACA/H,KAAA,uBAA2B,YACvB+H,cAEJ/H,KAAA,oBAtDR,6BAyDI4C,cAzDJ,YA4DInB,YAEI,GADAqS,GAAc,eAAdA,GACI9T,KAAK2H,gBAAT,GACImM,GAAc,eAAD,EAAbA,0CACG,CACH,IAAIpM,EAAmB1H,KAAKgI,6BAA5B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAI9D,EAAQ8D,OAAZ,QACMzB,EAA2B,CAC7BnC,IAAK4D,EADwB,OAE7BlC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAAC7B,SACTY,SAAUxE,KAJmB,oBAK7B2F,oBAAqBlI,GAEzBqW,GAAc,eAAD,oBAAbA,KACAhP,2BAGAgP,GAAc,8BAAdA,GAIR,MADwB,CAACrW,KAAD,EAAaS,MAAO,KAlFpD,sBAsFIwE,cAtFJ,8BAyFIG,cAzFJ,aA4FIjB,gBA5FJ,kBA+FImB,gBACI,QAD6E,IAApChB,OAAuB,IAChE,GACA+R,GAAc,kBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKgI,6BAA5B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAI7B,EAAJ,GACAA,EAAS6B,OAAT7B,WAEA,IAAMI,EAA2B,CAC7BnC,IAAK4D,EADwB,OAE7BlC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACTrB,SAAUxE,KAJmB,mBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAgP,GAAc,8BAAdA,KAlHZ,uBAsHI9Q,kBACI,OACA8Q,GAAc,oBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKgI,6BAA5B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAI7B,EAAJ,GACAA,EAAS6B,OAAT7B,YAEA,IAAMI,EAA2B,CAC7BnC,IAAK4D,EADwB,OAE7BlC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACTrB,SAAUxE,KAJmB,sBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAgP,GAAc,8BAAdA,KAzIZ,qBA6II5Q,kBACI,OACA4Q,GAAc,oBAAdA,GACAA,MACA,IAAIpM,EAAmB1H,KAAKgI,6BAA5B,GACA,GAAIN,EAAJ,SAAqB,CACjB,IAAI7B,EAAJ,GACAA,EAAS6B,OAAT7B,YAEA,IAAMI,EAA2B,CAC7BnC,IAAK4D,EADwB,OAE7BlC,KAAMrC,EAFuB,KAG7BsC,OAAQ,CAACI,YACTrB,SAAUxE,KAJmB,sBAK7B2F,oBAAqBlI,GAEzBqH,2BAGAgP,GAAc,8BAAdA,KAhKZ,2BAoKIhT,cACId,KAAA,wCArKR,oBAwKI8B,gBACI9B,KAAA,wBAzKR,aA4KIE,WACIF,KAAA,uBA7KR,kBAgLIgC,gBACI,MAAMxC,MAAN,oBAjLR,iBAoLI+B,YACIvB,KAAA,cArLR,wCAwLIG,kBACIH,KAAA,yDAzLR,gBA4LIkC,gBACI,UA7LR,sBAgMIC,kBAEI,OADAnC,KAAA,+BACA,GAlMR,iBAqMI0B,kBArMJ,iBAwMIzB,WACID,KAAA,2BAzMR,oBA4MIsC,kBAEI,OADAtC,KAAA,6BACA,GA9MR,+BAiNI,YACI,IAAI0H,EAAmB,CACnBQ,UADmB,EAEnB8L,OAFmB,WAGnBC,KAAM,CACFC,QADE,GAEF3V,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFtR,KAAM,IAEV1H,KAAM,CACF8Y,QADE,GAEF3V,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFtR,KAAM,IAEVuF,UAAU,GAEV9H,EAAaP,KAAKmH,cAAc1G,WAAU,mBAAYiH,cAAZ,KAI9C,OAHInH,GAAJ,IACImH,EAAS1H,KAAKmH,cAAdO,IAEJ,GAzOR,wBA4OI,gBACIoM,GAAc,sCAAD,oBAAbA,oBACIxL,QAAiBA,GAArB,KACIwL,OA/OZ,wBAmPI,gBACIA,GAAc,sCAAD,oBAAbA,oBACIxL,QAAiBA,GAArB,KACIwL,OAtPZ,sBA0PI,gBAEI,GADAA,GAAc,oCAAD,oBAAbA,iBACIxL,QAAiBA,GAArB,IAAoC,CAChCwL,MACA,IACIO,EADmBrU,KAAKgI,6BAA5B,GACoBN,KAApB,QACA1H,KAAA,mBACAA,KAAA,iDAAyE5E,OAAzE,GAAmGwE,EAAnG,qBAjQZ,qBAqQI,gBACIkU,GAAc,mCAAD,oBAAbA,iBACIxL,QAAiBA,GAArB,MACIwL,MACA9T,KAAA,mDAA+EJ,EAA/E,kBAzQZ,M,SDxCY0U,O,2BAAAA,I,uBAAAA,I,yBAAAA,I,wCAAAA,Q,mBE4EZ,GAFoB,I,WAzEhB,c,2BAGAC,6BACI,IAAM7T,EAA8BkM,wBAApC,GACA,OAAIlM,GACAA,iBAAuB,CACnB8T,MADmB,QAEnBC,SAAU,Y,EAKtBC,8BACI,IACIhU,YAAoBA,eAAuBA,EAAvBA,aAApBA,M,EAIRiU,iCACI,IACIjU,iBAAuB,CACnB+T,SAAU,WAEd/T,YAAoBA,eAAuBA,EAAvBA,aAApBA,M,EAIRkU,2BACIlU,iBAAuB,CACnB8T,MADmB,QAEnBC,SAAU,Y,EAIlBI,qBACInU,iBAAuB,CACnB8T,MAAO,W,EAIfM,8BACI,GAAIpU,GAAWA,EAAf,WACI,KAAOA,EAAP,YAA2B,CACvB,IAAMqU,EAA8BrU,EAApC,UACA,GAAeA,mB,EAK3BsU,sCAA4F,IAAhCC,OAAoB,GAC5DC,QAAhB,KACAC,SAAgB,YACRC,gBAAJ,IACI,EACI1U,mBAEAA,2B,EAMhB2U,4BACI,GACIC,WAAmB,YACf5U,eAAqB6U,EAArB7U,GAAmC6U,EAAnC7U,Q,MC/DV8U,GAAiB1V,IAAvB,oBAEa2V,GAAb,WAGI,cAHJ,cAMI,WAII,OAHMA,EAAN,YACIA,YAA4B,IAA5BA,GAEGA,EAAP,WAVR,iDAaI,YACI,gBAAIC,SACO1V,KAAP,qBAEJ,SAAI0V,SACO1V,KAAP,uBAEGA,KAAK2V,6BAAZ,IApBR,4BAuBI,YACI,gBAAID,SACO1V,KAAP,yBAEJ,SAAI0V,SACO1V,KAAP,2BAEGA,KAAK4V,iCAAZ,IA9BR,cAiCI,cACI,gBAAIF,SACO1V,KAAK6V,mBAAZ,GAEJ,SAAIH,SACO1V,KAAK8V,qBAAZ,GAEG9V,KAAK+V,mBAAZ,IAxCR,+BA2CI,cACI,IAAItZ,GAAJ,EASA,OARA,SAAIiZ,WACAjZ,KACAuD,KAAA,yBAEJ,SAAI0V,WACAjZ,KACAuD,KAAA,2BAR6E,GA3CzF,qBAwDI,WACI,IAAIgW,EAAW,CACXC,YADW,EAEXC,YAFW,EAGXC,WAHW,gCAIXC,oBAJW,EAKXC,iBALW,EAMXC,cANW,SAOXC,MAPW,cAQP,GAAI,IAACC,GAAD,IAAmBA,GAAvB,IAAyCC,EACrC,MAAO,CACHC,UADG,EAEHC,UAAW,uBAGnB,GAAIH,EAAJ,EAAgB,CACZ,GAAI,IAACC,GAAD,IAAgBA,GAApB,IAAmCA,EAC/B,MAAO,CACHE,UADG,kBAEHC,cAAc,GAGtB,GAAI,IAACH,GAAL,IAAoBA,EAChB,MAAO,CACHE,UADG,mBAEHC,cAAc,GAGtB,OAAKH,EACD,MAAO,CACHE,UADG,kBAEHC,cAAc,GAGtB,OAAKH,EACD,MAAO,CACHE,UADG,kBAEHC,cAAc,MAQlC,OADApB,MACA,GArGR,uBAwGI,WACI,IAAIQ,EAAW,CACXC,YADW,EAEXC,YAFW,EAGXC,WAHW,gCAIXC,oBAJW,EAKXC,iBALW,EAMXC,cANW,SAOXC,MAPW,cAQP,OAAI,IAACC,GAAD,IAAmBA,GAAvB,KAAyCC,EAC9B,CACHC,UADG,EAEHC,UAAW,uBAGfH,KAAJ,GACQC,KAAJ,EACW,CACHE,UAAW,oBAHvB,IAWR,OADAnB,MACA,GAlIR,2BAqII,WACI,MAAO,CACH,CAAC,QAAS,GAAI,MAAO,GAAI,MAAO,GAAI,MAAO,GAAI,MAD5C,IAEH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAFlC,IAGH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAHnC,IAIH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAJlC,IAKH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GALnC,IAMH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GANlC,IAOH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAPnC,IAQH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GARlC,IASH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GATnC,IAUH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAVlC,IAWH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAXnC,IAYH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAZlC,IAaH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAbnC,IAcH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAdlC,IAeH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAfnC,IAgBH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAhBlC,IAiBH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAjBnC,IAkBH,CAAC,IAAK,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAlBlC,IAmBH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAnBnC,IAoBH,CAAC,KAAM,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GApBnC,IAqBH,CAAC,GAAI,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GArBnC,IAsBH,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAtB1C,MAtIR,yBAgKI,WACI,MAAO,CACH,CAAC,QAAS,QAAS,MAAO,MAAO,MAD9B,OAEH,CAAC,IAAK,KAAM,IAAK,IAAK,IAFnB,KAGH,CAAC,IAAK,KAAM,IAAK,IAAK,IAHnB,KAIH,CAAC,GAAI,KAAM,IAAK,IAAK,IAJlB,KAKH,CAAC,IAAK,KAAM,IAAK,IAAK,IALnB,KAMH,CAAC,GAAI,KAAM,IAAK,IAAK,IANlB,KAOH,CAAC,GAAI,KAAM,IAAK,IAAK,IAPlB,KAQH,CAAC,GAAI,MAAO,IAAK,IAAK,IARnB,KASH,CAAC,QAAS,GAAI,IAAK,IAAK,IAT5B,OAjKR,+BA8KI,YACI,MAAO,CAGHS,YAHG,EAIHC,YAJG,EAKHC,WALG,gCAMHC,oBANG,EAOHC,iBAPG,EAQHC,cARG,SASHO,cAAe,CACX,CACIC,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,GAElB,CACIE,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,EAIIxR,KAJJ,MAKIoR,cAAc,MAxOlC,mCA+OI,YACI,MAAO,CACH,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MADjC,OAEH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAFvB,KAGH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAHvB,KAIH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAJvB,KAKH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IALvB,KAMH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IANvB,KAOH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAPvB,KAQH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IARvB,KASH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IATvB,KAUH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAVvB,KAWH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAXvB,KAYH,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAZ9B,OAhPR,qBAgQI,YACI,IAAIK,EAAW,CACX5X,GAAI6X,EADO,KAEXC,SAAUxT,eAFC,GAGXyT,UAAWnG,aAHA,kBAIXoG,QAJW,GAKXC,OAAQ,IAKNC,EAAwBL,OAXsB,GAa9CI,EAAgBJ,OAAgBA,cAbc,GA8BpD,OAdAI,WAAe,cACX,IAAME,EAASxG,SAAf,GACIyG,MAAJ,GACIH,OAGAA,UAKRL,UA3BoD,EA6BpDA,WACA,GA9RR,qBAiSI,YAeI,IAdA,IAAIA,EAAW,CACX5X,GAAI6X,EADO,KAEXC,SAAUxT,eAFC,GAGXyT,UAAWnG,aAHA,kBAIXoG,QAJW,GAKXC,OAAQ,IAKNC,EAAwBL,OAXsB,GAa9CI,EAAgBJ,OAAgBA,cAAtC,GAEStW,EAAT,EAAoBA,EAAQ2W,EAA5B,OAAgD3W,IAAS,CAErDqW,eAAsBM,EAAtBN,IACA,IAAIO,EAASxG,SAASsG,EAAtB,IACIG,MAAJ,KACID,KAGJP,iBAKJ,OAFAzB,+BACAA,MACA,GA7TR,uBAgUI,YAgBI,IAfA,IAAIyB,EAAW,CACX5X,GAAI6X,EADO,KAEXC,SAAUxT,eAFC,GAGXyT,UAAWnG,aAHA,kBAIXoG,QAJW,GAKXC,OAAQ,IAKNC,EAAwBL,OAXwB,GAchDI,EAAgBJ,OAAgBA,cAAtC,GAEStW,EAAT,EAAoBA,EAAQ2W,EAA5B,OAAgD3W,GAAhD,EAA4D,CAExDqW,eAAsBM,EAAtBN,IACA,IAAIO,EAASxG,SAASsG,EAAtB,IACIG,MAAJ,KACID,KAGJP,iBAKJ,OAFAzB,kCACAA,MACA,GA7VR,4BAgWI,YACI,IAAIkC,EAAJ,EACA,GAAIC,EAAJ,EAEI,IADIA,EAAJ,KAAqBA,MACdA,EAAP,GACID,KACAC,IAGR,UAzWR,uBA4WI,YAEI,IAAK,IAAI/W,EAAT,EAAoBA,EAApB,EAA+BA,IAAS,CAQpC,IAAI8W,EARgC,EAUhCF,EAASxG,SAASkG,UAAmBtW,EAAzC,IACK6W,MAAL,KAAoBC,GAAU,EAXM,GAapCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAU,EAdM,GAgBpCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAU,EAjBM,GAoBpCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAU,EArBM,GAuBpCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAU,EAxBM,GA2BpCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAU,EA5BM,GA+BpCF,EAASxG,SAASkG,UAAmBtW,EAArC4W,IACKC,MAAL,KAAoBC,GAAS1X,KAAK4X,0BAhCE,IAmCpCV,UAAmBtW,EAAnBsW,OAjZZ,yBAqZI,YAEI,IAAK,IAAItW,EAAT,EAAoBA,EAApB,GAAgCA,GAAhC,EAA4C,CAWxC,IAHA,IAAI8W,EAAJ,EAGSG,EAAT,EAAoBA,GAApB,GAAiCA,IAAS,CACtC,IAAIpB,EAAM,EAAIoB,EADwB,EAGlCC,EAAY9G,SAASkG,UAHa,IAKlCa,EAAe/G,SAASkG,UAAqBtW,EALX,IAOlCoX,EAAchH,SAASkG,OAAgBT,EAAhBS,GAAyBtW,EAPd,IASjC6W,MAAD,IAAsBA,MAA1B,KACQ,IAACK,GAAL,IAA0BC,IACtBL,MAASG,GAETC,IAAJ,IACIJ,GAAS,GAATA,GAECI,EAAD,GAAoBA,IAAxB,IACIJ,GAAS,GAAK/S,SAASmT,EAAvBJ,IAECD,MAAL,KAAyBC,OAKjCR,WAAoBtW,EAApBsW,OA1bZ,KCIMe,GAAYnY,IAAlB,oBAEaoY,GAAb,WAqBI,aAAsB,KAjBdC,gBAA8B,KAiBhB,KAddC,OAAgC,KAclB,KAbdC,iBAA8C,KAahC,KAZdC,eAA2C,KAY7B,KAXdC,QAAiC,KAWnB,KAVdC,aAAyC,KAU3B,KATdC,aAAsC,KASxB,KALdC,MAA6B,KAMjC1Y,KAAA,WAAkB2Y,GAAlB,cACA3Y,KAAA,aAAoBsO,GAApB,kBACAtO,KAAA,kBAAyBA,KAAK4Y,kBAAkBna,KAAhDuB,MAxBR,cA2BI,WAII,OAHMkY,EAAN,YACIA,YAA2B,IAA3BA,GAEGA,EAAP,WA/BR,0CAkCI,YACIlY,KAAA,OAAcmY,EAAd,MACAnY,KAAA,sCAA2CA,KAAK0H,OAAO0G,WAAvD,MAAApO,OApCR,mBAuCI,YACIA,KAAA,kBACAA,KAF0C,eAK1CA,KAAA,sBAA6B4M,wBAAwB5M,KAAK0H,OAAOmR,GAAG3B,WAAW4B,IALrC,uBAQrB5L,EAAE,IAAIlN,KAAK0H,OAAOmR,GAAG3B,WAAW4B,IAArD,uBACAC,wBAAsC/Y,KAAtC+Y,mBAGAJ,4DAA8E3Y,KAAKmY,gBAAgB9W,MAAM+M,WAAzGuK,WAZ0C,MAgB1C3Y,KAAA,OAAc4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAhBrC,UAkB1C9Y,KAAA,iBAAwB4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAlB/C,WAoB1C9Y,KAAA,eAAsB4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IApB7C,gBAsB1C9Y,KAAA,QAAe4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAtBtC,OAwB1C9Y,KAAA,aAAoB4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAxB3C,KA0B1C9Y,KAAA,aAAoB4M,wBAAwB5M,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IA1B3C,YA6B1C9Y,KAAA,qBAA4BA,KAAKgZ,qBAAqBva,KAAtDuB,MACAA,KAAA,iBAAwBA,KAAKiZ,iBAAiBxa,KAA9CuB,MACAA,KAAA,eAAsBA,KAAKkZ,eAAeza,KA/BA,MAkCtCuB,KAAJ,gBAAyBA,KAAKsY,eAAea,iBAAiB,QAASnZ,KAA9C,sBACrBA,KAAJ,cAAuBA,KAAKwY,aAAaW,iBAAiB,QAASnZ,KAA5C,kBACnBA,KAAJ,SACIA,KAAA,oCAAyC,YACrCoZ,sBAEJpZ,KAAA,+BAAqCA,KAArC,kBA/EZ,oBAqFI4Y,cACIQ,mBACAA,oBACAnB,GAAU,QAAQY,OAAT,kBAAkCA,OAAlC,MAH4B,aAKrCO,mBALqC,GAQjCT,iBAAJ,eACIA,4BAA8CE,OAA9CF,OAGAU,yDAjGZ,mBAsGIJ,YAGI,GAFAhB,GADgC,gBAG5BjY,KAAKsO,WAAWgL,uBAAyBtZ,KAAKsO,WAAlD,eAA6E,CAGzE,IAAKiL,QAAL,kDAHyE,OAMzEvZ,KAAA,WANyE,gBASzEA,KAAA,mBACG,CAGH,IAAKuZ,QAAL,kDAHG,OAMHvZ,KAAA,WANG,QAUHA,KAAA,iBA7HZ,uBAiIIgZ,YACIf,wBACIjY,KAAKsO,WAAT,eACItO,KAAA,wBAEAA,KAAA,yBAtIZ,iBA0IIkZ,YAEI,GADAjB,wCACIjY,KAAKsO,WAAWgL,uBAAyBtZ,KAAKsO,WAAlD,eAA6E,CAEzE,IAAMkL,EAAoBJ,uBAA2BpZ,KAAKmY,gBAAgB9W,MAAMwX,GAAGY,UAAnF,oBACMC,EAAgB/V,WAAtB,GACAsU,MAEIyB,EAAc1Z,KAAKmY,gBAAgB9W,MAAMwX,GAAGY,UAA5CC,eAAuE1Z,KAAKmY,gBAAgB9W,MAAMwX,GAAGY,UAAzG,iBAEIzZ,KAAA,sBAA2B0Z,EAA3B,YApJhB,eA0JI,WACI1Z,KAAA,MADkB,KAIdA,KAAJ,mBAA2BA,KAAKqY,iBAAiBsB,UAAY,IACzD3Z,KAAJ,iBACIA,KAAA,yBAAgC,SAAWA,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAApF,UACA9Y,KAAA,+CACA4Z,oBAA6B5Z,KAA7B4Z,iCACAA,oBAA6B5Z,KAA7B4Z,kCAEA5Z,KAAJ,UAAkBA,KAAKuY,QAAQoB,UAAY3Z,KAAK6Z,mBAA9B,IACd7Z,KAAJ,eAAuBA,KAAKwY,aAAasB,UAAY9Z,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAAvE,WACnB9Y,KAAJ,cAAuB4Z,qBAA8B5Z,KAA9B4Z,eAvK/B,cA4KI,mBAA4D,IAA3BG,OAAoB,GAEjD9B,GAAU,kBAAD,MAATA,GACIjY,KAAJ,iBACI,GACIA,KAAA,yBAAgC,WAAaA,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAAtF,UACAc,oBAA6B5Z,KAA7B4Z,iCACAA,oBAA6B5Z,KAA7B4Z,mCAEA5Z,KAAA,yBAAgC,WAAaA,KAAKmY,gBAAgB9W,MAAMwX,GAAG3B,WAAW4B,IAAtF,eACAc,oBAA6B5Z,KAA7B4Z,iCACAA,oBAA6B5Z,KAA7B4Z,kCAEJ5Z,KAAA,4CAEAA,KAAJ,UAAkBA,KAAKuY,QAAQoB,UAAY3Z,KAAK6Z,mBAA9B,KA3L1B,eA8LItO,gBACI,GAAI9N,IAASuC,KAAK0H,OAAO0G,WAAzB,MAA2C,CAEvC,IAAM2K,EAAe7L,EAAE,IAAIlN,KAAK0H,OAAOmR,GAAG3B,WAAW4B,IAFd,uBAInCkB,EAAa1L,GAJsB,sBAMjC2L,EAAN,GACA3K,WAAiB,YACb,IAAM4K,EAAc,CAChBC,MAAO9X,EADS,SAEhBnE,MAAOmE,EAAKhD,IAGZ2a,IAAe3X,EAAnB,UAAkC4X,OANN,MAQhClB,eAA0B,CAACqB,OAAQH,IACnClB,wBAAoC,CAACsB,UAAD,EAAkBC,UAAW,QAE9D,CACH,IAAIpD,EAAJ,EASA,GARAe,2BACAA,MACIjY,KAAJ,gBAAyBA,KAAKsY,eAAeiC,gBAJ1C,YAOCva,KAAJ,mBAA2BA,KAAKqY,iBAAiBsB,UAAY,GAAGzC,EAP7D,eAUClX,KAAJ,MAAgB,CAEZ,IAAIwa,EAFQ,GAIZtD,gBAAwB,cACpBT,WAAY,cACR+D,OAAe,CAACC,EAAUC,EAA1BF,UAGRvC,qBACAA,GAVY,GAYZjY,KAAA,sBAAoC2Y,GAApC,kBAKA,GAAI3Y,KAAJ,aAAuB,CACnB,IAAM0V,EAAY1V,KAAKsO,WAAvB,uBACA,IACI4I,qBAAgCzB,uCAAhCyB,IAEJA,0BAAqCA,EAArCA,KACAlX,KAAA,MAAa,IAAI,GAAJ,EACTA,KADS,aAETkX,EARe,oBAUnBlX,KAAA,4BAAkCA,KAAKsO,WAAvC,kBAMJtO,KAAJ,UAAkBA,KAAKuY,QAAQoB,UAAY3Z,KAAK6Z,mBAAmB3C,EAAjD,UA5P9B,eAiQI,WACI,OAAIlX,KAAJ,MACWA,KAAK0Y,MAAZ,UAEA,IArQZ,wBAyQIlN,gBACIxL,KAAA,iBAAqCA,KAAK8L,aAAavK,eAAvD,KA1QR,0BA6QI8J,kBA7QJ,0BAgRIC,oBAhRJ,qBAmRI,YACI,IAAI7O,EAAJ,GACA,OAAIke,EACAle,eAEA,GAAIke,GAAJ,GAAiB,CACb,IAAIC,EAAQjW,WAAWgW,EAAvB,MACIE,EAAUlW,WAAWgW,EAAzB,IACIG,EAAUH,OAASC,EAAvB,GAAwCC,EACpCD,EAAJ,IACIne,GAAame,EAAbne,KAIIA,GAFJoe,EAAJ,EACQA,EAAJ,GACc,IAAJ,EAANpe,IAEaoe,EAAbpe,IAGJA,MAIIA,GAFJqe,EAAJ,EACQA,EAAJ,GACc,IAAVre,EAEU,GAAVA,EAGJA,UAGJA,QAGQA,GAFJke,EAAJ,EACQA,EAAJ,GACc,IAAVle,EAEU,GAAVA,EAGJA,KAIZ,UA9TR,KCRMse,GAAajb,IAAnB,gBAEakb,GAAb,WAiBI,aAAsB,KANdC,KAAmB,KAML,KALdC,UAAgC,KAKlB,KAJdC,cAAoC,KAItB,KAHdC,QAAmC,KAIvCpb,KAAA,SAAgBA,KAAKqb,SAAS5c,KAA9BuB,MACAA,KAAA,mBAnBR,cAII,WAII,OAHMgb,EAAN,YACIA,YAAwB,IAAxBA,GAEGA,EAAP,WARR,+CAsBI,WACQ1M,GAAJ,eAEItO,KAAA,KAAY,IAAIsb,KAAKhN,GAAT,sBAA2C,CAACiN,KAAD,UAAkBC,KAAlB,IAA6B1b,MAA7B,EAAuC2b,QAAO,IAErGzb,KAAA,gBAAqB,YACjB+a,GAAW,kBAAXA,QA5BhB,aAiCI,YACI/a,KADmC,sBAGnCA,KAAA,UAAiB4M,wBAAwBuL,0BAHN,SAjC3C,kBAwCI,WAAyB,WACrB,IACQ7J,GAAJ,cACQoN,uBAAJ,eACIX,iCACAW,oCAAoC,CAChCC,OADgC,EAEhCC,OAAO,IAFXF,MAGQ,YACJX,uDACA,kBACA,iBAAoBzM,GAApB,sBAAsD,EAAtD,sBAMhB,MAAOrD,GACH8P,MACAA,mDA3DZ,QA+DI,WAAe,WACXA,YACI/a,KAAK6b,iBAAmB7b,KAAK6b,gBAAgBjgB,OAAjD,IACImf,8BACA/a,KAAA,yBAA6B,YACzB+a,qCACA,oBAGJ/a,KAAJ,WAAoB4Z,qBAA8B5Z,KAA9B4Z,WACpB5Z,KAAA,mBACIA,KAAJ,OACI+a,GADW,yBAGP/a,KAAJ,eACIA,KAAA,mCAAuC,mBAAW8b,EAAX,UAEvC9b,KAAJ,UAAkBA,KAAKob,QAAQW,UAAY,MAC3C/b,KAAA,qBAjFZ,iBAqFI,gBAAqF,WAGjF,QAHiF,IAAvBgc,OAAgB,KAE9Dhc,KAAK6b,gBAAgBpb,WAAU,mBAAU4N,IAAV,MAC3C,IAEArO,KAAA,wBAEA,IAAMic,EAAkBrP,uBAAxB,OACAqP,uBACArC,qDACA,IAAMsC,EAAYtP,uBAAlB,OACAgN,8BACA,IAAMuC,EAAiBvP,uBAAvB,OACAgN,qCACAuC,gDACA,IAAMC,EAAgBxP,uBAAtB,OACAgN,mDACA,IAAMgC,EAAQhP,uBAAd,SAOA,GANAgN,gCAEAsC,iBACAA,iBACAE,iBAEA,EAAmB,CACf,IAAMC,EAAkBzP,uBAAxB,OACAgN,qCACA,IAAM0C,EAAgB1P,uBAAtB,OACAgN,mEACA,IAAM2C,EAAkB3P,uBAAxB,UACA2P,gCACA3C,oDACA2C,iDACA,IAAMC,EAAgB5P,uBAAtB,UACA4P,gCACA5C,oDACA4C,+CAEAF,iBACAA,iBAEAD,iBAEAH,iBAEAK,4BAAyC,WACpBX,EAAjB,QAEIA,SACAhC,wCACAA,0CAIAgC,UACAhC,wCACAA,4CAIR4C,4BAAuC,WACnBZ,EAAhB,OAEIA,WACAhC,wCACAA,0CAIAgC,WACAhC,wCACAA,4CAKR5Z,KAAA,UAGJic,iBACAL,cACAA,qCAAyC,WACrCA,SACI,EAAJ,WAAoB,2BAxKhC,WA4KI,YAAgC,WAE5B,GADAb,GAAW,sBAAXA,GACI0B,IAAWnO,GAAf,uBACA,IAAIoO,EAAJ,EAGA,KADY1c,KAAK6b,gBAAgBpb,WAAU,mBAAU4N,IAAV,MAC3C,GAEA,IAAMsO,EAAWC,aAAY,WAEzB,GADA7B,GAAW,gBAAXA,GACI,EAAJ,cAAwB,CACpB,IAAM/e,EAAO,cAAuB,EAApC,eACA,GACIA,eAAkB,YACd+e,GAAW,QAAD,EAAVA,6BACA,4BAEJ8B,oBAIAH,EACA,GAA0BG,oBAdtC,OApLR,aAwMI,YACI9B,GAAW,wBAAXA,GACA,IAAIna,EAAQZ,KAAK6b,gBAAgBpb,WAAU,mBAAU4N,IAAV,KACvCzN,GAAJ,GACIZ,KAAA,4BAEJ,IAAM8c,EAAgBlQ,wBAAtB,GACA,KAAmB,CACfmO,GAAW,wBAAD,EAAVA,6BACA,IAAMgC,EAAgCD,gBAAtC,UACA,IACIC,kBAGJnD,wBACA,IAAMoD,EAAaF,EAAnB,WACA,GAAgBE,mBAxN5B,0BA4NIC,YAAwC,WACpC,IACQ3O,GAAJ,eACIyM,GAAW,iCAAXA,GACIW,uBAAJ,cACIA,oCAAoC,CAChCC,OADgC,EAEhCC,OAAO,IAFXF,MAGQ,YACJ,kBACA,iBAAoBpN,GAApB,sBAAsD,EAAtD,kBACAyM,GAAW,sBAAXA,GACA,kBAAqB,YACjBA,GAAW,uBAAXA,GACA/e,SAAY,EAAZA,eACAA,eAAkB,YACdqd,kBACA0B,oCACA,mCAOxB,MAAO9P,GACH8P,MACAA,gDAvPZ,KCWMmC,GAAYpd,IAAlB,0BAEa6Y,GAAb,WAgBI,aAAsB,KAZdR,gBAA8B,KAYhB,KAXdgF,iBAAkC,KAWpB,KAVdC,2BAAyC,KAU3B,KATdC,kBAAuC,KASzB,KARdxN,gBAA0B,GAQZ,KAPdyN,eAAyB,EAOX,KALdC,yBAAqC,GAKvB,KAJdC,eAAyB,EAK7Bxd,KAAA,aAAoB,IAApB,EACA+P,kBAFkB,MAKlB/P,KAAA,aAAoBA,KAAKgQ,aAAavR,KAAtCuB,MACAA,KAAA,cAAqBA,KAAKiQ,cAAcxR,KAAxCuB,MACAA,KAAA,kBAAyBA,KAAKkQ,kBAAkBzR,KAAhDuB,MACAA,KAAA,eAAsBA,KAAKmQ,eAAe1R,KAA1CuB,MACAA,KAAA,sBAA6BA,KAAKoQ,sBAAsB3R,KAAxDuB,MACAA,KAAA,qBAA4BA,KAAKqQ,qBAAqB5R,KAAtDuB,MACAA,KAAA,kBAAyBA,KAAKsQ,kBAAkB7R,KAAhDuB,MACAA,KAAA,iBAAwBA,KAAKuQ,iBAAiB9R,KAA9CuB,MACAA,KAAA,iBAAwBA,KAAKyd,iBAAiBhf,KAA9CuB,MACAA,KAAA,cAAqBA,KAAK0d,cAAcjf,KAAxCuB,MACAA,KAAA,WAAkBA,KAAK2d,WAAWlf,KAAlCuB,MACAA,KAAA,aAAoBA,KAAK4d,aAAanf,KAAtCuB,MACAA,KAAA,WAAkBA,KAAK6d,WAAWpf,KAAlCuB,MACAA,KAAA,eAAsBA,KAAK8d,eAAerf,KAA1CuB,MACAA,KAAA,qBAA4BA,KAAK+d,qBAAqBtf,KAAtDuB,MACAA,KAAA,WAAkBA,KAAKge,WAAWvf,KAAlCuB,MACAA,KAAA,8BAAqCA,KAAKie,8BAA8Bxf,KAAxEuB,MACAA,KAAA,aAAoBA,KAAKke,aAAazf,KAAtCuB,MACAA,KAAA,MAAaA,KAAKme,MAAM1f,KAvBN,MA2BlBuB,KAAA,QA3CR,cA+CI,WAII,OAHM2Y,EAAN,YACIA,YAAiC,IAAjCA,GAEGA,EAAP,WAnDR,wCAsDI,WACI,IAAIlc,GAAJ,EAIA,OAHIuD,KAAJ,oBACIvD,EAASuD,KAAKqd,kBAAd5gB,YAEJ,GA3DR,kBA8DI,WACI,OAAOuD,KAAP,cA/DR,iBAkEI,WACI,OAAOA,KAAP,kBAnER,eAsEIgQ,cAtEJ,gBAyEIC,cAzEJ,iBA4EI,YACIiN,GAAU,wBAAVA,GACAld,KAAA,mBA9ER,iBAiFI,WACI,OAAOA,KAAP,iBAlFR,aAqFI,YACIA,KAAA,kBACAgb,gCAvFR,oBA0FI9K,YACI,GAAKlQ,KAAL,cACImR,SAAgB3I,EAApB,YAEA,IAAIiH,qCAA8C0B,EAAlD,MAMA,OAAInR,KAAJ,oBACIkd,GADwB,wDAGpBld,KAAKqd,kBAAkBxT,OAASsH,EAApC,OAEI+L,gEACAnN,oBAAgCoB,EAAhCpB,KAA6C/P,KAA7C+P,iBAAoEvH,EAHvB,mBAQjD2I,EAAJ,uBAESoI,QAAQ,iCAAiCpI,EAAlC,iDAAyFA,EAAzF,QAAZ,iBAQJ6J,yCAAkD7J,EA/BV,MAmCxC1C,uDACAsB,WAAuB/P,KAAvB+P,iBAA8CoB,EAA9CpB,KAA2DvH,EAA3DuH,YACA/P,KAAA,iBAAwBmR,EAAxB,KACAnR,KAAA,2BAAkCmR,aAAlC,UACAnR,KAAA,kBAAyBmR,aAAzB,WAEA7C,yBAAiC6C,aAzCO,WA4CpCnR,KAAJ,iBACIA,KAAA,gCACAA,KAAA,cAGJkY,oCAAkDlY,KAjDV,mBAsDxCA,KAAA,4CA9BQ+P,oBAAgCoB,EAAhCpB,KAA6C/P,KAA7C+P,iBAAoEvH,EAD4D,aAlBpI0U,qDA/FZ,uBAmJI,WACI,OAAOld,KAAP,4BApJR,wBAuJIoQ,YAA2C,WAClCpQ,KAAL,cAEKA,KAAL,kBAEA8R,WAAiB,YACTnH,SAAiBnC,EAArB,YACQ,qBAA0BmC,EAA9B,MACI,wBA/JpB,uBAqKI0F,YAAyC,WAChCrQ,KAAL,cAEA6R,WAAgB,YACRV,SAAgB3I,EAApB,YACI,2BA1KhB,iBA+KIkJ,gBACQlM,IAASgD,EAAb,aACA0U,GAAU,4BAAD,WAATA,GACIld,KAAJ,kBACQA,KAAKmd,mBAAT,GACI1O,wEApLhB,oBAyLI6B,YACQO,SAAerI,EAAnB,aACKxI,KAAL,cACI6Q,aAAmB7Q,KAAvB,kBAEIA,KAAKmd,mBAAqBtM,EAA9B,OAEAqM,GAAU,wBAAwBrM,EAPG,UASzB7Q,KAAKud,yBAAyB9c,WAAU,mBAAciJ,IAAamH,EAA3B,YACpD,IACI7Q,KAAA,8BAAmC6Q,EADxB,UAKP7Q,KAAJ,mBAA4BA,KAAKoe,sBAAsBpe,KAA3B,oBAE5BA,KAAKsd,eAAiBtd,KAA1B,oBACIkd,GAAU,wBAAwBrM,EAAzB,SAATqM,cACAld,KAAA,oBAAyB6Q,EAAzB,UACA7Q,KAAA,oBAAyBA,KAAzB,uBAEJyO,OAAczO,KAAKod,2BAAnB3O,aAA4DoC,EAA5DpC,sDA/MR,mBAkNI8B,YACI,GAAIM,SAAerI,EAAnB,YACKxI,KAAL,cACI6Q,aAAmB7Q,KAAvB,kBAEIA,KAAKmd,mBAAqBtM,EAA9B,MAEAqM,GAAU,sBAAsBrM,EAAhCqM,UAEA,IAAItc,EAAQZ,KAAKud,yBAAyB9c,WAAU,mBAAciJ,IAAamH,EAA3B,YAChDjQ,GAAJ,IACIZ,KAAA,kCADY,GAGZA,KAAA,yBAA8B6Q,EAHlB,UAKR7Q,KAAJ,mBAA4BA,KAAKoe,sBAAsBpe,KAA3B,oBAE5BA,KAAKsd,eAAiBtd,KAA1B,oBACIkd,GAAU,sBAAsBrM,EAAvB,SAATqM,cACAld,KAAA,oBAAyBA,KAAzB,uBAEJyO,OAAczO,KAAKod,2BAAnB3O,aAA4DoC,EAA5DpC,kDAvOR,kBA0OI+B,cA1OJ,gBA6OI,WAEI0M,kCACIld,KAAKsd,eAAiBtd,KAA1B,mBAAkDA,KAAKqe,0BAA0Bre,KAA/B,mBAC9CA,KAAJ,eACQA,KAAKmd,kBAAoBnd,KAA7B,oBACIkd,4CACAld,KAAA,oBAAyBA,KAAzB,mBAFiD,IAMrDA,KAAA,SAGJA,KAAA,QACAA,KAAA,0DA5PR,kBA+PI,YACI,IACIkd,GAAU,4BAA4BxH,EAAtCwH,MACAld,KAAA,6BACIA,KAAJ,eAAuBA,KAAKud,yBAA2B,CAACvd,KAAjC,mBACvBA,KAAA,iBACAA,KAAA,iBAAwBgG,EAAxB,cACAhG,KAAA,kBAAyB,CACrB6J,KAAM7J,KADe,iBAErBse,cAAe5I,EAFM,KAGrB6I,mBAAoB9I,uCAHC,GAIrBkF,MAJqB,EAKrB6D,YALqB,EAMrBpjB,KAAMqa,2CANe,GAOrBgJ,YAAY,GAEhBvB,GAAUld,KAAVkd,mBAEAlC,iBAjBW,kBAoBXhb,KAAA,4BAAiCA,KAAKmY,gBAAgB9W,MAAM+M,WAA5D,WAAmFpO,KAAnF,mBApBW,GAuBPA,KAAJ,cAAuB+P,WAAuB/P,KAAvB+P,iBAA8C/P,KAA9C+P,iBAAqEvH,EAArEuH,cAvRnC,sBA4RI,WACI,IAAItT,GAAJ,EAKA,OAJIuD,KAAKmd,kBAAT,OAA8Bnd,KAAKmd,mBAC/BD,GAAUld,KAAVkd,kBACAzgB,MAEJ,GAlSR,aAqSI,YACSuD,KAAL,cAEKA,KAAD,kBAA4BA,KAAhC,6BACIkd,GAAU,iBAAD,EAATA,mBACIld,KAAJ,eACIyO,OAAczO,KAAKod,2BAAnB3O,gEACAsB,aAAyB/P,KAAzB+P,mBAA0D/P,KAA1D+P,iBAAiFvH,EAAjFuH,cAA8G/P,KAAKod,2BAAnHrN,KAAoJ,CAChJmH,WAAYlX,KADoI,kBAEhJ0V,UAAW1V,KAAKod,8BAGpB/D,gEAjThB,iBAsTI,YAGI,GAFA6D,gCACAA,MACKld,KAAL,cACI2K,SAAiBnC,EAArB,YACImC,SAAiB3K,KAArB,kBAEIA,KAAJ,kBACQA,KAAKmd,mBAAqBxS,EAA9B,KAA4C,CACxC,GAAI8E,qCAA8C9E,EAAlD,MAEI,YADAuS,oDAMJ,GAFAA,GAAU,oCAAoCvS,EAA9CuS,MACAA,MACIvS,EAAJ,WAAwB,CAEpB,IAAIuM,EAAyBvM,EAA7B,WAIA,GAHAuS,GAHoB,GAMhBld,KAAJ,kBAA4B,CACxB,IAAI0e,EAAgB1e,KAAKqd,kBAAzB,WACArd,KAAA,uBAA8B2K,EAA9B,KACA3K,KAAA,gCAAuCkX,EAAvC,cACAlX,KAAA,uBAA8BkX,EAA9B,KACAlX,KAAA,wBAAgCkX,QAAmBlX,KAAKqd,kBAAzB,MAAoDnG,EAApD,MAAuElX,KAAKqd,kBAA3G,MACArd,KAAA,6BAAoCkX,EAApC,WACAlX,KAAA,qCAA4CkX,EAA5C,mBACAlX,KAAA,6BAAoCkX,EARZ,WAWpBA,EAAJ,WACI,IAIIlX,KAAA,gCACAA,KAAA,cAGJ,GAEIA,KAAA,gCAQZkd,0BACAA,GAAUld,KArCU,mBAuChBA,KAAJ,mBAA4BA,KAAKoe,sBAAsBpe,KAA3B,sBACxBkX,EAAJ,aACImC,MADuB,2CAGvBrZ,KAHuB,QAMvBA,KANuB,QASvBkY,gCAEAlY,KAAA,6DAzXxB,eAiYI,WACI,OAAOA,KAAP,eAlYR,4BAqYI,WACI,IAAIkX,EAAJ,KACIsD,EAAYtC,iBAAhB,eAYA,OAXIlY,KAAKqd,mBAAqBrd,KAA9B,mBACIkX,EAAa,CACTrN,KAAM7J,KADG,iBAET5E,KAFS,EAGTkjB,cAAete,KAAKod,2BAHX,KAITzC,MAAO3a,KAAKqd,kBAJH,MAKTkB,mBAAqBve,KAAD,2BAAoCyV,uCAAoDzV,KAAxF,4BALX,KAMTwe,WAAYxe,KAAKqd,kBANR,WAOToB,YAAY,IAGpB,GAnZR,sBAsZI,cACI,QADkF,IAAnCA,OAAsB,GACjEze,KAAKmd,kBAAoBnd,KAA7B,aAAgD,CAC5C,IAAM4K,EAAUoG,SAASC,aADmB,mBAG5ClB,cACI/P,KADJ+P,iBAEI/P,KAFJ+P,0BAKIvH,EALJuH,WAMIxH,EANJwH,YA1ZZ,aAqaI,WAAoB,WAChBmN,2BACKld,KAAL,oBAEAA,KAAA,gCACAA,KAAA,cAAqB4c,aAAY,WACzB,qBAA0B,oBAA9B,YACI,4BACA1E,6BAAyC,oBAAzCA,OAAwE,oBAAxEA,aAEI,EAAJ,oBACI,kCACAA,6BAAyC,oBAAzCA,OAAwE,oBAAxEA,eAPZ,KAWIlY,KAAJ,mBACIA,KAAA,sBAA2BA,KAA3B,mBAEAA,KAAK2e,cAAgB3e,KAAzB,oBAEIkd,iDACAld,KAAA,oBAAyBA,KAAzB,yBA3bZ,aA+bI,WACIkd,2BACIld,KAAKwd,cAAT,IACIX,cAAc7c,KAAd6c,eACA7c,KAAA,iBAEIA,KAAJ,oBACIA,KAAA,gCACAA,KAAA,sBAA2BA,KAA3B,mBACAkY,6BAAyClY,KAAKqd,kBAA9CnF,OAAwElY,KAAKqd,kBAA7EnF,aAKAlY,KAAK2e,cAAgB3e,KAAzB,oBACIkd,gDACAld,KAAA,oBAAyBA,KAAzB,yBA/chB,mBAodI,cAEI,GADAkd,GAAU,+BAAVA,GACI9C,IAAWzB,EAAf,aAGA,SAAIyB,EAAJ,CAEA,IAAIlD,EAAgClX,KAApC,4BAIA,GAHAkd,kCACAA,MACAA,MACA,EAAgB,CACZA,qDACA,IAAM0B,EAAuBnJ,8CAA2DzV,KAA3DyV,2BAA7B,GACA,GACIyH,MAGJld,KAAA,2BACIA,KAAJ,eACIkd,gDACAld,KAAA,8BAzehB,QA8eI,WACIkd,4BACIld,KAAKqd,mBAAqBrd,KAA9B,mBACQA,KAAJ,cACI+P,YAAwB/P,KAAxB+P,iBAA+C/P,KAA/C+P,iBAAsEvH,EAAtEuH,YAEJ/P,KAAA,QACAA,KAAA,2DArfZ,sBAyfI,YACQsO,GAAJ,eACI4O,GAAU,gBAAVA,GACAlC,+BA5fZ,2BAggBI,YACIkC,GAAU,iBAAVA,GACAlC,gCAlgBR,QAqgBI,WACIhb,KAAA,sBACAA,KAAA,uBACAA,KAAA,gCACAA,KAAA,iBACAA,KAAA,4BACAA,KAAA,gCACAgb,0BA5gBR,aA+gBI,WACI,OAAQhb,KAAK4O,iBAAiBmD,OAAOnW,OAArC,GAhhBR,4BAmhBI,YAII,GAHAshB,GADsD,iBAIlDld,KAAJ,2BAAqC,CACjC,IAAMiX,EAAWxB,6BAA0CzV,KAA1CyV,2BAAjB,GACAyH,MACKld,KAAKod,2BAAV,cACIpd,KAAA,2CAEJA,KAAA,+CACAsO,8BAAsCtO,KAAtCsO,gCA9hBZ,wBAkiBI,mBAAuF,IAAjC3M,OAA2B,GAC7E3B,KAAA,oBACAA,KAAA,4BAAiCA,KAAKmY,gBAAgB9W,MAAM+M,WAA5D,WAAmFpO,KAAnF,sBApiBR,gCAuiBI,WACIkd,6CACIld,KAAKwd,cAAT,IACIX,cAAc7c,KAAd6c,eACI7c,KAAJ,mBAA4BkY,6BAAyClY,KAAKqd,kBAA9CnF,WAEhClY,KAAA,kBA7iBR,KAAa2Y,GACKkG,YAAsB,MCFxC,IAAMC,GAAUhf,IAAhB,iBACMif,GAAgBjf,IAAtB,wBAuwBA,GAFmB,I,WAzvBf,c,2BAGAkf,mCACIhf,KAAA,kBACAA,KAAA,oBACAA,KAAA,OAAcA,KAAKmY,gBAH4C,MAK/D,IAAI8G,EAAkB/X,EAAtB,cACA+X,aAA2B,CACvB,CACI/W,UAAWlI,KAAK0H,OAAO0G,WAD3B,WAEIjG,UAAWnI,KAFf,kBAGIoI,IAAKpI,KAAK0H,OAAOuM,KAHrB,QAII5L,UAAU,GAEd,CACIH,UAAWlI,KAAK0H,OAAO0G,WAD3B,OAEIjG,UAAWnI,KAFf,kBAGIoI,IAAKpI,KAAK0H,OAAOuM,KAHrB,SAII5L,UAAU,KAIlB,IAAI6W,EAAU,IAAd,GACAA,aAAmB,CACf,CACIhX,UAAWlI,KAAK0H,OAAO0G,WAD3B,MAEI4F,OAAQhU,KAAKmf,kBAAoBnf,KAAK0H,OAAOuM,KAFjD,QAGIA,KAAM,CACFnR,KADE,GAEFvE,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFF,QAASlU,KAAK0H,OAAOuM,KAAKmL,UAAUC,aAExCjkB,KAAM,CACF0H,KADE,GAEFvE,OAFE,GAGF4V,QAHE,GAIFC,OAJE,GAKFF,QAASlU,KAAK0H,OAAOuM,KAAKmL,UAAUE,YAExCjX,UAAU,KAOlB,IAAIkX,EAAc7T,EAAlB,cACI8T,EAAW/c,EAAf,cAEIgd,EAAY,IAAItU,EAAyBoU,EAA7C,GACIG,EAAY,IAAIvU,EAAyBoU,EAA7C,GA6BA,OA1BAA,2BACAA,oBAAuC,CAACvf,KAAK0H,OAAO0G,WAAb,cAAuCpO,KAAK0H,OAAO0G,WAAnD,mBAAkFpO,KAAK0H,OAAO0G,WAA9F,WAAqHpO,KAAK0H,OAAO0G,WAAxKmR,YACAA,oBAAuC,CAACvf,KAAK0H,OAAO0G,WAAb,MAA+BpO,KAAK0H,OAAO0G,WAA3C,WAAkEpO,KAAK0H,OAAO0G,WAA9E,OAAiGpO,KAAK0H,OAAO0G,WAA7G,cAAuIpO,KAAK0H,OAAO0G,WAA1LmR,wBAEAvf,KAAA,aA1D+D,EA6D/DA,KAAA,aAAoBA,KAAKuL,aAAa9M,KAAtCuB,MACAA,KAAA,sBAA6BA,KAAKwL,sBAAsB/M,KAAxDuB,MACAA,KAAA,wBAA+BA,KAAKqL,wBAAwB5M,KAA5DuB,MACAA,KAAA,wBAA+BA,KAAKsL,wBAAwB7M,KAhEG,MAmE/DuB,KAAA,yBAAgCA,KAAK2f,yBAAyBlhB,KAA9DuB,MACAA,KAAA,wBAA+BA,KAAK4f,wBAAwBnhB,KAA5DuB,MACAA,KAAA,6BAAoCA,KAAK6f,6BAA6BphB,KAAtEuB,MACAA,KAAA,sBAA6BA,KAAK8f,sBAAsBrhB,KAtEO,MAyE/DuB,KAAA,yBAAgCA,KAAK+f,yBAAyBthB,KAA9DuB,MACAA,KAAA,8BAAqCA,KAAKggB,8BAA8BvhB,KAAxEuB,MACAA,KAAA,2BAAkCA,KAAKigB,2BAA2BxhB,KA3EH,MA8E/DuB,KAAA,gCAAuC,IAAI+O,IAA3C,GAEA,M,EAMGQ,WAAP,WACIuP,GADsB,2BAGtB,IAAIoB,EAAuB,IAAI,EAAuBlgB,KAAtD,QAKA,GAJA+P,cAJsB,GAOtB+O,GAAQ,mCAAmC9e,KAApC,yBAAiEA,KAAxE8e,uBACI9e,KAAKmgB,oBAAT,EAAkC,CAE9B,IAAI5M,EAAc9D,GAFY,cAK9BmD,iBACAW,iBAA2BvT,KAA3BuT,uBACAoF,gCAAkD3Y,KAPpB,uBAU9BuT,yBAAmCvT,KAAnCuT,iBAEAA,EAZ8B,QAgB9BvT,KAAA,iCAAsCA,KAAK0H,OAAO0G,WAAlD,OAEJ,IAAIgS,EAAyBpgB,KAAKqgB,gCAAgC9e,eAAevB,KAAK0H,OAAO0G,WAA7F,YACAgS,EAAkBpgB,KAAKsgB,sBA3BD,GA+BtBtgB,KAAA,yBAA8B,CAACugB,WAAYH,IAG3CpgB,KAAA,2C,EAGGwgB,gBAAP,WACI,OAAOxgB,KAAP,c,EAGG2e,WAAP,WACI,IAAIA,GAAJ,EACA,IAEI,iBACIA,MAEN,MAAOza,IAET,U,EAGGic,kBAAP,WACI,IAAI1jB,GAAJ,EACA,IAEI,iBAEIA,kBAEN,MAAOyH,IAGT,OADA6a,GAAc,wBAAdA,GACA,G,EAGG0B,oBAAP,WACI,IAAIhkB,EAAJ,GACA,IAEI,mBAEIA,oBAEN,MAAOyH,IAGT,OADA6a,GAAc,qBAAdA,GACA,G,EAGGpQ,cAAP,YACImQ,O,EAGGlQ,eAAP,WACI,OAAO5O,KAAP,qB,EAIJwL,sCAGI,OAFAsT,GAAQ,iBAAD,aAAPA,iBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK9e,KAAK0H,OAAO0G,WAAjB,Y,EAgBhB/C,wCAGI,OAFAyT,GAAQ,iBAAD,aAAPA,oBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK9e,KAAK0H,OAAO0G,WAAjB,a,EAShB9C,0CAGI,OAFAwT,GAAQ,iBAAD,aAAPA,mBACAA,MACA,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,gCACA,GACI,KAAK9e,KAAK0H,OAAO0G,WAAjB,Y,EAUhB7C,6BAII,OAHAuT,GAAQ,iBAAD,aAAPA,KACAA,GAFyD,GAIzD,GACI,gBACA,aAEI,OADAA,GAAQ,uBAAD,kBAAPA,kCACA,GACI,KAAK9e,KAAK0H,OAAO0G,WAAjB,QAGA,KAAKpO,KAAK0H,OAAO0G,WAAjB,SAGA,KAAKpO,KAAK0H,OAAO0G,WAAjB,U,EAUTsS,sBAAP,YAEI5B,sCACAA,GAH+C,GAM/C,IAAI6B,EAA4B3gB,KAAKmY,gBAAgB9W,MAArD,WACYsf,EAAA,WAA6B,mBAAWziB,WAAiBwX,EAA5B,WACzC,EACIoJ,qCAKJpJ,YAAsBpB,GAAtBoB,WACAiL,UACA7B,gDACAA,MAEA9e,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACugB,WAAYI,IAG3C7b,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAK2M,kBAAtE9b,YAAqG,CAAC+b,OAAQnL,EAAUmL,QAAS7gB,KAAjI8E,yBAAgK9E,KAAK0H,OAAO0G,WAA5KtJ,iB,EAGG6a,yBAAP,gBAEI,GADAb,GAAQ,iDAAD,kBAAPA,GACIxW,QAAiBA,GAArB,IAAoC,CAChCwW,MACA,IAAMgC,EAAmB1lB,OAAU4E,KAAK0H,OAAOuM,KAAK2M,kBAApD,YACA9B,MACA,IAAIiC,EAAJ,SACAD,cAA+BA,wBAA/BA,QACAC,aACAD,cAA+BA,wBAA/BA,KACAC,aACAD,cAA+BA,wBAA/BA,KACAC,YACAD,cAA+BA,wBAA/BA,KACAC,aACAD,cAA+BA,wBAbC,KAiBhC,IAAIH,EAA4B3gB,KAAKmY,gBAAgB9W,MAArD,WACIT,EAAQ+f,EAAA,WAA6B,mBAAWziB,WAAiB4iB,EAA5B,UACrClgB,GAAJ,GACIke,iCACA6B,gBACA7B,MACAgC,YAA6BxM,GAA7BwM,iBACA9gB,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACugB,WAAYI,KAE3C7B,GAAQ,cAAcgC,EAAf,GAAPhC,iC,EAOLc,wBAAP,gBAA6F,WAEzF,GADAd,GAAQ,sCAAD,mCAAPA,GACIxW,QAAiBA,GAArB,IAAoC,CAChCwW,MACA,IAAMzf,EAAKjE,OAAU4E,KAAK0H,OAAOuM,KAAK+M,kBAAtC,YACAlC,GAHgC,GAMhC,IAAIsB,EAAkBpgB,KAAKmY,gBAAgB9W,MAA3C,WACIT,EAAQwf,EAAA,WAA0B,mBAAea,WAAgB5hB,EAA/B,UACtC,GAAIuB,GAAJ,EAAgB,CACZ,IAAIsgB,EAAoBd,EAAxB,GAKA,GAJAtB,GAAQ,uBAAuBoC,EAAxB,4BAAqE7hB,EAArE,GAAPyf,4BACAoC,YAA8B5M,GAA9B4M,UACAA,KAAuB7hB,EAAvB6hB,GAEIA,EAAJ,YAAmC,CAC/B,IAAMC,EAAK,SAAC/lB,EAAD,OAIX8lB,uBAAsC,YAClC,sCACApc,kBAA2B,cAA3BA,QAAqD,uCAArDA,YACI,CAAC2X,OAAQ,EAAT,iBAAgC2E,YAAaF,EAA7C,GAAmEG,MAAOnK,GAD9EpS,EAGI,oBAHJA,eAKA,uCACAoS,YAAuB5C,GAAvB4C,aAMRlX,KAAA,yBAA8B,CAACugB,WAAYH,IAC3CpgB,KAAA,kDAAuDA,KAAK0H,OAAO0G,WAAnE,sB,EAKLyR,6BAAP,gBAEI,GADAf,GAAQ,yCAAD,qCAAPA,GACIxW,QAAiBA,GAArB,IAAoC,CAChCwW,MACA,IAAMzf,EAAKjE,OAAU4E,KAAK0H,OAAOuM,KAAKqN,uBAAtC,YACAxC,Q,EAIDgB,sBAAP,gBAA2F,WAEvF,GADAhB,GAAQ,qDAAD,mCAAPA,GACIxW,QAAiBA,GAArB,IAAoC,CAChCwW,MACA,IAAMyC,EAAiBnmB,OAAU4E,KAAK0H,OAAOuM,KAAKuN,yBAFlB,YAK5BpB,EAAkBpgB,KAAKmY,gBAAgB9W,MAA3C,WACA0d,GAAc,gCAAgCqB,EAA9CrB,QACAwC,WAAuB,YACnB7L,YAAsBpB,GAAtBoB,UACAqJ,0CACAA,MAEA,yBAEA,IAAIne,EAAQwf,EAAA,WAA0B,mBAAea,WAAgBvL,EAA/B,UAEtC,GADAqJ,GAAc,uCAAsCne,GAApDme,IACIne,GAAJ,EAAgB,CACZ,IAAM6gB,EAAuBrB,EAA7B,GAEArB,GAHY,+BAKZ,2CALY,GAQZqB,qBAEArB,mCACAqB,aAGRA,EAAkBpgB,KAAKsgB,sBAAvBF,GACArB,GAAc,8BAA8BqB,EAA5CrB,QACA/e,KAAA,yBAA8B,CAACugB,WAAYH,IAC3CpgB,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,mB,EAIRsT,yCAIQ1hB,KAAK2e,cAAiBjJ,aAAwBA,cAAwBpB,GAA1E,WAEIxP,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAK0N,yBAAtE7c,YACI,CAAC2X,OAAQzc,KAAT,iBAAgCohB,YAAa1L,EAA7C,GAA2D2L,MAAOnK,IAN/D,SAAC9b,EAAD,QAQH4E,KAAK0H,OAAO0G,WAHhBtJ,eAKAoS,YAAuB5C,GAAvB4C,WAEAA,YAAuB5C,GAAvB4C,iBAGJlX,KAAA,qCAEA,IAAI2gB,EAA4B3gB,KAAKmY,gBAAgB9W,MAArD,WACIT,EAAQ+f,EAAA,WAA6B,mBAAWziB,WAAiBwX,EAA5B,UACzC,GAAI9U,GAAJ,EAAgB,CACZ,IAAMghB,EAAejB,EAArB,GACAjL,YAAsBkM,EAAtBlM,UAEAoJ,iCACA6B,gBACA7B,MACA9e,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACugB,WAAYI,SAE3C7B,GAAQ,cAAcpJ,EAAf,GAAPoJ,gC,EAKR+C,6CAIQ7hB,KAAK2e,cAAiBjJ,aAAwBA,cAAwBpB,GAA1E,WAEIxP,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAK6N,iBAAtEhd,YACI,CAACid,QAASC,IANP,SAAC5mB,EAAD,QAQH4E,KAAK0H,OAAO0G,WAHhBtJ,eAOJ,IAAI6b,EAA4B3gB,KAAKmY,gBAAgB9W,MAArD,WACIT,EAAQ+f,EAAA,WAA6B,mBAAWziB,WAAiBwX,EAA5B,UACzC,GAAI9U,GAAJ,EAAgB,CACZ,IAAMghB,EAAejB,EAArB,GACAjL,YAAsBkM,EAAtBlM,UAEAoJ,iCACA6B,gBACA7B,MACA9e,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,iBACApO,KAAA,yBAA8B,CAACugB,WAAYI,SAE3C7B,GAAQ,cAAcpJ,EAAf,GAAPoJ,gC,EAKRiB,qCACIjB,4CACA,IAAMpJ,EAAwB1V,KAAKiiB,8BAAnC,GACA,MACQvM,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMpB,GAAN,UAIA,KAAMA,GAAN,WAEI,MAEJ,KAAMA,GAAN,iBACA,KAAMA,GAAN,SAOI,GALAtU,KAAA,kDAAuDA,KAAK0H,OAAO0G,WAAnE,cAFuB,UAKhBsH,EAAP,iBACOA,EAAP,GACI1V,KAAJ,aAAuB,CACnB,IAAIkiB,EAAcxM,EAAlB,mBACOA,EAAP,YAEA5Q,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAK+M,kBAAtElc,YACI,CAAC2X,OAAQzc,KAAT,iBAAgC0V,UAAWA,GAC3C1V,KAFJ8E,wBAGI9E,KAAK0H,OAAO0G,WAHhBtJ,eAKA4Q,YAAsBpB,GAAtBoB,SACAA,qBAIAA,YAAsBpB,GAAtBoB,mB,EASxBsK,0CAEI,GADAlB,GAAQ,sDAAsDpJ,EAA9DoJ,QACA,GACQpJ,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMpB,GAAN,iBACA,KAAMA,GAAN,UAEItU,KAAA,4BACIA,KAAJ,cACI8E,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAKqN,uBAAtExc,YACI,CAAC2X,OAAQzc,KAAT,iBAAgCohB,YAAa1L,EAAUmL,QACvD7gB,KAFJ8E,6BAGI9E,KAAK0H,OAAO0G,WAHhBtJ,eAMJ,MAEJ,KAAMwP,GAAN,WAIA,KAAMA,GAAN,Y,EAShB2L,uCAEI,GADAnB,GAAQ,2CAA2CpJ,EAAnDoJ,QACA,GACQpJ,EAAJ,UACI,OAAQA,EAAR,WACI,KAAMpB,GAAN,WAEI,MAEJ,KAAMA,GAAN,UACA,KAAMA,GAAN,iBACA,KAAMA,GAAN,SAEItU,KAAA,8B,EAQZsgB,sBAAR,YACI,IAAI6B,EAAJ,GAwBA,OAvBA5B,WAAmB,YAEf,IAAI3f,EAAQuhB,EAAA,WAAwB,mBAAUlB,WAAgBvL,EAA1B,UACpC,GAAI9U,GAAJ,EAAgB,CAEZ,IAAIwhB,EAAmBD,EAAvB,GACIC,aAA8BA,cAA+B9N,GAAjE,WAIQoB,aAAuBA,cAAwBpB,GAAnD,WAEI6N,qBAORA,aAIR,G,EAIIE,wCAAR,WACQriB,KAAJ,cAEI8E,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,QAAqD9E,KAAK0H,OAAOuM,KAAKuN,yBAAtE1c,YAA4G,CAAC2X,OAAQzc,KAAKmgB,qBAAsBngB,KAAhJ8E,sBAA4K9E,KAAK0H,OAAO0G,WAAxLtJ,gB,EASAqa,gBAAR,WACI,IAAI1iB,EAD0B,GAO9B,OAJKsC,OAAD,KAAiBA,WAArB,YAEItC,EAASsC,WAATtC,WAEJ,G,EAGI6lB,yBAAR,YACI,IAAMC,EAA6BviB,KAAKmY,gBAAgB9W,MAAxD,WACIT,EAAQ2hB,EAAA,WAAqC,mBAAetB,WAAgBvL,EAA/B,UAC7C9U,GAAJ,IACI2hB,cACAviB,KAAA,yBAA8B,CAACugB,WAAYgC,KAG/CviB,KAAA,+CAAoDA,KAAK0H,OAAO0G,WAAhE,kB,EAGI6T,8BAAR,YACI,IAAIvM,EAAJ,KACAqJ,GAFgD,kCAIhD,IAAI1f,EAAK+Z,sBAA0BpZ,KAAK0H,OAAO4G,WAAWkU,OAAOjC,WAAjE,gBAEA,GADAxB,MACA,EAAQ,CAEJ1f,EAAK2R,SAFD,GAIJ,IAAMuR,EAA6BviB,KAAKmY,gBAAgB9W,MAAxD,WACIT,EAAQ2hB,EAAA,WAAqC,mBAAetB,WAAf,KACjDlC,MACIne,GAAJ,IACI8U,EAAY6M,EAAZ7M,IAIR,OADAqJ,MACA,G,EAGI0D,oBAAR,YACI,IACQ/M,EAAJ,YACIA,uBAA8B,YAC1B2L,YAAkB/M,GAAlB+M,aAGJ3L,mB,EAKJgN,uCAAR,cAAyE,WACrE,GAAItI,EAAJ,YAAwB,CACpB,IAAIuI,EAAJ,GAYA,GAXAvI,uBAA2B,YAEXwI,EAAA,uBAA6B,mBAAevgB,OAAYgf,EAA3B,MACzC,IACIA,YAAkB/M,GAAlB+M,iBACAuB,sBACAD,cAKJA,SAAJ,EAAuB,CACnB,IAAMxB,EAAK,SAAC/lB,EAAD,OAGXunB,WAAe,YACX,sCAGA7d,kBAA2B,cAA3BA,QAAqD,uCAArDA,YACI,CAAC2X,OAAQ,EAAT,iBAAgC2E,YAAawB,EAA7C,GAAwDvB,MAAOwB,GADnE/d,EAGI,oBAHJA,eAMA,uCACA+d,YAAwBvO,GAAxBuO,gB,EAMRC,kCAAR,YACQ5L,EAAJ,UACQA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,IAEAA,kBAAJ,IACIA,UAAqBA,UAArBA,GACAA,SAAoBA,SAApBA,M,EAMJ6L,iCAAR,mBACW7L,EAAP,iBACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,cACOA,EAAP,eACOA,EAAP,Q,MC7wBF8L,GAAWljB,IAAjB,W,8NC6DA,G,oBA9DI,sBAAiI,aAC7H,0BAD6H,MAG7H,UAAiB,oBAAjB,IACA,YAAiB,oBAAjB,IAJ6H,E,4GAOjImjB,4BAEIjjB,KAAA,UAFe,MAKf,IAAMkjB,EAAcljB,KAAK4M,SAASuW,eAAenjB,KAAKojB,SAAStK,IAA/D,WACA,UAAIoK,EAAJ,CAEA,IAAMG,EAAgBH,gBAAtB,UACA,GACIG,2BAAwCrjB,KAAxCqjB,a,EAIRC,sBACI,GAAWlK,mBACXpZ,KAAA,gB,EAGJujB,sBACI,IAAIC,EAAOxjB,KAAKyjB,QAAQC,KAAxB,aACI3kB,kBAAJ,MACIykB,SAEAzkB,kBAAJ,MACIykB,UAEJxjB,KAAA,a,EAGI2jB,SAAR,YACI,IAAMT,EAAcljB,KAAK4M,SAASuW,eAAenjB,KAAKojB,SAAStK,IAA/D,WACA,UAAIoK,EAEJ,OAAQljB,KAAKyjB,QAAQC,KAArB,UACI,WAIA,YACIR,gBACA,MAEJ,aAIA,UACIA,mB,cD1CZ,sBACIljB,KAAA,kBACAA,KAAA,kBACAA,KAAA,WACAA,KAAA,UACAA,KAAA,OAAcmY,EAAd,MACAnY,KAAA,aAN6H,EAS7HA,KAAA,aAAoBA,KAAKuL,aAAa9M,KATuF,MAY7HuB,KAAA,eAAsBA,KAAK4jB,eAAenlB,KAA1CuB,MACAA,KAAA,eAAsBA,KAAK6jB,eAAeplB,KAA1CuB,MACAA,KAAA,qBAA4BA,KAAK8jB,qBAAqBrlB,KAAtDuB,MACAA,KAAA,oBAA2BA,KAAK+jB,oBAAoBtlB,KAApDuB,MACAA,KAAA,oBAA2BA,KAAKgkB,oBAAoBvlB,KAApDuB,M,2BAKGuL,aAAP,gBACIvL,KAAA,iB,EAGJwL,sCACIxL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,EAGJ8J,wCACIrL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,EAGJ+J,0CACItL,KAAA,aAAsBA,KAAK8L,aAAavK,eAAxC,K,EAQMyiB,oBAAV,YACI5K,mBACAA,qB,EAGM2K,oBAAV,YACI3K,mBACAA,qB,EAqBMwK,eAAV,YACIZ,GAAS,6BAATA,IACA,IAAM5nB,EAAOuI,eAAe3D,KAAKikB,YAAjC,IACAjB,GAAS5nB,EAH8B,IAKvCge,uBAA2BpZ,KAAKmY,gBAAgB9W,MAAMwX,GAAGY,UAAzDL,uB,EAGM8K,oBAAV,gBAA4F,oBAArCC,MAAkB,MACrEnB,sCACAA,MACA,IAAMoB,EAAYpkB,KAAKojB,SAAvB,IAEMiB,EAAkBrkB,KAAKskB,kBAAkB7mB,EAA/C,GACM8mB,EAAkBvkB,KAAKwkB,wBAAwB/mB,EAArD,GACA,IACI0mB,EAAaC,EAAbD,uBAIJ,IAAIM,EAAuBzkB,KAAK4M,SAAS8X,cAAcN,EAAvD,oBACAxK,sBAAsCwK,EAAtCxK,gBACAA,mBAAmCwK,EAdqD,0BAgBxF,IAAIO,EAAJ,EACA,GAAIP,EAAJ,wBAAuC,CACnC,IAAIQ,EAAyB5kB,KAAK4M,SAAS8X,cAA3C,OAeA,GAdA9K,sBAAwCwK,EAAxCxK,yBACAgL,eAAuBR,EAAvBQ,mBACAA,eAAuBR,EAAvBQ,yBACAA,eAAuBR,EAAvBQ,sBAGAD,EAAS3kB,KAAK4M,SAAS8X,cAAcN,EAArCO,8BACA/K,sBAAqCwK,EAArCxK,0BACA+K,eAAoBP,EAApBO,mBACAA,eAAoBP,EAApBO,yBACAA,eAAoBP,EAApBO,sBAEAC,iBAEIR,EAAJ,mBAAkC,CAC9B,IAAIS,EAAQ7kB,KAAK4M,SAAS8X,cAAcN,EAAxC,gBACAxK,sBAAoCwK,EAApCxK,YACAiL,qBAA0B7kB,KAAK8kB,mBAAmBrnB,EAAlDonB,IACAJ,iBAGJ,IAAIM,EAAgB/kB,KAAK4M,SAAS8X,cAAlC,OAGA,GAFAE,iBAEIR,EAAJ,SAAwB,CACpB,IAAMY,EAAahlB,KAAKilB,cAAcxnB,EAAtC,GACA,GAAIunB,EAAJ,EAAoB,CAChB,IAAIE,EAAuBllB,KAAK4M,SAAS8X,cAAcN,EAAvD,kBACAxK,sBAAsCwK,EAAtCxK,cACAsL,eAAqBd,EAArBc,mBACAA,eAAqBd,EAArBc,yBACAA,eAAqBd,EAArBc,sBACAH,iBACAG,wDACAtL,mBAAmCwK,EAAnCxK,yBAIR,GAAIwK,EAAJ,oBAAmC,CAC/B,IAAIe,EAAsBnlB,KAAK4M,SAAS8X,cAAxC,UAQA,GAPAS,gCACAvL,sBAAqCwK,EAArCxK,qBACIwK,EAAJ,kBACQA,iCAAJ,IACIe,YAAmBf,EAAnBe,kBAGJf,EAAJ,wBAAuC,CACnC,IAAIgB,EAASxY,uBAAb,KACAgN,sBAAqCwK,EAArCxK,yBACAwL,eAAoBhB,EAApBgB,mBACAA,eAAoBhB,EAApBgB,yBACAA,eAAoBhB,EAApBgB,sBACAD,iBAEJA,eAAoBf,EAApBe,mBACAA,eAAoBf,EAApBe,yBACAA,eAAoBf,EAApBe,sBACAA,4BAAiC,YAC7B/L,mBACAA,oBACA,4BAEJ2L,iBAEJ,GAAIX,EAAJ,oBAAmC,CAC/B,IAAIe,EAAsBnlB,KAAK4M,SAAS8X,cAAxC,UAQA,GAPAS,gCACAvL,sBAAqCwK,EAArCxK,qBACIwK,EAAJ,kBACQA,iCAAJ,IACIe,YAAmBf,EAAnBe,kBAGJf,EAAJ,wBAAuC,CACnC,IAAIgB,EAASxY,uBAAb,KACAgN,sBAAqCwK,EAArCxK,yBACAwL,eAAoBhB,EAApBgB,mBACAA,eAAoBhB,EAApBgB,yBACAA,eAAoBhB,EAApBgB,sBACAD,iBAEJA,eAAoBf,EAApBe,mBACAA,eAAoBf,EAApBe,yBACAA,eAAoBf,EAApBe,sBACAA,4BAAiC,YAC7B/L,mBACAA,oBACA,4BAEJ2L,iBAEJ,GAAIX,EAAJ,aAA4B,CACxB,IAAIiB,EAA8BrlB,KAAK4M,SAAS8X,cAAhD,UAQA,GAPAW,gCACAzL,sBAA6CwK,EAA7CxK,qBACIwK,EAAJ,kBACQA,iCAAJ,IACIiB,YAA2BjB,EAA3BiB,kBAGJjB,EAAJ,wBAAuC,CACnC,IAAIgB,EAASxY,uBAAb,KACAgN,sBAAqCwK,EAArCxK,yBACAwL,eAAoBhB,EAApBgB,mBACAA,eAAoBhB,EAApBgB,yBACAA,eAAoBhB,EAApBgB,sBACAC,iBAEJA,eAA4BjB,EAA5BiB,mBACAA,eAA4BjB,EAA5BiB,yBACAA,eAA4BjB,EAA5BiB,sBACAA,4BAAyC,YACrCjM,mBACAA,oBACA,6BAEJ2L,iBAEJN,iBAKJA,eAAqBL,EAArBK,mBACAA,eAAqBL,EAArBK,yBACAA,eAAqBL,EAArBK,sBACA,IAAMa,EAActlB,KAAKulB,4BAA4B9nB,EAlJmC,GAoJlF+nB,EAAWxlB,KAAKylB,wBAAwBhoB,EAA9C,GACMioB,EAAiB1lB,KAAK2lB,iCAAiCloB,EAA7D,GACA,UACI,aASI,OARAulB,iCACApJ,sBAAsCwK,EAAtCxK,qBACA,KAAIwK,aACAO,YAAmBW,OAAqBlB,EAAxCO,WAEAA,cAGJ,GACI,cACI/K,sBAAsCwK,EAAtCxK,wBACAA,sBAAsCwK,EAAtCxK,yBACA,KAAIwK,gBACAO,aAAoB,KAAOP,EAA3BO,aAEJ,MAEJ,aACI,MAEJ,aACI,KAAIP,eACAO,aAAoB,KAAOP,EAA3BO,YAMZ,MAEJ,aAQI,OAPA3B,GAAS,6BAATA,IACApJ,sBAAsCwK,EAAtCxK,qBACA,KAAIwK,aACAO,YAAmBW,OAAqBlB,EAAxCO,WAEAA,cAEJ,GACI,cACI/K,sBAAsCwK,EAAtCxK,wBACAA,sBAAsCwK,EAAtCxK,yBACA,KAAIwK,gBACAO,aAAoB,KAAOP,EAA3BO,aAQZ,MAEJ,eAQI,OAPA3B,GAAS,+BAATA,IACApJ,sBAAsCwK,EAAtCxK,uBACA,KAAIwK,eACAO,YAAmBW,OAAqBlB,EAAxCO,aAEAA,cAEJ,GACI,cACI,KAAIP,gBACAxK,sBAAsCwK,EAAtCxK,0BACAA,sBAAsCwK,EAAtCxK,yBACA+K,aAAoB,KAAOP,EAA3BO,aAEJ,MAEJ,aACI,MAEJ,aACI,KAAIP,eACAO,aAAoB,KAAOP,EAA3BO,aAQpB,U,EAGMiB,sBAAV,cAAmE,WAC/D5C,GAAS,mCAATA,IACAA,MACA,IAAMoB,EAAYpkB,KAAKojB,SAHwC,IAKzDyC,EAASjZ,wBAAwBwX,EAAvC,WACA,GAAYxK,qBANmD,GAS/DkM,OAAa,cACT,IAAMrB,EAAU,wBADuB,GAGnCL,EAAJ,cACIK,mCACAA,+BAAsC,EAAtCA,iBAGAL,EAAJ,aACIK,2BAAkC,EAAlCA,gBAEJzB,GAAS,+BAA+B3gB,EAAxC2gB,IACA,GAAY6C,qB,gOEvVxB,IAAME,GAAUjmB,IAAhB,uBACMkmB,GAAgBlmB,IAAtB,8BAqaA,G,oBAvZI,kBAA0F,aACtF,kBAAqCqY,WAArC,kBAAiFA,gBAAjF,4BAEA,OAAcA,EAAd,MACA,gBAJsF,GAOtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,oBAAyB,4BAAzB,IACA,6BAAkC,qCAAlC,IACA,8BAAmC,sCAAnC,IACA,+BAAoC,uCAApC,IACA,8BAAmC,sCAAnC,IACA,4BAAiC,oCAAjC,IACA,6BAAkC,qCAAlC,IAEA,0BAA+B,kCAA/B,IACA,wBAA6B,gCAlByD,IAqBtFrM,2BAAsC,oBAAtCA,aACA,cAAmB,IAAIiD,IAAvB,GACA,uCAA0C,oBAA1C,0BACA6D,wCAEAmT,GAAQ,6BAAgC,oBAAxCA,qBA1BsF,E,4GA8B1FE,oCACIF,GADkC,4BAGlC,IAAMvM,EAAoBJ,uBAA2BpZ,KAAK0H,OAAOmR,GAAGY,UAApE,oBACMC,EAAgB/V,WAAtB,GAGA,GAFAoiB,MAEIrM,EAAc1Z,KAAK0H,OAAOmR,GAAGY,UAA7BC,eAAwD1Z,KAAK0H,OAAOmR,GAAGY,UAA3E,gBACI,OAAQC,EAAc1Z,KAAK0H,OAAOmR,GAAGY,UAArC,cACI,KAAKzZ,KAAK0H,OAAOmR,GAAGY,UAApB,sBAGI,GAAIhK,uCAAgDiK,EAApD,UAEI,YADAqM,GAAWrM,EAAJ,SAAPqM,wCAKJtW,wCAAiDiK,EAAjDjK,Y,EAOhByW,kCACIH,GADgC,+BAGhC,IAAMvM,EAAoBJ,uBAA2BpZ,KAAK0H,OAAOmR,GAAGY,UAApE,oBACMC,EAAgB/V,WAAtB,GAGA,GAFAoiB,MAEIrM,EAAc1Z,KAAK0H,OAAOmR,GAAGY,UAA7BC,eAAwD1Z,KAAK0H,OAAOmR,GAAGY,UAA3E,gBACI,OAAQC,EAAc1Z,KAAK0H,OAAOmR,GAAGY,UAArC,cACI,KAAKzZ,KAAK0H,OAAOmR,GAAGY,UAApB,sBAGI,GAAIhK,qCAA8CiK,EAAlD,UAEI,YADAqM,GAAWrM,EAAJ,SAAPqM,sCAKJtW,sCAA+CiK,EAA/CjK,Y,EAQhBsD,uCACIgT,oDACAA,MACA/lB,KAAA,gBACAA,KAAA,gB,EAGJgT,wCACI+S,GAAQ,yBAAD,EAAPA,cACA/lB,KAAA,gB,EAGJiT,yCACI8S,GAAQ,yBAAD,EAAPA,cACA/lB,KAAA,gB,EAGJ2T,wCACIoS,GAAQ,qCAARA,GACA/lB,KAAA,gB,EAGJ0T,sCACIqS,GAAQ,mCAARA,GACA/lB,KAAA,gB,EAGJijB,4BACI,kCADe,MAGM/V,EAAE,IAAIlN,KAAKojB,SAAStK,IAAIqN,MAA7C,mBACApN,wBAAsC/Y,KAJvB,mBAQfA,KAAA,iBAAwB4M,wBAAwB5M,KAAKojB,SAAStK,IAA9D,wBACA9Y,KAAA,8CAAmD,YAC/C+lB,mBACA3M,sBAEJpZ,KAAA,yCAA+CA,KAbhC,yBAgBfA,KAAA,YAAmB4M,wBAAwB5M,KAAKojB,SAAStK,IAhB1C,kBAoBf9Y,KAAA,qBAA4B4M,wBAAwB5M,KAAKojB,SAAStK,IAAlE,sBACA9Y,KAAA,kDAAuD,YACnD+lB,mBACA3M,sBAEJpZ,KAAA,6CAAmDA,KAzBpC,uBA4BfA,KAAA,gBAAuB4M,wBAAwB5M,KAAKojB,SAAStK,IAA7D,gBAEA9Y,KAAA,uBACAA,KAAA,sB,EAKJskB,gCACI,OAAOjiB,EAAP,I,EAGJmiB,sCACI,OAAOniB,EAAP,I,EAGJkjB,0CACI,OAAOljB,EAAP,U,EAGJojB,sCACI,IAAIhpB,EAAJ,SAOA,OANAupB,kCACAA,GAH6C,GAKxCvW,gCAAyCpN,EAA9C,YACI5F,cAEJ,G,EAGJkpB,+CACI,IAAIlpB,EAAJ,SAWA,OAVAupB,GAAc,yCAAyC3jB,EAFD,UAIlDuQ,iCAAqDvQ,EAAzD,YACI2jB,mBACAvpB,YAEAmW,+BAAmDvQ,EAAvD,YACI2jB,iBACAvpB,aAEJ,G,EAGJonB,2BACIzK,mBACAA,oBACAgN,YAAYhN,EAHkB,QAK9B,IAAMqD,EAASrD,sBAA0BpZ,KAAKojB,SAAStK,IALzB,iBAOxBqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAA3D,oBAEA,GAAIqL,IAAenkB,KAAKojB,SAAStK,IAAjC,8BAKAkN,GAAc,QAAQ5M,EAAT,sCAAb4M,GAEA,IAAI3X,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI2R,SAASyL,IAA9F,GACAsJ,MACA,IAAM7T,EAAWU,mCAAuDvE,EAAxE,UACArO,KAAA,yCATIgmB,6C,EAYRpN,gCAQI,GAPAQ,mBACAA,oBACA2M,GAAQ,QAAQlN,OAAT,kBAAkCA,OAAlC,MAH8B,aAKrCO,mBALqC,IAQjCpZ,KAAKqmB,YAAYnkB,cAAclC,KAAK0H,OAAO0G,WAA3C,mBAA0E,CAAC/O,GAAIwZ,OAAQ3a,OAA3F,IAEA,IAAMooB,EAAqBtmB,KAAKqmB,YAAY9kB,eAAevB,KAAK0H,OAAO0G,WAAvE,oBAEA,GADA2X,GAAQ,4BAA4B/lB,KAAK0H,OAAO4G,WAAWiY,UAA3DR,oBACIO,UAA6BtmB,KAAK0H,OAAO4G,WAAWiY,UAAxD,mBAAsF,CAClFR,GADkF,4CAGlF,IAAM1jB,EAAOikB,EAAb,QACAtmB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,2BAGJpO,KAAA,8BAAmCA,KAAK0H,OAAO0G,WAA/C,mBAA8E,CAC1E/O,GAAIwZ,OADsE,MAE1EnP,SAAUmP,OAAQsB,QAFtB,K,EAMJqM,wBACIxmB,KAAA,WAAgBA,KAAK0H,OAAO0G,WAA5B,mBAA2DpO,KAAKqmB,YAAY9kB,eAAevB,KAAK0H,OAAO0G,WAAvG,qBACApO,KAAA,uBACAA,KAAA,sB,EAGJymB,yBAOI,GANIhpB,IAASuC,KAAK0H,OAAO0G,WAAzB,qBACI2X,mCACAD,EAAW9lB,KAAKqmB,YAAY9kB,eAAevB,KAAK0H,OAAO0G,WAAvD0X,oBACAC,MACA/lB,KAAA,4BAEAvC,IAASuC,KAAK0H,OAAO0G,WAAzB,MAA2C,CAGvC,IAAI4L,EAAa1L,GAHsB,sBAKjCyK,EAAe7L,EAAE,IAAIlN,KAAKojB,SAAStK,IAAIqN,MALN,mBAOjClM,EAAN,GACA6L,WAAiB,YACb,IAAM5L,EAAc,CAChBC,MAAO9X,EADS,SAEhBnE,MAAOmE,EAAKhD,IAEZ2a,IAAe3X,EAAnB,UAAkC4X,OALN,MAOhClB,eAA0B,CAACqB,OAAQH,IACnClB,wBAAoC,CAACsB,UAAD,EAAkBC,UAAW,M,EAIzE2J,wBAGI,IAAMxH,EAASrD,sBAA0BpZ,KAAKojB,SAAStK,IAH7B,iBAK1BkN,GAAc,QAAQ5M,SAAT,wBAAb4M,aACA,IAAI3X,EAAOrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI2R,SAASyL,IAAzF,GAIA,OAHAuJ,MACA3X,EAAKrO,KAAK0H,OAAOmR,GAAGY,UAApBpL,aAA6CrO,KAAK0H,OAAOmR,GAAGY,UAA5DpL,gBACAA,EAAKrO,KAAK0H,OAAOmR,GAAGY,UAApBpL,aAA6CrO,KAAK0H,OAAOmR,GAAGY,UAA5DpL,sBACA,G,EAGJqY,gCAEIX,GAAQ,kBAAkB1X,EAAnB,qBAA4CA,EAA5C,GAAP0X,uBACAtW,6CAAsDpB,EAAtDoB,W,EAGJkX,8BAEIZ,GAAQ,gBAAgB1X,EAAjB,qBAA0CA,EAA1C,GAAP0X,uBACAtW,2CAAoDpB,EAApDoB,W,EAGJmX,mCAEIb,GAAQ,sBAAsB1X,EAAvB,qBAAgDA,EAAhD,GAAP0X,uBACA/lB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,4B,EAGM0V,qBAAV,YACI1K,mBACAA,EAFoD,kBAIpD,IAAMqD,EAASrD,sBAA0BpZ,KAAKojB,SAAStK,IAJH,iBAM9CqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IANP,oBAQpDkN,GAAc,QAAQ5M,EAAT,6CAAb4M,GAEA,IAAI3X,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI2R,SAASyL,IAA9F,GAEA,GADAsJ,MACA,EAGI,UACI,KAAM/lB,KAAKojB,SAAStK,IAApB,yBACI9Y,KAAA,uBACA,MAEJ,KAAMA,KAAKojB,SAAStK,IAApB,6BACI9Y,KAAA,qBACA,MAEJ,KAAMA,KAAKojB,SAAStK,IAApB,sBACI9Y,KAAA,4B,EAONilB,cAAV,cACI,U,EAGMH,mBAAV,cACI,U,EAGMd,oBAAV,YACI,0CAD6C,GAI7C,IAAMvH,EAASrD,sBAA0BpZ,KAAKojB,SAAStK,IAAvD,iBACIzK,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI2R,SAASyL,IAA9F,GACA,KAAU,CACN,GAAIhN,uCAAgDpB,EAApD,UAEI,YADA0X,GAAW1X,EAAJ,SAAP0X,wCAKJtW,wCAAiDpB,EAAjDoB,Y,EAIEsU,oBAAV,YACI,0CAD6C,GAI7C,IAAMtH,EAASrD,sBAA0BpZ,KAAKojB,SAAStK,IAAvD,iBACIzK,EAAYrO,KAAK8L,aAAa9J,gBAAgBhC,KAAK0H,OAAO0G,WAA9C,MAAgE,CAAC/O,GAAI2R,SAASyL,IAA9F,GACA,KAAU,CACN,GAAIhN,qCAA8CpB,EAAlD,UAEI,YADA0X,GAAW1X,EAAJ,SAAP0X,sCAKJtW,sCAA+CpB,EAA/CoB,Y,EAIAoX,qBAAR,WAA+B,WACrBC,EAAsBrX,iBAA5B,uBACIzP,KAAJ,aAAsB4Z,qBAA8B5Z,KAA9B4Z,aAEtBkN,WAAkB,YAEd,IAAIzY,EAAY,+BAAkC,oBAAlC,MAAgE,CAAC3E,YAAjF,GACA,KAAU,CACN,IAAIqd,EAAe,sBAAyB,oBAAzB,QAA6D,eAAhF,0BACAA,2BAAuC,EAAvCA,gBACAA,mCACAA,+BAA2C,EAA3CA,gBAGA,kC,EAKJC,mBAAR,WAA6B,WACnBF,EAAsBrX,iBAA5B,qBACIzP,KAAJ,iBAA0B4Z,qBAA8B5Z,KAA9B4Z,iBAE1BkN,WAAkB,YAEd,IAAIzY,EAAY,+BAAkC,oBAAlC,MAAgE,CAAC3E,YAAjF,GACA,KAAU,CACN,IAAIqd,EAAe,sBAAyB,oBAAzB,QAA6D,eAAhF,8BACAA,oCACAA,gCAA2C,YACvC3N,sBAEJ,sC,GA3ZoB6N,I,0NCDpC,IAAMC,GAAWpnB,IAAjB,gBACMqnB,GAAiBrnB,IAAvB,uBA6YA,G,oBAzXI,kBAA0F,aACtF,kBAAqCqY,WAArC,YAA2EA,gBAA3E,sBAHMiP,gBAAkC,KAKxC,SAAcjP,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,mBAAwB,2BAAxB,IACA,wBAA6B,gCAA7B,IACA,uBAA4B,+BAA5B,IACA,oBAAyB,4BAAzB,IACA,iBAAsB,yBAAtB,IACA,YAAiB,oBAAjB,IACA,oBAAyB,4BAAzB,IACA,YAAiB,oBAAjB,IAEAvF,oCACA9G,2BAAsC,oBAAtCA,aAlBsF,E,4GAqB1FqH,oCACI,MAAM,IAAI3T,MAAV,4B,EAGJ0Z,2BAEI,GADAgO,sCACIlnB,KAAJ,gBAA0B,CAEtB,IAAMwZ,EAAoBJ,uBAA2BpZ,KAAK0H,OAAOmR,GAAGY,UAApE,oBACMC,EAAgB/V,WAAtB,GACAujB,MAEIxN,EAAc1Z,KAAK0H,OAAOmR,GAAGY,UAA7BC,eAAwD1Z,KAAK0H,OAAOmR,GAAGY,UAA3E,kBAEIhK,4BAAqCiK,EAArCjK,SAA6DzP,KAAKonB,gBAAlE3X,UACAhB,yBAAiCiL,EAAjCjL,6B,EAMZqE,iCACIoU,gCACAlnB,KAAA,kBACAA,KAAA,iBACAA,KAAA,mB,EAGJqnB,6BAII,GAHAjO,mBACAA,oBACA8N,6BACIlnB,KAAJ,gBAA0B,CAEtB,GAAIA,KAAKsnB,WAAT,IAAsBtnB,KAAKsnB,UAAUppB,MAAM6T,OAAOnW,OAF5B,OAItB,IAAM2rB,EAAiBvnB,KAAKsnB,UAAUppB,MAJhB,OAMtB8B,KAAA,mBAEA,IAAIwnB,EAA8B/X,6BAAsCzP,KAAKonB,gBAA3C3X,WAAqFlH,EAArFkH,OAAlC,IACA,KAAiB,CAEb,IAAIgY,EAAYznB,KAAK0nB,eAFR,GAIb9N,wB,EAKZqJ,4BAAmB,WACf,kCADe,MAGfjjB,KAAA,WAAkB4M,wBAAwB5M,KAAKojB,SAAStK,IAHzC,WAKf9Y,KAAA,UAAiB4M,wBAAwB5M,KAAKojB,SAAStK,IALxC,WAOf9Y,KAAA,SAAgB4M,wBAAwB5M,KAAKojB,SAAStK,IAPvC,WASf9Y,KAAA,kBAAyB4M,wBAAwB5M,KAAKojB,SAAStK,IAThD,iBAWf9Y,KAAA,gBAAuB4M,wBAAwB5M,KAAKojB,SAAStK,IAX9C,aAaf9Y,KAAA,YAAmB4M,wBAAwB5M,KAAKojB,SAAStK,IAb1C,eAef9Y,KAAA,eAAsB4M,wBAAwB5M,KAAKojB,SAAStK,IAA5D,yBAEA9Y,KAAA,yCAA8C,YAC1CmnB,mBACI,EAAJ,iBAA0B/N,sBAE9BpZ,KAAA,oCAA0CA,KAA1C,gBAGAA,KAAA,mCAAyCA,KAAzC,kBACAA,KAAA,yCAA+CA,KAA/C,WAEAA,KA3Be,kBA+BMkN,EAAE,IAAIlN,KAAKojB,SAAStK,IAAzC,yBACAC,wBAAsC/Y,KAAtC+Y,mBAGA/Y,KAAA,mB,EAGJ4Y,gCACIQ,mBACAA,oBACA8N,GAAS,QAAQrO,OAAT,kBAAkCA,OAAlC,MAH6B,aAKrCO,mBALqC,GAQjCpZ,KAAJ,iBAA0ByP,4BAAqCoJ,OAArCpJ,MAAoDzP,KAAKonB,gBAAzD3X,UAC1BhB,yBAAiCoK,OAAjCpK,wB,EAGJ6V,gCACI,OAAOjiB,EAAP,U,EAGJmiB,sCACI,OAAOniB,EAAP,U,EAGJkjB,0CACI,OAAOljB,aAAP,M,EAGJojB,sCACI,IAAIhpB,EAAJ,WAOA,OANIuD,KAAJ,iBACQA,KAAKonB,gBAAgBlV,WAAa7P,EAAtC,WACI5F,YAIR,G,EAGJkpB,+CACI,OAAO3lB,KAAKylB,wBAAwBhoB,EAApC,I,EAGJiqB,2BACI,IAAIC,EAAgB/a,uBAApB,OAGA,GAFAgN,sBAF0C,WAI1C,IAAIjP,qBAAkC,CAClC,IAAIid,EAAkBhb,uBAAtB,OACAgN,wCACAgO,YAA4Bjd,EAA5Bid,QACAD,qBACG,CAEH,GAAIhd,SAAiB8E,iBAArB,iBACImK,wCACG,CACH,IAAIgO,EAAkBhb,uBAAtB,OACAgN,wCACAgO,YAA4Bjd,aAAuBsG,IAAOtG,EAAD,QAANsG,yBAAnD2W,eACAD,iBAGJ,IAAI/C,EAAYhY,uBAAhB,OACIjC,SAAiB8E,iBAArB,iBACImK,4CAEAA,yCAEJgL,YAAsBja,EAAtBia,QACA+C,iBAIJ,OADA3nB,KAAA,0BACA,G,EAGJ6nB,iCAAuC,WACnCjO,qBAA8B5Z,KAA9B4Z,YACA,IAAI6N,EAAJ,KACAjW,oBAAyB,YACrBiW,EAAY,iBAAZA,MAGJ,GAAe7N,gB,EAGnBkO,0BACIX,GAAe,YAAY3V,EAAb,SAAd2V,cACInnB,KAAJ,iBACQA,KAAKonB,gBAAgBlV,WAAaV,EAAtC,WACIxR,KAAA,kBACAyP,8BAAuC+B,EAFa,UAIpDxR,KAAA,yBAGRA,KAAA,mB,EAGJ6jB,2BACIzK,mBACAA,oBACAgN,YAAYhN,EAHkB,QAK9B,IAAMvP,EAAOuP,sBAA0BpZ,KAAKojB,SAAStK,IALvB,iBAOxBqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAP7B,oBAU9BqO,GAAe,YAAY/N,EAAb,sCAAd+N,GACAnnB,KAAA,gBAAuByP,4BAAvB,GACIzP,KAAJ,kBACIA,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAID+nB,eAAP,YACIZ,GAAe,oBAAD,EAAdA,aACAnnB,KAAA,gBAAuByP,4BAAvB,GACIzP,KAAJ,kBACIA,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAKRymB,yBACI,GAAIhpB,IAASuC,KAAK0H,OAAO0G,WAAzB,MAA2C,CAGvC+Y,oCACAA,GAJuC,GAMvC,IAAInN,EAAa1L,GANsB,sBAQjCyK,EAAe7L,EAAE,IAAIlN,KAAKojB,SAAStK,IARF,yBAUjCmB,EAAN,GACA,IACI6L,WAAiB,YACb,IAAM5L,EAAc,CAChBC,MAAO9X,EADS,SAEhBnE,MAAOmE,EAAKhD,IAGZ2a,IAAe3X,EAAnB,UAAkC4X,OANN,MAQhClB,eAA0B,CAACqB,OAAQH,IACnClB,wBAAoC,CAACsB,UAAD,EAAkBC,UAAW,UAIrE6M,uCACArB,EAAWrW,iBAAXqW,cACAqB,MACAnnB,KAAA,2BACAA,KAAA,mB,EAKRikB,0B,EAIAzQ,iCACQxT,KAAJ,kBACIyP,8BAAuCzP,KAAKonB,gBADtB,UAGtBpnB,KAAA,qBAA0BA,KAA1B,kBAEJA,KAAA,kBACAA,KAAA,mB,EAGJ4T,8BACI5T,KAAA,kBACAA,KAAA,iBACAA,KAAA,mB,EAGJsjB,sBACI,gCAD2B,GAGvBtjB,KAAJ,kBACIA,KAAA,qBACAA,KAAA,kBACAA,KAAA,iB,EAKR6T,4C,EAGAX,yC,EAGU+R,cAAV,cACI,OAAO5iB,EAAP,kB,EAGMyhB,qBAAV,YACI1K,mBACAA,oBACAgN,YAAYhN,EAHwC,QAKpD,IAAMvP,EAAOuP,sBAA0BpZ,KAAKojB,SAAStK,IALD,iBAO9CqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAPP,qBAUpDqO,GAAe,YAAY/N,EAAb,sCAAd+N,GAEA,KAC8B1X,4BAA1B,KAEIA,8BACIzP,KAAKonB,iBAAoBpnB,KAAKonB,gBAAgBlV,WAAlD,IACIlS,KAAA,qBACAA,KAAA,eACAA,KAAA,mBAEJA,KAAA,qB,EAOF8kB,mBAAV,cACI,U,EAGIhb,UAAR,YACIsP,mBACAA,oBACIpZ,KAAJ,kBACIyP,2BAAoCzP,KAAKonB,gBAAzC3X,UACAzP,KAAA,qBACAA,KAAA,eACAA,KAAA,mBAEJA,KAAA,mB,EAGIgoB,gBAAR,WACQhoB,KAAJ,iBACQA,KAAJ,WAAoBA,KAAKsnB,UAAU/M,gBAAgB,YAC/Cva,KAAJ,WAAoBA,KAAKsnB,UAAU/M,gBAAgB,YAC/Cva,KAAJ,mBAA4BA,KAAKioB,kBAAkB1N,gBAAgB,YAC/Dva,KAAJ,iBAA0BA,KAAKkoB,gBAAgB3N,gBAAgB,YAC3Dva,KAAJ,gBAAyBA,KAAKmoB,eAAe5N,gBAAgB,cAEzDva,KAAJ,WAAoBA,KAAKsnB,UAAUc,aAAa,WAAY,QACxDpoB,KAAJ,WAAoBA,KAAKsnB,UAAUc,aAAa,WAAY,QACxDpoB,KAAJ,mBAA4BA,KAAKioB,kBAAkBG,aAAa,WAAY,QACxEpoB,KAAJ,iBAA0BA,KAAKkoB,gBAAgBE,aAAa,WAAY,QACpEpoB,KAAJ,gBAAyBA,KAAKmoB,eAAeC,aAAa,WAAY,U,EAKtEC,aAAR,WACIzO,qBAA8B5Z,KAA9B4Z,a,GArYsBqN,I,0NCR9B,IAAMlB,GAAUjmB,IAAhB,6BACMkmB,GAAgBlmB,IAAtB,oCAyKA,G,oBA9JI,kBAA0F,aACtF,kBAAqCqY,WAArC,uBAAsFA,gBAAtF,iCAEA,OAAcA,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IACA,eAAoB,uBAApB,IACA,wBAA6B,gCATyD,IAYtF,cAAmB,IAAnB,EACA,uCAA0C,oBAA1C,wBAEA4N,GAAQ,6BAAgC,oBAAxCA,mBAfsF,E,4GAkBnFuC,sBAAP,gBACItoB,KAAA,uBACA+lB,GAAQ,2BAAD,oBAAPA,OACIzd,QAAiBA,GAArB,MACI0d,MACAA,GAAc5qB,OAAd4qB,gBACAhmB,KAAA,2BAAgCA,KAAK0H,OAAO0G,WAA5C,iBAAyEhT,OAAzE,qB,EAIR6nB,4BACI,kCADe,MAIfjjB,KAAA,OAAcA,KAAK4M,SAASuW,eAAenjB,KAAKojB,SAAStK,IAJ1C,QAMf9Y,KAAA,SAAgBA,KAAK4M,SAASuW,eAAenjB,KAAKojB,SAAStK,IAN5C,UAQf9Y,KAAA,QAAeA,KAAK4M,SAASuW,eAAenjB,KAAKojB,SAAStK,IAA1D,SAEA9Y,KAAA,iCAAuCA,KAAvC,e,EAGJskB,gCACI,OAAOjiB,EAAP,Q,EAGJmiB,sCACI,OAAOniB,EAAP,Q,EAGJkjB,0CACI,OAAUljB,EAAV,UAAwBA,EAAxB,e,EAGJojB,sCACI,gB,EAGJE,+CACI,gB,EAGJ9B,2BACIzK,mBACAA,oBACAgN,YAAYhN,EAHkB,QAK9B,IAAMgI,EAAchI,sBAA0BpZ,KAAKojB,SAAStK,IAL9B,iBAOxBqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAP7B,oBAU9BkN,GAAc,cAAc5M,EAAf,sCAAb4M,GAEA,IAAItQ,EAAY1V,KAAKqmB,YAAYrkB,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAA0E,CAACyS,OAAQ7P,SAASoQ,IAA5G,GACA,GACIphB,KAAA,yCAEJA,KAAA,iB,EAIJymB,yBACQhpB,IAASuC,KAAK0H,OAAO0G,WAAzB,mBACI2X,mCACAD,EAAW9lB,KAAKqmB,YAAY9kB,eAAevB,KAAK0H,OAAO0G,WAAvD0X,kBACAC,MACA/lB,KAAA,6B,EAIRikB,wBAGI,IAAM7C,EAAchI,sBAA0BpZ,KAAKojB,SAAStK,IAHlC,iBAK1BkN,GAAc,cAAc5M,SAAf,wBAAb4M,aACA,IAAItQ,EAAY1V,KAAKqmB,YAAYrkB,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAA0E,CAACyS,OAAQ7P,SAASoQ,IAA5G,GAIA,OAHA4E,MACAtQ,EAAU1V,KAAK0H,OAAOmR,GAAGY,UAAzB/D,aAAkD1V,KAAK0H,OAAOmR,GAAGY,UAAjE/D,qBACAA,EAAU1V,KAAK0H,OAAOmR,GAAGY,UAAzB/D,aAAkD1V,KAAK0H,OAAOmR,GAAGY,UAAjE/D,2BACA,G,EAGMoO,qBAAV,YAEI,IAAM1C,EAAchI,sBAA0BpZ,KAAKojB,SAAStK,IAFR,iBAI9CqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAJP,oBAMpDkN,GAAc,cAAc5M,EAAf,6CAAb4M,GAEA,IAAItQ,EAAiB1V,KAAKqmB,YAAYrkB,gBAAgBhC,KAAK0H,OAAO0G,WAA7C,iBAA0E,CAAC/O,GAAI2R,SAASoQ,IAA7G,GACA2E,MACA,GACI/lB,KAAA,gCAAqCA,KAAK0H,OAAO0G,WAAjD,0B,EAIE6W,cAAV,cACI,U,EAGMH,mBAAV,cACI,U,EAGIyD,mBAAR,iBAAoD,IAAzBC,OAAkB,GACzC5O,qBAA8B5Z,KAA9B4Z,UACA,GACQ5Z,KAAJ,UAAmBA,KAAKyoB,SAASlO,gBAAgB,YAC7Cva,KAAJ,WAAmBA,KAAKyoB,SAAS3O,UAAY,YAEzC9Z,KAAJ,UAAmBA,KAAKyoB,SAASL,aAAa,WAAY,QACtDpoB,KAAJ,WAAmBA,KAAKyoB,SAAS3O,UAAY,yG,EAI7C4O,aAAR,YACI3C,sBACA3M,mBACAA,EAH+B,kBAK/B,IAAIuP,EAAY3oB,KAAK4oB,QAAQ1qB,MAA7B,OACA,MAAIyqB,SAAJ,CAGA3oB,KAAA,oBAT+B,GAY/B,IAAI4D,EAAQ5D,KAAK0H,OAAOuM,KAAxB,cAGAnP,kBAA2B9E,KAAK0H,OAAOuM,KAAvCnP,UAA4D,CAACua,YAAasJ,GAAY3oB,KAAtF8E,sBAAkH9E,KAAK0H,OAAO0G,WAA9HtJ,oB,GAjKiCmiB,ICLnC4B,GAAW/oB,IAAM,yBAIR,SAASgpB,GAAT,GAAoI,IAA5GpT,EAA4G,EAA5GA,UAAWqT,EAAiG,EAAjGA,kBAAmBC,EAA8E,EAA9EA,uBAAwBC,EAAsD,EAAtDA,4BAA6BC,EAAyB,EAAzBA,uBACtH,GAAIxT,EAAW,CACXmT,GAAS,cAAcnT,EAAUmL,QAEjC,IAAIsI,EAAY,6BACZ,4BAAQ3jB,KAAK,SACLmR,UAAU,4CACVyS,gBAAe1T,EAAUmL,OAAQwI,QAASL,GAFlD,YAGyB1a,GAAWqQ,aAA2B,GAAZ,UAHnD,gBAII,uBAAGhI,UAAU,gBAJjB,MAMA,4BAAQnR,KAAK,SACLmR,UAAU,4CACVyS,gBAAe1T,EAAUmL,OAAQwI,QAASJ,GAFlD,yBAGyC,uBAAGtS,UAAU,uBAItD2S,EACA,4BAAQ9jB,KAAK,SACLmR,UAAU,4CACVyS,gBAAe1T,EAAUmL,OAAQwI,QAASJ,GAFlD,iBAG8B3a,GAAWqQ,aAA2B,GAAZ,UAHxD,gBAII,uBAAGhI,UAAU,gBAJjB,MAOA4S,EACA,4BAAQ/jB,KAAK,SACLmR,UAAU,mDACVyS,gBAAe1T,EAAUmL,OAAQwI,QAASH,GAFlD,wBAII,uBAAGvS,UAAU,oBAJjB,MAQA6S,EAAa,EACb9T,EAAU+T,cACVD,EAAa9T,EAAU+T,YAAY7tB,QAKvC,IAAI8tB,EAAgB,uBAAG/S,UAAU,2BAC7BgT,EAAa,0BAAMP,gBAAe1T,EAAUmL,OAAQlK,UAAU,mCAC3C0S,QAASN,GADf,WAC2CS,GAE5D,GAAK9T,EAAUkU,WAAelU,EAAUkU,YAActV,GAAUuV,WAAa,CACzE,IAAMC,EAAS,uCAAuCpU,EAAUmL,OAEhE,OACI,yBAAKlK,UAAU,4CACX,yBAAKA,UAAU,QACX,uBAAGoT,KAAMD,EAAQlH,OAAO,UAAS,yBAAKjM,UAAU,eAAeqT,IAAKtU,EAAUuU,MACxCC,IAAI,oBAC1C,yBAAKvT,UAAU,oBACX,wBAAIA,UAAU,cAAcjB,EAAUjY,KAAtC,KAA8CiY,EAAUyU,KAAxD,KAAkEzU,EAAUkU,YAActV,GAAU8V,WAAe1U,EAAUkU,YAActV,GAAU+V,iBAAqBX,EAAgB,GAA1L,IAAiMhU,EAAUkU,YAActV,GAAU8V,WAAe1U,EAAUkU,YAActV,GAAU+V,iBAAqBV,EAAa,GAAG,6BAAzT,IAAiUrb,GAAWqQ,aAAkBjJ,EAAUkU,YAActV,GAAU8V,UAAad,EAAeH,EAAaG,GAEza,uBAAG3S,UAAU,aAAajB,EAAU4U,aAEpC,uBAAG3T,UAAU,aACT,2BAAOA,UAAU,cAAjB,cACgBjB,EAAU6U,YAD1B,MAC0C7U,EAAU8U,YADpD,OACoE,6BADpE,YAEc9U,EAAU+U,WAFxB,MAEuC/U,EAAUgV,WAFjD,YAGKhV,EAAUiV,OAAO,6BAHtB,eAIiBjV,EAAUkV,cAInC,yBAAKjU,UAAU,qCAAf,SACWjB,EAAUmV,KADrB,WACmCnV,EAAUoV,aAD7C,SACiEpV,EAAUqV,YAD3E,UAC8F,6BACzFxB,KAMjB,OACI,yBAAK5S,UAAU,4CACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeqT,IAAI,mBAAmBE,IAAI,mBACzD,yBAAKvT,UAAU,aACX,wBAAIA,UAAU,cAAcjB,EAAUjY,KAAtC,KAA8CiY,EAAUyU,KAAxD,MACA,uBAAGxT,UAAU,aAAb,cACA,uBAAGA,UAAU,aACT,2BAAOA,UAAU,cAAjB,gBAKR,yBAAKA,UAAW,qCAAhB,gBAOhB,OACI,yBAAKA,UAAU,4CACX,yBAAKA,UAAU,U,0NCrG/B,IAAMuQ,GAAWpnB,IAAjB,uBACMqnB,GAAiBrnB,IAAvB,8BAkKA,G,oBA7JI,kBAA0F,aACtF,kBAAqCqY,WAArC,kBAAiFA,gBAAjF,4BAHM6S,kBAAgC,KAKtC,SAAc7S,EAHwE,MAMtF,aAAkB,qBAAlB,IACA,iBAAsB,yBAAtB,IAPsF,E,4GAU1F8K,4BACI,wCAEAjjB,KAAA,mB,EAIGirB,qBAAP,YACI/D,qCACAC,MACA,IACInnB,KAAA,oBACAA,KAAA,mB,EAIRskB,gCACI,OAAOjiB,EAAP,I,EAGJmiB,sCACI,OAAOniB,EAAP,I,EAQJkjB,0CACI,IAAI2F,EAAJ,GAgDA,GAtCAA,GAAU,0BAA0BlrB,KAAKgrB,kBAAnC,UAA8DhrB,KAAKgrB,kBAAnE,KAANE,SACAA,GAAU,mCAAmCja,IAAO5O,EAAD,UAAN4O,yBAAvC,yBAANia,OACAA,mCACI7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,SACQA,SAAJ,IACI6oB,GAAa7oB,EAAP,YAAuBA,EAAvB,OAAN6oB,KAGJ7oB,EAAJ,QACI,IAAK,IAAIzB,EAAT,EAAoBA,EAAQyB,UAA5B,OAAiDzB,KAMrD,OADAsqB,W,EAIJzF,sCACI,gB,EAGJE,+CACI,OAAO3lB,KAAKylB,wBAAwBhoB,EAApC,I,EAGJomB,6B,EAGA4C,yBACIU,8CACA,GACQrB,EAAJ,aACI9lB,KAAA,wBAAiC8lB,EAAjC,c,EAMZ7B,0B,EAGUgB,cAAV,cACI,U,EAGMH,mBAAV,cACI,sC,EAGMhB,qBAAV,YAEI,IAAM/B,EAAU3I,sBAA0BpZ,KAAKojB,SAAStK,IAFJ,iBAI9CqL,EAAa/K,sBAA0BpZ,KAAKojB,SAAStK,IAJP,oBASpD,GAHAoO,GAAS,eAAe9N,EAAhB,6CAAR8N,GAGIlnB,KAAKgrB,mBAAqBzR,QAA9B,qDAA4F,CAExF,GAAIvZ,KAAKgrB,kBAAT,YAAwC,CACpC,IAAIpqB,EAAQZ,KAAKgrB,kBAAkBvB,YAAYhpB,WAAU,mBAAgB4gB,OAAhB,KACrDzgB,GAAJ,IACIZ,KAAA,uCADY,GAGZsO,kCAA0CtO,KAA1CsO,sBAGRtO,KAAA,cAAoBA,KAApB,qB,GAxJwBinB,I,oVCSpC,IAAMkE,GAASrrB,IAAM,OAEfsrB,G,oBAkCF,aAAc,aAEV,sBACK/pB,MAAQ,CACTsd,YAAY,EACZ0M,gBAAiB,EACjB9K,WAAY,GACZrJ,WAAY,CACRrN,KAAM,GACNyU,cAAe,GACfC,mBAAoB,GACpB5D,MAAO,EACP2Q,UAAW,IAEfld,WAAY,CACRyC,MAAO,QACP0P,WAAY,aACZjJ,OAAQ,SACRiU,cAAe,gBACfjF,mBAAoB,qBACpBkF,iBAAkB,mBAClBtU,WAAY,cAEhBjD,KAAM,CACFxK,MAAO,SACPgiB,QAAS,WACTC,cAAe,iGACf9K,kBAAmB,CACfvB,YAAa,wPACbC,WAAY,uBAEhBF,UAAW,CACPC,YAAa,mCACbC,WAAY,aAEhB0B,kBAAmB,CACf3B,YAAa,iJACbC,WAAY,qBAEhBgC,uBAAwB,CACpBjC,YAAa,4IACbC,WAAY,0BAEhBkC,yBAA0B,CACtBnC,YAAa,uZACbC,WAAY,4BAEhBqC,yBAA0B,CACtBtC,YAAa,0KACbC,WAAY,4BAEhBwC,iBAAkB,CACdzC,YAAa,yFACbC,WAAY,2BAKpBzG,GAAI,CACAY,UAAW,CACPkS,mBAAoB,aACpBC,YAAa,cACbC,YAAa,cACbC,gBAAiB,OACjBC,qBAAsB,YACtBC,sBAAuB,aACvBC,2BAA4B,mBAEhC5S,MAAO,CACH6S,QAAS,QACTC,QAAS,cACTC,UAAW,gBACXC,eAAgB,eAChBC,gBAAiB,gBACjBC,cAAe,cACfC,UAAW,SACXC,UAAW,WAEfC,WAAY,CACRC,iBAAkB,6BAClBC,kBAAmB,gCACnBC,aAAc,2BACdC,OAAQ,qBACRC,eAAgB,4BAGpBC,YAAa,CACTlU,IAAK,CACDmU,UAAW,cACXC,UAAW,WACXC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,uEAChBhJ,gBAAiB,OACjBiJ,sBAAuB,OACvBC,mBAAoB,WACpBC,oBAAqB,GACrBC,sBAAuB,uBACvBC,oBAAqB,0BACrBC,qBAAsB,GACtBC,WAAY,GACZC,aAAc,GACdC,WAAY,GACZC,YAAa,GACbC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,mCACrBC,iBAAkB,GAClBC,wBAAyB,iCACzBC,UAAU,EACVC,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BC,iBAAkB,OAClBC,uBAAwB,CACpB,CAAC,QAAS,mBAEdC,aAAc,sCACdC,UAAW,aACXC,UAAW,UACXC,gBAAiB,gBACjBC,UAAW,UACXC,cAAe,cACfC,YAAa,YACbC,wBAAyB,4BAGjCC,kBAAmB,CACftW,IAAK,CACDmU,UAAW,oBACXC,UAAW,qBACXmC,iBAAkB,iBAClBC,eAAgB,eAChBC,uBAAwB,yBACxBC,qBAAsB,uBACtBrC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,4EAChBhJ,gBAAiB,UACjBiJ,sBAAuB,iBACvBC,mBAAoB,cACpBkC,sBAAuB,qBACvBC,yBAA0B,iBAC1BC,6BAA8B,eAC9BnC,oBAAqB,0BACrBC,sBAAuB,wBACvBC,oBAAqB,uBACrBC,qBAAsB,yBACtBC,WAAY,oCACZC,aAAc,oCACdC,WAAY,kCACZC,YAAa,8CACbQ,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BT,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,6CACrBC,iBAAkB,GAClBC,wBAAyB,mBACzBlI,MAAO,CACHyJ,kBAAmB,uBAEvBC,oBAAqB,gDACrBC,iBAAkB,GAClBC,wBAAyB,mBACzBC,oBAAqB,mDACrBC,iBAAkB,GAClBC,wBAAyB,sBAGjCC,uBAAwB,CACpBrX,IAAK,CACDmU,UAAW,yBACXC,UAAW,mBACXC,mBAAoB,IACpBC,yBAA0B,CACtB,CAAC,OAAQ,MAEbC,eAAgB,4EAChBhJ,gBAAiB,SACjBiJ,sBAAuB,SACvBC,mBAAoB,cACpBkC,sBAAuB,YACvBjC,oBAAqB,0BACrBC,sBAAuB,wBACvBC,oBAAqB,uBACrBC,qBAAsB,yBACtBC,WAAY,iCACZC,aAAc,iCACdC,WAAY,iCACZC,YAAa,gCACbQ,wBAAyB,uCACzBC,6BAA8B,OAC9BC,yBAA0B,OAC1BT,aAAa,EACbC,aAAa,EACbmC,OAAQ,YACRC,QAAS,YACTC,SAAU,oBAGlBC,kBAAmB,CACfzX,IAAK,CACDmU,UAAW,oBACXC,UAAW,cACXC,mBAAoB,MACpBC,yBAA0B,GAC1BC,eAAgB,2DAChBhJ,gBAAiB,SACjBiJ,sBAAuB,SACvBC,mBAAoB,cACpBkC,sBAAuB,aACvBjC,oBAAqB,GACrBC,sBAAuB,GACvBC,oBAAqB,GACrBC,qBAAsB,GACtBC,WAAY,IACZC,aAAc,IACdC,WAAY,IACZC,YAAa,IACbC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,oBAAqB,wCACrBC,iBAAkB,eAClBC,wBAAyB,mBACzBE,wBAAyB,mBACzBC,6BAA8B,MAC9BC,yBAA0B,OAC1B+B,oBAAoB,EACpBC,eAAgB,MAChBC,WAAY,mBAGpBxZ,WAAY,CACR4B,IAAK,CACD6X,SAAU,iBACVjb,UAAW,oBACX4C,eAAgB,iBAChBqC,MAAO,eACPiW,IAAK,kBACL1Z,WAAY,aACZ2Z,UAAW,yCACXC,eAAgB,wCAChBC,QAAS,uCACTC,UAAW,sCACXC,sBAAuB,wBACvBC,OAAQ,YAKpBzN,QAAS,CACLiJ,WAAY,GACZyE,UAAW,GACX/B,kBAAmB,CACf1L,KAAM,CACF0N,SAAU,OACVC,aAAc,QAGtBlB,uBAAwB,CACpBzM,KAAM,CACF0N,SAAU,OACVC,aAAc,QAGtBrE,YAAa,CACTtJ,KAAM,CACF0N,SAAU,QACVC,aAAc,QAGtBd,kBAAmB,CACf7M,KAAM,CACF0N,SAAU,SACVC,aAAc,SAI1B/iB,WAAY,CACRkU,OAAQ,CACJjC,WAAY,CACR+Q,eAAgB,kBAGxB/K,UAAW,CACPD,mBAAoB,MAKhC,EAAKiL,aAAe,EAAKA,aAAa9yB,KAAlB,OACpB,EAAK+yB,cAAgB,EAAKA,cAAc/yB,KAAnB,OACrB,EAAKgzB,sBAAwB,EAAKA,sBAAsBhzB,KAA3B,OAE7B,EAAKizB,qBAAuB,EAAKA,qBAAqBjzB,KAA1B,OAC5B,EAAKkzB,eAAiB,EAAKA,eAAelzB,KAApB,OACtB,EAAKmzB,oBAAsB,EAAKA,oBAAoBnzB,KAAzB,OAE3B,EAAKozB,eAAiB,EAAKA,eAAepzB,KAApB,OACtB,EAAKqzB,WAAa,EAAKA,WAAWrzB,KAAhB,OAElB,EAAKszB,qBAAuB,EAAKA,qBAAqBtzB,KAA1B,OAC5B,EAAKuzB,qBAAuB,EAAKA,qBAAqBvzB,KAA1B,OAC5B,EAAKwzB,sBAAwB,EAAKA,sBAAsBxzB,KAA3B,OAC7B,EAAKyzB,iBAAmB,EAAKA,iBAAiBzzB,KAAtB,OAExB6P,GAAW0Q,qBAAX,MAAsCjgB,OAAO6R,cA3TnC,E,4GA8TP8P,sBAAP,SAA6BhH,GAEzBpL,GAAWoS,sBAAsBhH,I,EAGrC9K,eAAA,WACI,OAAON,GAAW6R,qB,EAGtB9G,MAAA,SAAM8Y,EAAeC,GACjBpyB,KAAKqyB,QAAQC,YAAcH,EAC3BnyB,KAAK4kB,UAAU0N,YAAcF,EAE7BpyB,KAAKuyB,QAAQC,UAAUC,OAAOzyB,KAAKqB,MAAMwX,GAAGQ,MAAMmT,WAElDxsB,KAAKuyB,QAAQC,UAAUE,IAAI1yB,KAAKqB,MAAMwX,GAAGQ,MAAMoT,Y,EAGnDkG,OAAA,WAAS,WACLxH,GAAO,iBAEP,IAAI5K,EAAoBvgB,KAAKqB,MAAMkf,WACnC4K,GAAO5K,GAEP,IAAMqS,EAAQrS,EAAWrhB,KAAI,SAAC2zB,EAAOjyB,GAAR,OACzB,kBAACkoB,GAAD,CACItqB,IAAKoC,EACL8U,UAAWmd,EACX9J,kBAAmB,EAAKmJ,iBACxBlJ,uBAAwB1a,GAAWyR,yBACnCkJ,4BAA6B,EAAKwI,sBAClCvI,uBAAwB,EAAK+I,2BAIrC,OACI,yBAAKtb,UAAU,wBACX,yBAAKA,UAAU,cACVic,K,EAMjBrB,aAAA,SAAanY,GAETpZ,KAAKuyB,QAAQC,UAAUC,OAAOzyB,KAAKqB,MAAMwX,GAAGQ,MAAMoT,WAElDzsB,KAAKuyB,QAAQC,UAAUE,IAAI1yB,KAAKqB,MAAMwX,GAAGQ,MAAMmT,WAC/CpT,EAAM0Z,kB,EAGVtB,cAAA,SAAcpY,GAEVpZ,KAAKuyB,QAAQC,UAAUC,OAAOzyB,KAAKqB,MAAMwX,GAAGQ,MAAMoT,WAElDzsB,KAAKuyB,QAAQC,UAAUE,IAAI1yB,KAAKqB,MAAMwX,GAAGQ,MAAMmT,WAC/CpT,EAAM0Z,iBAEN,IAAIzzB,EAAKW,KAAKuyB,QAAQQ,aAAa/yB,KAAKqB,MAAMiN,WAAWkU,OAAOjC,WAAW+Q,gBAC3EjyB,EAAK2R,SAAS3R,GACd8rB,GAAO,2BAA2B9rB,GAElC,IAAMkjB,EAA6BviB,KAAKqB,MAAMkf,WAC1C3f,EAAQ2hB,EAA2B9hB,WAAU,SAACwgB,GAAD,OAAeA,EAAKJ,SAAWxhB,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAM8U,EAAY6M,EAA2B3hB,GAC7C0N,GAAW0R,8BAA8BtK,K,EAIjDuc,sBAAA,SAAsB7Y,GAGlB,GAFAA,EAAM0Z,iBAEFna,GAAqBnW,cAAc8W,sBAAuB,CAC1D,IAAIC,QAAQ,+FAIR,OAHAZ,GAAqBnW,cAAckb,gBAO3C1d,KAAKgzB,kBAEL,IAAI3zB,EAAK+Z,EAAMwJ,OAAOmQ,aAAa/yB,KAAKqB,MAAMiN,WAAWkU,OAAOjC,WAAW+Q,gBAE3E,GADAnG,GAAO,qCAAqC9rB,GACxCA,EAAI,CAEJA,EAAK2R,SAAS3R,GAEd,IAAMkjB,EAA6BviB,KAAKqB,MAAMkf,WAC1C3f,EAAQ2hB,EAA2B9hB,WAAU,SAACwgB,GAAD,OAAeA,EAAKJ,SAAWxhB,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAM8U,EAAY6M,EAA2B3hB,GAC7CuqB,GAAOzV,GACPiD,GAAqBnW,cAAcywB,gBAAgBvd,GACnD1V,KAAKkzB,sCAAqC,M,EAKtDzB,sBAAA,SAAsBrY,GAClBA,EAAM0Z,iBAGN,IAAIzzB,EAAK+Z,EAAMwJ,OAAOmQ,aAAa/yB,KAAKqB,MAAMiN,WAAWkU,OAAOjC,WAAW+Q,gBAE3E,GADAnG,GAAO,8BAA8B9rB,GACjCA,EAAI,CAEJA,EAAK2R,SAAS3R,GAEd,IAAMkjB,EAA6BviB,KAAKqB,MAAMkf,WAC1C3f,EAAQ2hB,EAA2B9hB,WAAU,SAACwgB,GAAD,OAAeA,EAAKJ,SAAWxhB,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAM8U,EAAY6M,EAA2B3hB,GACzC8U,EAAUkU,WAAclU,EAAUkU,YAActV,GAAU8V,WAC1De,GAAO,8BAA8B9rB,EAA/B,6DACFiP,GAAWqQ,cAEX3e,KAAKuyB,QAAQnK,aAAapoB,KAAKqB,MAAMiN,WAAWkU,OAAOjC,WAAW+Q,eAAgBjyB,GAClFW,KAAKqZ,MAAS3D,EAAUjY,KAAxB,KAAiCiY,EAAUyU,KAA3C,IAAoD,2EAEpDgB,GAAO,8BAA8B9rB,EAA/B,oGAENiP,GAAW2R,2BAA2BvK,MAI1CyV,GAAO,8BAA8B9rB,EAA/B,iDAENiP,GAAW2R,2BAA2BvK,O,EAMhDyd,kB,+CAAN,6FACIhI,GAAO,uBAGPnrB,KAAKozB,SAAW,IAAIC,GAAgBrzB,KAAM4M,SAAU0B,GAAWkS,mBAC/DxgB,KAAKozB,SAASnQ,mBAEdjjB,KAAKszB,eAAiB,IAAIC,GAAsBvzB,KAAM4M,SAAU0B,GAAWkS,mBAC3ExgB,KAAKszB,eAAerQ,mBAGpBjjB,KAAKwzB,cAAgB,IAAIC,GAA2BzzB,KAAM4M,SAAU0B,GAAWkS,mBAC/ExgB,KAAKwzB,cAAcvQ,mBAEnBjjB,KAAK0zB,WAAa,IAAIC,GAAsB3zB,KAAM4M,SAAU0B,GAAWkS,mBACvExgB,KAAK0zB,WAAWzQ,mBAGhBjjB,KAAK4zB,eAAiB1b,GAAe1V,cACrCxC,KAAK4zB,eAAeC,eAAe7zB,MACnCA,KAAK4zB,eAAe3Q,iBAAiBjjB,MAGjC4M,WAEAA,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAG6T,WAAWE,mBAAmBzT,iBAAiB,QAASnZ,KAAK4xB,qBAEnGhlB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAG6T,WAAWG,cAAc1T,iBAAiB,QAASnZ,KAAK0xB,sBAE9F1xB,KAAK8zB,mBAAqBlnB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAG6T,WAAWI,QAG3E9sB,KAAK8zB,mBAAmB3a,iBAAiB,QAASnZ,KAAK2xB,gBAEvD/kB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAG6T,WAAWC,kBAAkBxT,iBAAiB,QAASnZ,KAAK+xB,sBAElGnlB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAG6T,WAAWK,gBAAgB5T,iBAAiB,QAASnZ,KAAKgyB,uBAKpGhyB,KAAKuyB,QAAU3lB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAM6S,SAE3DlsB,KAAKqyB,QAAUzlB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAM8S,SAE3DnsB,KAAK4kB,UAAYhY,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAM+S,WAE7DpsB,KAAK+zB,YAAcnnB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAMgT,gBAE/DrsB,KAAKg0B,aAAepnB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAMiT,iBAEhEtsB,KAAKi0B,WAAarnB,SAASuW,eAAenjB,KAAKqB,MAAMwX,GAAGQ,MAAMkT,eAG1DvsB,KAAK+zB,aAAa/zB,KAAK+zB,YAAY5a,iBAAiB,QAASnZ,KAAKuxB,cAClEvxB,KAAKg0B,cAAch0B,KAAKg0B,aAAa7a,iBAAiB,QAASnZ,KAAKwxB,eACpExxB,KAAKi0B,YAAYj0B,KAAKi0B,WAAW9a,iBAAiB,QAASnZ,KAAKuxB,cAIpEvxB,KAAKoY,OAASxL,SAASuW,eAAe,QAEtCnjB,KAAKyY,aAAe7L,SAASuW,eAAe,kBACxCnjB,KAAKoY,SACLpY,KAAKoY,OAAOe,iBAAiB,WAAYnZ,KAAK6xB,gBAC9C7xB,KAAKoY,OAAOe,iBAAiB,OAAQnZ,KAAK8xB,aAI9CnZ,GAAqBnW,cAAc+M,WAAWvP,MAC9CsO,GAAWiB,aAtEf,gD,wOAyEAyjB,gBAAA,WACIhzB,KAAKozB,SAAS9P,UAAU,MACxBtjB,KAAKszB,eAAehQ,UAAU,MAC9BtjB,KAAKwzB,cAAclQ,UAAU,O,EAGjCyO,qBAAA,SAAqB3Y,GACjBpZ,KAAKkzB,sCAAqC,I,EAG9ClB,qBAAA,SAAqB5Y,GACjBpZ,KAAKkzB,sCAAqC,I,EAG9CxB,qBAAA,SAAqBtY,GACjB+R,GAAO,6BACP/R,EAAM0Z,iBAGDxkB,GAAWqQ,aAKhB3e,KAAKszB,eAAe/P,UAAUnK,GAH1Bra,OAAOqyB,SAASrH,KAAO/pB,KAAKqB,MAAM4S,KAAKxK,O,EAM/CyoB,iBAAA,SAAiB9Y,GACb+R,GAAO,mCACP/R,EAAM0Z,iBAEN,IAAIzzB,EAAK+Z,EAAMwJ,OAAOmQ,aAAa/yB,KAAKqB,MAAMiN,WAAWkU,OAAOjC,WAAW+Q,gBAE3E,GADAnG,GAAO,mCAAmC9rB,GACtCA,EAAI,CAEJA,EAAK2R,SAAS3R,GAEd,IAAMkjB,EAA6BviB,KAAKqB,MAAMkf,WAC1C3f,EAAQ2hB,EAA2B9hB,WAAU,SAACwgB,GAAD,OAAeA,EAAKJ,SAAWxhB,KAChF,GAAIuB,GAAS,EAAG,CACZ,IAAM8U,EAAY6M,EAA2B3hB,GAC7CZ,KAAK0zB,WAAWzI,qBAAqBvV,GACrC1V,KAAK0zB,WAAWnQ,UAAU,S,EAKtCoO,eAAA,SAAevY,EAAclH,GACzBiZ,GAAO,sBACP/R,EAAM0Z,iBAGDxkB,GAAWqQ,cAKhB3e,KAAKozB,SAAS7P,UAAUnK,GACpBlH,GACAlS,KAAKozB,SAASrL,eAAe7V,IAL7BnT,OAAOqyB,SAASrH,KAAO/pB,KAAKqB,MAAM4S,KAAKxK,O,EAS/CmoB,oBAAA,SAAoBxY,GAChB+R,GAAO,iCACP/R,EAAM0Z,iBAEDxkB,GAAWqQ,cACZ3e,KAAKgzB,kBAGThzB,KAAKwzB,cAAcjQ,UAAUnK,I,EAGjC8a,aAAA,SAAaC,GAET,IAAIjJ,EAAS,oCACTiJ,EAAW,IACXjJ,GAAU,uDAAuDiJ,EAA3D,iBAENn0B,KAAK8zB,qBAAoB9zB,KAAK8zB,mBAAmBha,UAAxB,GAAuCoR,I,EAGhE2G,eAAR,SAAuBzY,GACnBA,EAAM0Z,kB,EAGFhB,WAAR,SAAmB1Y,GAEf,IAAMI,EAAoBJ,EAAMgb,aAAaC,QAAQr0B,KAAKqB,MAAMwX,GAAGY,UAAUkS,oBAC7ER,GAAO3R,GACP,IAAME,EAAgB/V,KAAK2wB,MAAM9a,GACjC2R,GAAOzR,GAEHA,EAAc1Z,KAAKqB,MAAMwX,GAAGY,UAAUmS,eAAiB5rB,KAAKqB,MAAMwX,GAAGY,UAAUsS,sBAC/E/rB,KAAK0gB,sBAAsBhH,I,EAK3BwZ,qCAAR,SAA6CqB,GACrCA,GACIv0B,KAAKoY,QAAQwB,GAAY5E,iBAAiBhV,KAAKoY,OAAQ,UAAU,GACjEpY,KAAKoY,QAAQwB,GAAY5E,iBAAiBhV,KAAKoY,OAAQ,WAAW,GAClEpY,KAAKyY,cAAcmB,GAAY5E,iBAAiBhV,KAAKyY,aAAc,UAAU,GAC7EzY,KAAKyY,cAAcmB,GAAY5E,iBAAiBhV,KAAKyY,aAAc,WAAW,IAE9EE,GAAqBnW,cAAc8W,wBAC/BtZ,KAAKoY,QAAQwB,GAAY5E,iBAAiBhV,KAAKoY,OAAQ,UAAU,GACjEpY,KAAKoY,QAAQwB,GAAY5E,iBAAiBhV,KAAKoY,OAAQ,WAAW,GAClEpY,KAAKyY,cAAcmB,GAAY5E,iBAAiBhV,KAAKyY,aAAc,UAAU,GAC7EzY,KAAKyY,cAAcmB,GAAY5E,iBAAiBhV,KAAKyY,aAAc,WAAW,K,GAjqB/E+b,IAAMC,WA4qBzB7jB,aAAa9Q,MAAQ,2CACrBA,IAAMgR,IAAMsV,QAAQsO,KAAKj2B,KAAK2nB,SAG9B,IAAM1lB,GAAU,kBAAC,GAAD,CAAMiW,UAAU,2CAEhCge,IAAShC,OAAOjyB,GAASkM,SAASuW,eAAe","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([449,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": 142,\n\t\"./af.js\": 142,\n\t\"./ar\": 143,\n\t\"./ar-dz\": 144,\n\t\"./ar-dz.js\": 144,\n\t\"./ar-kw\": 145,\n\t\"./ar-kw.js\": 145,\n\t\"./ar-ly\": 146,\n\t\"./ar-ly.js\": 146,\n\t\"./ar-ma\": 147,\n\t\"./ar-ma.js\": 147,\n\t\"./ar-sa\": 148,\n\t\"./ar-sa.js\": 148,\n\t\"./ar-tn\": 149,\n\t\"./ar-tn.js\": 149,\n\t\"./ar.js\": 143,\n\t\"./az\": 150,\n\t\"./az.js\": 150,\n\t\"./be\": 151,\n\t\"./be.js\": 151,\n\t\"./bg\": 152,\n\t\"./bg.js\": 152,\n\t\"./bm\": 153,\n\t\"./bm.js\": 153,\n\t\"./bn\": 154,\n\t\"./bn-bd\": 155,\n\t\"./bn-bd.js\": 155,\n\t\"./bn.js\": 154,\n\t\"./bo\": 156,\n\t\"./bo.js\": 156,\n\t\"./br\": 157,\n\t\"./br.js\": 157,\n\t\"./bs\": 158,\n\t\"./bs.js\": 158,\n\t\"./ca\": 159,\n\t\"./ca.js\": 159,\n\t\"./cs\": 160,\n\t\"./cs.js\": 160,\n\t\"./cv\": 161,\n\t\"./cv.js\": 161,\n\t\"./cy\": 162,\n\t\"./cy.js\": 162,\n\t\"./da\": 163,\n\t\"./da.js\": 163,\n\t\"./de\": 164,\n\t\"./de-at\": 165,\n\t\"./de-at.js\": 165,\n\t\"./de-ch\": 166,\n\t\"./de-ch.js\": 166,\n\t\"./de.js\": 164,\n\t\"./dv\": 167,\n\t\"./dv.js\": 167,\n\t\"./el\": 168,\n\t\"./el.js\": 168,\n\t\"./en-au\": 169,\n\t\"./en-au.js\": 169,\n\t\"./en-ca\": 170,\n\t\"./en-ca.js\": 170,\n\t\"./en-gb\": 171,\n\t\"./en-gb.js\": 171,\n\t\"./en-ie\": 172,\n\t\"./en-ie.js\": 172,\n\t\"./en-il\": 173,\n\t\"./en-il.js\": 173,\n\t\"./en-in\": 174,\n\t\"./en-in.js\": 174,\n\t\"./en-nz\": 175,\n\t\"./en-nz.js\": 175,\n\t\"./en-sg\": 176,\n\t\"./en-sg.js\": 176,\n\t\"./eo\": 177,\n\t\"./eo.js\": 177,\n\t\"./es\": 178,\n\t\"./es-do\": 179,\n\t\"./es-do.js\": 179,\n\t\"./es-mx\": 180,\n\t\"./es-mx.js\": 180,\n\t\"./es-us\": 181,\n\t\"./es-us.js\": 181,\n\t\"./es.js\": 178,\n\t\"./et\": 182,\n\t\"./et.js\": 182,\n\t\"./eu\": 183,\n\t\"./eu.js\": 183,\n\t\"./fa\": 184,\n\t\"./fa.js\": 184,\n\t\"./fi\": 185,\n\t\"./fi.js\": 185,\n\t\"./fil\": 186,\n\t\"./fil.js\": 186,\n\t\"./fo\": 187,\n\t\"./fo.js\": 187,\n\t\"./fr\": 188,\n\t\"./fr-ca\": 189,\n\t\"./fr-ca.js\": 189,\n\t\"./fr-ch\": 190,\n\t\"./fr-ch.js\": 190,\n\t\"./fr.js\": 188,\n\t\"./fy\": 191,\n\t\"./fy.js\": 191,\n\t\"./ga\": 192,\n\t\"./ga.js\": 192,\n\t\"./gd\": 193,\n\t\"./gd.js\": 193,\n\t\"./gl\": 194,\n\t\"./gl.js\": 194,\n\t\"./gom-deva\": 195,\n\t\"./gom-deva.js\": 195,\n\t\"./gom-latn\": 196,\n\t\"./gom-latn.js\": 196,\n\t\"./gu\": 197,\n\t\"./gu.js\": 197,\n\t\"./he\": 198,\n\t\"./he.js\": 198,\n\t\"./hi\": 199,\n\t\"./hi.js\": 199,\n\t\"./hr\": 200,\n\t\"./hr.js\": 200,\n\t\"./hu\": 201,\n\t\"./hu.js\": 201,\n\t\"./hy-am\": 202,\n\t\"./hy-am.js\": 202,\n\t\"./id\": 203,\n\t\"./id.js\": 203,\n\t\"./is\": 204,\n\t\"./is.js\": 204,\n\t\"./it\": 205,\n\t\"./it-ch\": 206,\n\t\"./it-ch.js\": 206,\n\t\"./it.js\": 205,\n\t\"./ja\": 207,\n\t\"./ja.js\": 207,\n\t\"./jv\": 208,\n\t\"./jv.js\": 208,\n\t\"./ka\": 209,\n\t\"./ka.js\": 209,\n\t\"./kk\": 210,\n\t\"./kk.js\": 210,\n\t\"./km\": 211,\n\t\"./km.js\": 211,\n\t\"./kn\": 212,\n\t\"./kn.js\": 212,\n\t\"./ko\": 213,\n\t\"./ko.js\": 213,\n\t\"./ku\": 214,\n\t\"./ku.js\": 214,\n\t\"./ky\": 215,\n\t\"./ky.js\": 215,\n\t\"./lb\": 216,\n\t\"./lb.js\": 216,\n\t\"./lo\": 217,\n\t\"./lo.js\": 217,\n\t\"./lt\": 218,\n\t\"./lt.js\": 218,\n\t\"./lv\": 219,\n\t\"./lv.js\": 219,\n\t\"./me\": 220,\n\t\"./me.js\": 220,\n\t\"./mi\": 221,\n\t\"./mi.js\": 221,\n\t\"./mk\": 222,\n\t\"./mk.js\": 222,\n\t\"./ml\": 223,\n\t\"./ml.js\": 223,\n\t\"./mn\": 224,\n\t\"./mn.js\": 224,\n\t\"./mr\": 225,\n\t\"./mr.js\": 225,\n\t\"./ms\": 226,\n\t\"./ms-my\": 227,\n\t\"./ms-my.js\": 227,\n\t\"./ms.js\": 226,\n\t\"./mt\": 228,\n\t\"./mt.js\": 228,\n\t\"./my\": 229,\n\t\"./my.js\": 229,\n\t\"./nb\": 230,\n\t\"./nb.js\": 230,\n\t\"./ne\": 231,\n\t\"./ne.js\": 231,\n\t\"./nl\": 232,\n\t\"./nl-be\": 233,\n\t\"./nl-be.js\": 233,\n\t\"./nl.js\": 232,\n\t\"./nn\": 234,\n\t\"./nn.js\": 234,\n\t\"./oc-lnc\": 235,\n\t\"./oc-lnc.js\": 235,\n\t\"./pa-in\": 236,\n\t\"./pa-in.js\": 236,\n\t\"./pl\": 237,\n\t\"./pl.js\": 237,\n\t\"./pt\": 238,\n\t\"./pt-br\": 239,\n\t\"./pt-br.js\": 239,\n\t\"./pt.js\": 238,\n\t\"./ro\": 240,\n\t\"./ro.js\": 240,\n\t\"./ru\": 241,\n\t\"./ru.js\": 241,\n\t\"./sd\": 242,\n\t\"./sd.js\": 242,\n\t\"./se\": 243,\n\t\"./se.js\": 243,\n\t\"./si\": 244,\n\t\"./si.js\": 244,\n\t\"./sk\": 245,\n\t\"./sk.js\": 245,\n\t\"./sl\": 246,\n\t\"./sl.js\": 246,\n\t\"./sq\": 247,\n\t\"./sq.js\": 247,\n\t\"./sr\": 248,\n\t\"./sr-cyrl\": 249,\n\t\"./sr-cyrl.js\": 249,\n\t\"./sr.js\": 248,\n\t\"./ss\": 250,\n\t\"./ss.js\": 250,\n\t\"./sv\": 251,\n\t\"./sv.js\": 251,\n\t\"./sw\": 252,\n\t\"./sw.js\": 252,\n\t\"./ta\": 253,\n\t\"./ta.js\": 253,\n\t\"./te\": 254,\n\t\"./te.js\": 254,\n\t\"./tet\": 255,\n\t\"./tet.js\": 255,\n\t\"./tg\": 256,\n\t\"./tg.js\": 256,\n\t\"./th\": 257,\n\t\"./th.js\": 257,\n\t\"./tk\": 258,\n\t\"./tk.js\": 258,\n\t\"./tl-ph\": 259,\n\t\"./tl-ph.js\": 259,\n\t\"./tlh\": 260,\n\t\"./tlh.js\": 260,\n\t\"./tr\": 261,\n\t\"./tr.js\": 261,\n\t\"./tzl\": 262,\n\t\"./tzl.js\": 262,\n\t\"./tzm\": 263,\n\t\"./tzm-latn\": 264,\n\t\"./tzm-latn.js\": 264,\n\t\"./tzm.js\": 263,\n\t\"./ug-cn\": 265,\n\t\"./ug-cn.js\": 265,\n\t\"./uk\": 266,\n\t\"./uk.js\": 266,\n\t\"./ur\": 267,\n\t\"./ur.js\": 267,\n\t\"./uz\": 268,\n\t\"./uz-latn\": 269,\n\t\"./uz-latn.js\": 269,\n\t\"./uz.js\": 268,\n\t\"./vi\": 270,\n\t\"./vi.js\": 270,\n\t\"./x-pseudo\": 271,\n\t\"./x-pseudo.js\": 271,\n\t\"./yo\": 272,\n\t\"./yo.js\": 272,\n\t\"./zh-cn\": 273,\n\t\"./zh-cn.js\": 273,\n\t\"./zh-hk\": 274,\n\t\"./zh-hk.js\": 274,\n\t\"./zh-mo\": 275,\n\t\"./zh-mo.js\": 275,\n\t\"./zh-tw\": 276,\n\t\"./zh-tw.js\": 276\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 457;","var map = {\n\t\"./af\": 306,\n\t\"./af.js\": 306,\n\t\"./ar\": 307,\n\t\"./ar-dz\": 308,\n\t\"./ar-dz.js\": 308,\n\t\"./ar-kw\": 309,\n\t\"./ar-kw.js\": 309,\n\t\"./ar-ly\": 310,\n\t\"./ar-ly.js\": 310,\n\t\"./ar-ma\": 311,\n\t\"./ar-ma.js\": 311,\n\t\"./ar-sa\": 312,\n\t\"./ar-sa.js\": 312,\n\t\"./ar-tn\": 313,\n\t\"./ar-tn.js\": 313,\n\t\"./ar.js\": 307,\n\t\"./az\": 314,\n\t\"./az.js\": 314,\n\t\"./be\": 315,\n\t\"./be.js\": 315,\n\t\"./bg\": 316,\n\t\"./bg.js\": 316,\n\t\"./bm\": 317,\n\t\"./bm.js\": 317,\n\t\"./bn\": 318,\n\t\"./bn.js\": 318,\n\t\"./bo\": 319,\n\t\"./bo.js\": 319,\n\t\"./br\": 320,\n\t\"./br.js\": 320,\n\t\"./bs\": 321,\n\t\"./bs.js\": 321,\n\t\"./ca\": 322,\n\t\"./ca.js\": 322,\n\t\"./cs\": 323,\n\t\"./cs.js\": 323,\n\t\"./cv\": 324,\n\t\"./cv.js\": 324,\n\t\"./cy\": 325,\n\t\"./cy.js\": 325,\n\t\"./da\": 326,\n\t\"./da.js\": 326,\n\t\"./de\": 327,\n\t\"./de-at\": 328,\n\t\"./de-at.js\": 328,\n\t\"./de-ch\": 329,\n\t\"./de-ch.js\": 329,\n\t\"./de.js\": 327,\n\t\"./dv\": 330,\n\t\"./dv.js\": 330,\n\t\"./el\": 331,\n\t\"./el.js\": 331,\n\t\"./en-SG\": 332,\n\t\"./en-SG.js\": 332,\n\t\"./en-au\": 333,\n\t\"./en-au.js\": 333,\n\t\"./en-ca\": 334,\n\t\"./en-ca.js\": 334,\n\t\"./en-gb\": 335,\n\t\"./en-gb.js\": 335,\n\t\"./en-ie\": 336,\n\t\"./en-ie.js\": 336,\n\t\"./en-il\": 337,\n\t\"./en-il.js\": 337,\n\t\"./en-nz\": 338,\n\t\"./en-nz.js\": 338,\n\t\"./eo\": 339,\n\t\"./eo.js\": 339,\n\t\"./es\": 340,\n\t\"./es-do\": 341,\n\t\"./es-do.js\": 341,\n\t\"./es-us\": 342,\n\t\"./es-us.js\": 342,\n\t\"./es.js\": 340,\n\t\"./et\": 343,\n\t\"./et.js\": 343,\n\t\"./eu\": 344,\n\t\"./eu.js\": 344,\n\t\"./fa\": 345,\n\t\"./fa.js\": 345,\n\t\"./fi\": 346,\n\t\"./fi.js\": 346,\n\t\"./fo\": 347,\n\t\"./fo.js\": 347,\n\t\"./fr\": 348,\n\t\"./fr-ca\": 349,\n\t\"./fr-ca.js\": 349,\n\t\"./fr-ch\": 350,\n\t\"./fr-ch.js\": 350,\n\t\"./fr.js\": 348,\n\t\"./fy\": 351,\n\t\"./fy.js\": 351,\n\t\"./ga\": 352,\n\t\"./ga.js\": 352,\n\t\"./gd\": 353,\n\t\"./gd.js\": 353,\n\t\"./gl\": 354,\n\t\"./gl.js\": 354,\n\t\"./gom-latn\": 355,\n\t\"./gom-latn.js\": 355,\n\t\"./gu\": 356,\n\t\"./gu.js\": 356,\n\t\"./he\": 357,\n\t\"./he.js\": 357,\n\t\"./hi\": 358,\n\t\"./hi.js\": 358,\n\t\"./hr\": 359,\n\t\"./hr.js\": 359,\n\t\"./hu\": 360,\n\t\"./hu.js\": 360,\n\t\"./hy-am\": 361,\n\t\"./hy-am.js\": 361,\n\t\"./id\": 362,\n\t\"./id.js\": 362,\n\t\"./is\": 363,\n\t\"./is.js\": 363,\n\t\"./it\": 364,\n\t\"./it-ch\": 365,\n\t\"./it-ch.js\": 365,\n\t\"./it.js\": 364,\n\t\"./ja\": 366,\n\t\"./ja.js\": 366,\n\t\"./jv\": 367,\n\t\"./jv.js\": 367,\n\t\"./ka\": 368,\n\t\"./ka.js\": 368,\n\t\"./kk\": 369,\n\t\"./kk.js\": 369,\n\t\"./km\": 370,\n\t\"./km.js\": 370,\n\t\"./kn\": 371,\n\t\"./kn.js\": 371,\n\t\"./ko\": 372,\n\t\"./ko.js\": 372,\n\t\"./ku\": 373,\n\t\"./ku.js\": 373,\n\t\"./ky\": 374,\n\t\"./ky.js\": 374,\n\t\"./lb\": 375,\n\t\"./lb.js\": 375,\n\t\"./lo\": 376,\n\t\"./lo.js\": 376,\n\t\"./lt\": 377,\n\t\"./lt.js\": 377,\n\t\"./lv\": 378,\n\t\"./lv.js\": 378,\n\t\"./me\": 379,\n\t\"./me.js\": 379,\n\t\"./mi\": 380,\n\t\"./mi.js\": 380,\n\t\"./mk\": 381,\n\t\"./mk.js\": 381,\n\t\"./ml\": 382,\n\t\"./ml.js\": 382,\n\t\"./mn\": 383,\n\t\"./mn.js\": 383,\n\t\"./mr\": 384,\n\t\"./mr.js\": 384,\n\t\"./ms\": 385,\n\t\"./ms-my\": 386,\n\t\"./ms-my.js\": 386,\n\t\"./ms.js\": 385,\n\t\"./mt\": 387,\n\t\"./mt.js\": 387,\n\t\"./my\": 388,\n\t\"./my.js\": 388,\n\t\"./nb\": 389,\n\t\"./nb.js\": 389,\n\t\"./ne\": 390,\n\t\"./ne.js\": 390,\n\t\"./nl\": 391,\n\t\"./nl-be\": 392,\n\t\"./nl-be.js\": 392,\n\t\"./nl.js\": 391,\n\t\"./nn\": 393,\n\t\"./nn.js\": 393,\n\t\"./pa-in\": 394,\n\t\"./pa-in.js\": 394,\n\t\"./pl\": 395,\n\t\"./pl.js\": 395,\n\t\"./pt\": 396,\n\t\"./pt-br\": 397,\n\t\"./pt-br.js\": 397,\n\t\"./pt.js\": 396,\n\t\"./ro\": 398,\n\t\"./ro.js\": 398,\n\t\"./ru\": 399,\n\t\"./ru.js\": 399,\n\t\"./sd\": 400,\n\t\"./sd.js\": 400,\n\t\"./se\": 401,\n\t\"./se.js\": 401,\n\t\"./si\": 402,\n\t\"./si.js\": 402,\n\t\"./sk\": 403,\n\t\"./sk.js\": 403,\n\t\"./sl\": 404,\n\t\"./sl.js\": 404,\n\t\"./sq\": 405,\n\t\"./sq.js\": 405,\n\t\"./sr\": 406,\n\t\"./sr-cyrl\": 407,\n\t\"./sr-cyrl.js\": 407,\n\t\"./sr.js\": 406,\n\t\"./ss\": 408,\n\t\"./ss.js\": 408,\n\t\"./sv\": 409,\n\t\"./sv.js\": 409,\n\t\"./sw\": 410,\n\t\"./sw.js\": 410,\n\t\"./ta\": 411,\n\t\"./ta.js\": 411,\n\t\"./te\": 412,\n\t\"./te.js\": 412,\n\t\"./tet\": 413,\n\t\"./tet.js\": 413,\n\t\"./tg\": 414,\n\t\"./tg.js\": 414,\n\t\"./th\": 415,\n\t\"./th.js\": 415,\n\t\"./tl-ph\": 416,\n\t\"./tl-ph.js\": 416,\n\t\"./tlh\": 417,\n\t\"./tlh.js\": 417,\n\t\"./tr\": 418,\n\t\"./tr.js\": 418,\n\t\"./tzl\": 419,\n\t\"./tzl.js\": 419,\n\t\"./tzm\": 420,\n\t\"./tzm-latn\": 421,\n\t\"./tzm-latn.js\": 421,\n\t\"./tzm.js\": 420,\n\t\"./ug-cn\": 422,\n\t\"./ug-cn.js\": 422,\n\t\"./uk\": 423,\n\t\"./uk.js\": 423,\n\t\"./ur\": 424,\n\t\"./ur.js\": 424,\n\t\"./uz\": 425,\n\t\"./uz-latn\": 426,\n\t\"./uz-latn.js\": 426,\n\t\"./uz.js\": 425,\n\t\"./vi\": 427,\n\t\"./vi.js\": 427,\n\t\"./x-pseudo\": 428,\n\t\"./x-pseudo.js\": 428,\n\t\"./yo\": 429,\n\t\"./yo.js\": 429,\n\t\"./zh-cn\": 430,\n\t\"./zh-cn.js\": 430,\n\t\"./zh-hk\": 431,\n\t\"./zh-hk.js\": 431,\n\t\"./zh-tw\": 432,\n\t\"./zh-tw.js\": 432\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 475;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","class UUID {\n    constructor() {\n    }\n\n    getUniqueId(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        downloader.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        downloader.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = uuid.getUniqueId();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1: any, item2: any): boolean {\n    return (item1.gameId === item2.gameId);\n}\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config: any;\n\n    public constructor(config: any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments, stateObj, true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj, true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj, true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments, stateObj, isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame, true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport socketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                socketManager.joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                socketManager.joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        notifier.show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            notifier.show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any | null;\n    timer: number,\n    data: any[] | null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","class BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: any[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute[0], attribute[1]);\n            });\n        }\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst templateLogger = debug('template-manager');\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    public getScoreSheetTemplate(boardGame: any): any | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiTemplate();\n        }\n        if (boardGame.gameId === 150145) {\n            return this.getSkullKingTemplate();\n        }\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame: any): any[] | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiStartingData();\n        }\n        if (boardGame.gameId === 150145) {\n            return this.getSkullKingStartingData();\n        }\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public getSaveData(boardGame: any, scoreSheet: ScoreSheet): any {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiSaveData(scoreSheet);\n        }\n        if (boardGame.gameId === 150145) {\n            return this.getSkullKingSaveData(scoreSheet);\n        }\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n    public transformDataAfterUserChange(boardGame: any, scoreSheet: ScoreSheet): boolean {\n        let result = false;\n        if (boardGame.gameId === 270314) {\n            result = true;\n            this.transformOhanamiData(scoreSheet);\n        }\n        if (boardGame.gameId === 150145) {\n            result = true;\n            this.transformSkullKingData(scoreSheet);\n        }\n        return result; // do nothing unless for a specific game\n    }\n\n    private getOhanamiTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 8)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column > 1) {\n                    if ((row === 1) || (row === 2) || (row === 4)) {\n                        return {\n                            className: 'bg-ohanami-blue',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 3) || (row === 5)) {\n                        return {\n                            className: 'bg-ohanami-green',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 6)) {\n                        return {\n                            className: 'bg-ohanami-grey',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 7)) {\n                        return {\n                            className: 'bg-ohanami-pink',\n                            forceNumeric: true,\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 21)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column % 2 === 0) {\n                    if (row % 2 === 0) {\n                        return {\n                            className: 'bg-readonly',\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingStartingData(): any[] {\n        return [\n            ['Round', '', 'P 1', '', 'P 2', '', 'P 3', '', 'P 4', ''],\n            ['1', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['2', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['3', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['4', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['5', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['6', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['7', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['8', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['9', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['10', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['Total', '', '', '', '', '', '', '', '', '']\n        ];\n    }\n\n    private getOhanamiStartingData(): any[] {\n        return [\n            ['Round', 'Mult.', 'P 1', 'P 2', 'P 3', 'P 4'],\n            ['1', 'x3', '0', '0', '0', '0'],\n            ['2', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['3', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['', 'x7', '0', '0', '0', '0'],\n            ['', 'var', '0', '0', '0', '0'],\n            ['Total', '', '0', '0', '0', '0']\n        ];\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame: any): any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn: 0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame: any): any[] {\n        return [\n            ['P 1', 'P 2', 'P 3', 'P 4', 'P 5', 'P 6', 'P 7'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n        ];\n    }\n\n    private getDefaultSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // ensure the scores are numbers\n        scores.forEach((score,index) => {\n            const parsed = parseInt(score);\n            if (isNaN(parsed)) {\n                scores[index] = 0;\n            }\n            else {\n                scores[index] = parsed;\n            }\n        })\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    private getOhanamiSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first two columns\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 2; index < playerNames.length; index++) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for ohanami is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private getSkullKingSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first three columns, every second column\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // last row is the scores, following the same pattern as the playr names\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 3; index < playerNames.length; index += 2) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for skull king is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private calculateOhanamiPinkScore(numOfCards: number): number {\n        let score = 0;\n        if (numOfCards > 0) {\n            if (numOfCards > 15) numOfCards = 15;\n            while (numOfCards > 0) {\n                score += numOfCards;\n                numOfCards--;\n            }\n        }\n        return score;\n    }\n\n    private transformOhanamiData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 0; index < 4; index++) {\n            /*\n             *  for each player the score is the sum of\n             *  3 x row 1, 2, and 4\n             *  4 x row 3 and 5\n             *  7 x row 6\n             *  row 7 is complicated\n             */\n            let score: number = 0;\n            // @ts-ignore\n            let parsed = parseInt(scoreSheet.data[1][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[2][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[4][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[3][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[5][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[6][index + 2]);\n            if (!isNaN(parsed)) score += (7 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[7][index + 2]);\n            if (!isNaN(parsed)) score += this.calculateOhanamiPinkScore(parsed);\n\n            // @ts-ignore\n            scoreSheet.data[8][index + 2] = score;\n        }\n    }\n\n    private transformSkullKingData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 2; index < 10; index += 2) {\n            /*\n             *  for each player the score is the sum of\n             *  each bid score plus a bonus\n             *  if bid is 0, and actual is 0, score is 10 x round\n             *  if bid is x, and actual is x, score is 20 x bid\n             *  if bid ix x, and actual is y (x != y), score is 10 x abs(x-y)\n             */\n            let score: number = 0;\n\n\n            for (let round = 1; round <= 10; round++) {\n                let row = 2 * round - 1;\n                // @ts-ignore\n                let parsedBid = parseInt(scoreSheet.data[row][index]);\n                // @ts-ignore\n                let parsedActual = parseInt(scoreSheet.data[row][index + 1])\n                // @ts-ignore\n                let parsedBonus = parseInt(scoreSheet.data[row + 1][index + 1]);\n                // @ts-ignore\n                if (!isNaN(parsedBid) && !isNaN(parsedActual)) {\n                    if ((parsedBid === 0) && (parsedActual === 0)) {\n                        score += round * 10;\n                    }\n                    if (parsedBid === parsedActual) {\n                        score += 20 * parsedBid;\n                    }\n                    if ((parsedBid > 0) && (parsedBid !== parsedActual)) {\n                        score -= 10 * Math.abs(parsedBid - parsedActual);\n                    }\n                    if (!isNaN(parsedBonus)) score += parsedBonus;\n                }\n            }\n\n            // @ts-ignore\n            scoreSheet.data[21][index + 1] = score;\n        }\n\n    }\n}\n","import StateChangeListener from \"../state/StateChangeListener\";\nimport {ScoreSheetController} from \"./ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport debug from 'debug';\nimport {ScoreSheet} from \"../AppTypes\";\nimport {TemplateManager} from \"../template/TemplateManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport controller from \"../Controller\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetView implements StateChangeListener {\n    private static _instance: ScoreSheetView;\n    // @ts-ignore\n    protected ssFastSearchUserNames: HTMLElement;\n    private applicationView: any | null = null;\n    private stateManager: StateManager;\n\n    private thisEl: HTMLDivElement | null = null;\n    private boardGameTitleEl: HTMLHeadingElement | null = null;\n    private startStopTimer: HTMLButtonElement | null = null;\n    private timerEl: HTMLDivElement | null = null;\n    private endOrLeaveEl: HTMLButtonElement | null = null;\n    private scoreSheetEl: HTMLDivElement | null = null;\n\n\n\n    private table: Handsontable | null = null;\n    private controller: ScoreSheetController;\n    private config: any;\n\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n        this.stateManager = controller.getStateManager();\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n    }\n\n    public static getInstance(): ScoreSheetView {\n        if (!(ScoreSheetView._instance)) {\n            ScoreSheetView._instance = new ScoreSheetView();\n        }\n        return ScoreSheetView._instance;\n    }\n\n    public setApplication(applicationView: any) {\n        this.config = applicationView.state;\n        this.stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n    }\n\n    public onDocumentLoaded(applicationView: any) {\n        this.applicationView = applicationView;\n        this.resetDisplay();\n\n        // @ts-ignore\n        this.ssFastSearchUserNames = document.getElementById(this.config.ui.scoreSheet.dom.ssFastSearchUserNames);\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.config.ui.scoreSheet.dom.ssFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(this.applicationView.state.stateNames.scoreSheet, this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click', this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click', this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault()\n            });\n            this.thisEl.addEventListener('drop', this.handleUserDrop);\n        }\n\n\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        ssvLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected, and is scoresheet owner\n        if (ScoreSheetController.getInstance().isSheetOwner()) {\n            ScoreSheetController.getInstance().inviteUser(ui.item.label);\n        }\n        else {\n            alert (\"Only the score sheet creator can invite users.\");\n        }\n    }\n\n\n    handleEndOrLeave(event: MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        } else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event: MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        } else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.applicationView.state.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[this.applicationView.state.ui.draggable.draggedType] === this.applicationView.state.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = this.applicationView.state.ui.scoreSheet.dom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n\n\n    }\n\n    public updateTimer(time: number, isPaused: boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n            } else {\n                this.startStopTimer.innerHTML = 'Pause   ' + this.applicationView.state.ui.scoreSheet.dom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', true);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === this.config.stateNames.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.config.ui.scoreSheet.dom.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n\n        } else {\n            let scoreSheet: ScoreSheet = newValue;\n            ssvLogger(`Processing new state`);\n            ssvLogger(scoreSheet);\n            if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n            // update the board game name\n            if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n            // update the table\n            if (this.table) {\n                // process the data in the state change, will be array of array (rows) into what the table wants\n                let tableData: any = [];\n                // @ts-ignore\n                scoreSheet.data.forEach((row: any[], rowIndex: number) => {\n                    row.forEach((column: any, columnIndex: number) => {\n                        tableData.push([rowIndex, columnIndex, column]);\n                    });\n                });\n                ssvLogger(`Table data is `);\n                ssvLogger(tableData);\n                // @ts-ignore\n                this.table.setDataAtCell(tableData, ScoreSheetController.SOURCE_View);\n\n            } else {\n                // create a new table\n\n                if (this.scoreSheetEl) {\n                    const boardGame = this.controller.getSelectedBoardGame();\n                    if (boardGame) {\n                        scoreSheet.sheetLayoutOptions = TemplateManager.getInstance().getScoreSheetTemplate(boardGame);\n                    }\n                    scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                    this.table = new Handsontable(\n                        this.scoreSheetEl,\n                        scoreSheet.sheetLayoutOptions);\n                    // @ts-ignore\n                    this.table.addHook('afterChange', this.controller.userChangedValue);\n                }\n            }\n\n\n            // update the timer\n            if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n        }\n\n    }\n\n    public getTableData(): any[] {\n        if (this.table) {\n            return this.table.getData();\n        } else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    private createTimerDisplay(timer: number): string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        } else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer / 3600);\n                let minutes = Math.floor(timer / 60);\n                let seconds = timer - (hours * 3600) - (minutes * 60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    } else {\n                        result += `${minutes}:`\n                    }\n                } else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    } else {\n                        result += `${seconds}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            } else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    } else {\n                        result += `${timer}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n\n}","import controller from \"../Controller\";\nimport debug from 'debug';\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst callLogger = debug('call-manager');\n\nexport class CallManager {\n    private static _instance: CallManager;\n    \n\n    public static getInstance(): CallManager {\n        if (!(CallManager._instance)) {\n            CallManager._instance = new CallManager();\n        }\n        return CallManager._instance;\n    }\n\n    private peer: any | null = null;\n    private webrtcDiv: HTMLElement | null = null;\n    private myVideoStream: MediaStream | null = null;\n    private myVideo: HTMLVideoElement | null = null;\n    private currentUserList:string[];\n    \n    private constructor() {\n        this.callUser = this.callUser.bind(this);\n        this.currentUserList = [];\n    }\n\n    private startPeerConnection() {\n        if (controller.isLoggedIn()) {\n            // @ts-ignore  - is for the WebRTC peer via Nodejs\n            this.peer = new Peer(controller.getLoggedInUsername(), {path: '/peerjs', host: '/', debug: 2, secure:true});\n            //this.peer = new Peer(controller.getLoggedInUsername(), {path: '/peerjs', host: '/', port: '3000', debug:1, secure:false});\n            this.peer.on('open', (id:any) => {\n                callLogger('My peer ID is: ' + id);\n            });\n        }\n    }\n    \n    public initialise(applicationView:any) {\n        this.startPeerConnection();\n        // @ts-ignore\n        this.webrtcDiv = document.getElementById(applicationView.state.ui.scoreSheet.dom.webrtc);\n        //this.reset();\n    }\n\n    public startScoreSheet() {\n        try {\n            if (controller.isLoggedIn()) {\n                if (navigator.mediaDevices.getUserMedia) {\n                    callLogger('Starting scoresheet stream');\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        callLogger('Scoresheet stream started - adding video element');\n                        this.myVideoStream = stream;\n                        this.addVideoStream(controller.getLoggedInUsername(), this.myVideoStream, true);\n                    });\n\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Non-secure context or no camera capability`);\n        }\n    }\n    \n    public reset() {\n        callLogger('Reset');\n        if (this.currentUserList && this.currentUserList.length > 0) {\n            callLogger('Removing previous users');\n            this.currentUserList.forEach((user) => {\n                callLogger('Removing previous user ${user}');\n                this.removeUser(user);\n            })\n        }\n        if (this.webrtcDiv) browserUtil.removeAllChildren(this.webrtcDiv);\n        this.currentUserList = [];\n        if (this.peer) {\n            callLogger('Stopping video stream');\n            //this.peer.disconnect();\n            if (this.myVideoStream) {\n                this.myVideoStream.getTracks().forEach((track) => track.stop());\n            }\n            if (this.myVideo) this.myVideo.srcObject = null;\n            this.myVideoStream = null;\n        }\n    }\n\n    private addVideoStream(username: string, stream: MediaStream, isCurrentUser = false) {\n        // check to see if they are already there\n        let index = this.currentUserList.findIndex((user) => user === username);\n        if (index >= 0) return;\n\n        this.currentUserList.push(username);\n\n        const videoCardHolder = document.createElement('div');\n        videoCardHolder.setAttribute(\"id\", username);\n        browserUtil.addRemoveClasses(videoCardHolder, 'col-sm-12 col-md-4 col-lg-3');\n        const videoCard = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCard,'card');\n        const videoCardTitle = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardTitle, 'card-header');\n        videoCardTitle.innerHTML = `<h5 class=\"card-title\">${username}</h5>`;\n        const videoCardBody = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardBody, 'card-body p-0 text-center');\n        const video = document.createElement('video');\n        browserUtil.addRemoveClasses(video, 'video ');\n\n        videoCard.appendChild(videoCardTitle);\n        videoCard.appendChild(videoCardBody);\n        videoCardBody.appendChild(video);\n\n        if (isCurrentUser) {\n            const videoCardFooter = document.createElement('div');\n            browserUtil.addRemoveClasses(videoCardFooter, 'card-footer');\n            const footerContent = document.createElement('div');\n            browserUtil.addRemoveClasses(footerContent,'d-flex w-100 justify-content-between mt-2');\n            const stopVideoButton = document.createElement('button');\n            stopVideoButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(stopVideoButton,'btn btn-circle btn-warning');\n            stopVideoButton.innerHTML = '<i class=\"fas fa-video-slash\"></i>';\n            const muteMicButton = document.createElement('button');\n            muteMicButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(muteMicButton,'btn btn-circle btn-warning');\n            muteMicButton.innerHTML = '<i class=\"fa fa-microphone\"></i>';\n\n            footerContent.appendChild(stopVideoButton);\n            footerContent.appendChild(muteMicButton);\n\n            videoCardFooter.appendChild(footerContent);\n\n            videoCard.appendChild(videoCardFooter);\n\n            stopVideoButton.addEventListener('click',() => {\n                const isPaused = video.paused;\n                if (isPaused) {\n                    video.play();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',true);\n\n                }\n                else {\n                    video.pause();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',false);\n                }\n\n            });\n            muteMicButton.addEventListener('click',() => {\n                const isMuted = video.muted;\n                if (isMuted) {\n                    video.muted = false;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',true);\n\n                }\n                else {\n                    video.muted = true;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',false);\n                }\n\n            });\n\n            this.myVideo = video;\n        }\n\n        videoCardHolder.appendChild(videoCard);\n        video.srcObject = stream;\n        video.addEventListener(\"loadedmetadata\", () => {\n            video.play();\n            if (this.webrtcDiv) this.webrtcDiv.append(videoCardHolder);\n        });\n    };\n\n    public callUser(userId: string) {\n        callLogger(`Asked to call user ${userId}`);\n        if (userId === controller.getLoggedInUsername()) return; // don't call ourself\n        let numberOfAttempts:number = 0;\n\n        let index = this.currentUserList.findIndex((user) => user === userId); // don't call the same users\n        if (index >= 0) return;\n        // wait a small time for the sockets and peer to sync\n        const interval = setInterval(() => {\n            callLogger(`Calling user ${userId}`);\n            if (this.myVideoStream) {\n                const call = this.peer.call(userId, this.myVideoStream);\n                if (call) {\n                    call.on('stream', (userVideoStream: any) => {\n                        callLogger(`User ${userId} answered, showing stream`);\n                        this.addVideoStream(userId, userVideoStream, false);\n                    });\n                    clearInterval(interval);\n                }\n                else {\n                    // try again shortly\n                    numberOfAttempts ++;\n                    if (numberOfAttempts > 3) clearInterval(interval);\n                }\n            }\n        },5000);\n    };\n\n    public removeUser(userId:string) {\n        callLogger(`Asked to remove user ${userId}`);\n        let index = this.currentUserList.findIndex((user) => user === userId);\n        if (index >= 0) {\n            this.currentUserList.splice(index,1);\n        }\n        const userVideoCard = document.getElementById(userId);\n        if (userVideoCard) {\n            callLogger(`Asked to remove user ${userId} - removing video element`);\n            const videoEl:HTMLVideoElement|null = userVideoCard.querySelector(\".video\");\n            if (videoEl) {\n                videoEl.srcObject = null;\n            }\n\n            browserUtil.removeAllChildren(userVideoCard);\n            const parentNode = userVideoCard.parentNode;\n            if (parentNode) parentNode.removeChild(userVideoCard);\n        }\n    }\n\n    prepareToAnswerCallFrom(userId: string) {\n        try {\n            if (controller.isLoggedIn()) {\n                callLogger(`Preparing to answer call from ${userId}`);\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        this.myVideoStream = stream;\n                        this.addVideoStream(controller.getLoggedInUsername(), this.myVideoStream, true);\n                        callLogger(`Awaiting call from ${userId}`);\n                        this.peer.on('call', (call: any) => {\n                            callLogger(`Answering call from ${userId}`);\n                            call.answer(this.myVideoStream);\n                            call.on('stream', (userVideoStream: any) => {\n                                alert(\"Answered\");\n                                callLogger(`Have answered, showing stream`);\n                                this.addVideoStream(userId, userVideoStream, false);\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Insecure context or no video capability`);\n        }\n\n    }\n}","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../socket/Types\";\nimport {ChatReceiver} from \"../socket/ChatReceiver\";\nimport notifier from \"../notification/NotificationManager\";\nimport {ScoreSheetView} from \"./ScoreSheetView\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport uuid from \"../util/UUID\";\nimport socketManager from \"../socket/SocketManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport moment from \"moment\";\nimport controller from \"../Controller\";\nimport {TemplateManager} from \"../template/TemplateManager\";\nimport {CallManager} from \"./CallManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    public static SOURCE_View: string = 'ssv';\n\n    private static _instance: ScoreSheetController;\n    private applicationView: any | null = null;\n    private currentScoreRoom: string | null = null;\n    private currentlySelectedBoardGame: any | null = null;\n    private currentScoreSheet: ScoreSheet | null = null;\n    private currentUsername: string = '';\n    private isRoomCreator: boolean = false;\n    private stateManager: StateManager;\n    private currentUsersInScoreSheet: string[] = [];\n    private intervalTimer: number = -1;\n\n\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager();\n        socketManager.addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n        this.isSheetOwner = this.isSheetOwner.bind(this);\n        this.inviteUser = this.inviteUser.bind(this);\n        this.getCurrentRoom = this.getCurrentRoom.bind(this);\n        this.getSelectedBoardGame = this.getSelectedBoardGame.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimerStoppedByAnotherUser = this.stopTimerStoppedByAnotherUser.bind(this);\n        this.isTimerGoing = this.isTimerGoing.bind(this);\n        this.reset = this.reset.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public getCurrentRoom(): string | null {\n        return this.currentScoreRoom;\n    }\n\n    receiveLogin(username: string): void {\n    }\n\n    receiveLogout(username: string): void {\n    }\n\n    public setCurrentUser(username: string): void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView: any) {\n        this.applicationView = applicationView;\n        CallManager.getInstance().initialise(applicationView);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                socketManager.sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                socketManager.sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n\n        }\n\n        // prepare to receive a call\n        CallManager.getInstance().prepareToAnswerCallFrom(invite.from);\n\n\n        // notify the user of the new chat\n        notifier.show('Score Sheet', `Joining score sheet`, 'info', 7000);\n        socketManager.joinChat(this.getCurrentUser(), invite.room, InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        controller.addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetView.getInstance().stateChanged(\"\", \"\", this.currentScoreSheet);\n\n\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    public getSelectedBoardGame(): any | null {\n        return this.currentlySelectedBoardGame;\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message: Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite: Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n                this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                notifier.show('Score Sheet', `User ${username} declined the invitation.`, 'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.addUserToScoreSheet(users.username);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name, `User ${users.username} joined the scoresheet.`, 'message', 120000);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index, 1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name, `User ${users.username} left the scoresheet.`, 'warning', 100000);\n    }\n\n    receiveUserList(users: string[]): void {\n    } // will be managed in the transfer of sheet data\n\n    public endScoreSheet(): void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet, true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    public startScoreSheet(boardGame: any): void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer: 0,\n                timerGoing: false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished: false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            CallManager.getInstance().startScoreSheet();\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet, this.currentScoreSheet, true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) socketManager.joinChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet(): boolean {\n        let result = false;\n        if (this.currentScoreRoom && (this.currentScoreRoom !== null)) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username: string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                notifier.show(this.currentlySelectedBoardGame.name, `You have invited user ${username} to the scoresheet`, 'message');\n                socketManager.sendInvite(this.getCurrentUser(), username, this.currentScoreRoom, InviteType.ScoreSheet, true, this.currentlySelectedBoardGame.name, {\n                    scoreSheet: this.currentScoreSheet,\n                    boardGame: this.currentlySelectedBoardGame\n                });\n            } else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet: ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer) ? scoreSheet.timer : this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            } else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        } else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            } else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet, true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner(): boolean {\n        return this.isRoomCreator;\n    }\n\n    public createScoreSheetFromTable(): ScoreSheet | null {\n        let scoreSheet: ScoreSheet | null = null;\n        let tableData = ScoreSheetView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame) ? TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame) : null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet: ScoreSheet, isFinished: boolean = false): void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            socketManager.sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer++;\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n            } else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n                }\n            }\n        }, 1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet, false);\n            }\n        }\n    }\n\n    public userChangedValue(value: any, source: string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet: ScoreSheet | null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            sscLogger(`Letting the template manager change any values`);\n            const changedByTM: boolean = TemplateManager.getInstance().transformDataAfterUserChange(this.currentlySelectedBoardGame, scoreSheet);\n            if (changedByTM) {\n                sscLogger(scoreSheet);\n            }\n\n            this.saveCurrentScoreSheet(scoreSheet, changedByTM);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet, false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                socketManager.leaveChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n\n    protected addUserToScoreSheet(username: string): void {\n        if (controller.isLoggedIn()) {\n            sscLogger(`Calling user ${username}`);\n            CallManager.getInstance().callUser(username);\n        }\n    }\n\n    protected removeUserFromScoreSheet(username: string): void {\n        sscLogger(`Removing user ${username}`);\n        CallManager.getInstance().removeUser(username);\n    }\n\n    private reset(): void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n        CallManager.getInstance().reset();\n    }\n\n    private isLoggedIn(): boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet: ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame, scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            controller.scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n    private saveCurrentScoreSheet(scoreSheet: ScoreSheet, informListeners: boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet, this.currentScoreSheet, informListeners);\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, true);\n        }\n        this.intervalTimer = -1;\n    }\n\n}\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n\n            // load the users\n            this.getStateManager().getStateByName(this.config.stateNames.users);\n        }\n        let currentGameList: any[] = this.displayedBoardGamesStateManager.getStateByName(this.config.stateNames.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.bggSearchCallById.queryString, {gameId: boardGame.gameId}, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game: any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n\n                if (updatingBoardGame.scoresheets) {\n                    const cb = (data: any, status: number, associatedStateName: string) => {\n                    };\n\n                    // add the scoresheets to database\n                    updatingBoardGame.scoresheets.forEach((scoreSheet: any) => {\n                        this.convertScoreSheetToApiCallFormat(scoreSheet);\n                        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                            {userId: this.getCurrentUser(), boardGameId: updatingBoardGame.id, sheet: scoreSheet},\n                            cb,\n                            this.config.stateNames.scoreSheet,\n                            false);\n                        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n                        scoreSheet.decorator = Decorator.Persisted;\n\n                    });\n\n                }\n\n                this.applicationView.setState({boardGames: currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(this.config.stateNames.boardGames, updatingBoardGame, isSameGame, false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[this.config.apis.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame: any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n\n                this.decorateScoreSheets(boardGame);\n\n                let index = currentGameList.findIndex((game: any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >= 0}`);\n                if (index >= 0) {\n                    const locallySaveBoardGame = currentGameList[index];\n\n                    cLoggerDetail(`in current state, replacing`);\n                    // copy any locally saved score sheets to the database object\n                    this.copyLocallySavedScoreSheetsToBoardGame(boardGame, locallySaveBoardGame);\n\n                    // replace the current entry\n                    currentGameList.splice(index, 1, boardGame);\n                } else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames: currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentGameList, false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame: any, scoreSheet: any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                {userId: this.getCurrentUser(), boardGameId: boardGame.id, sheet: scoreSheet},\n                cb,\n                this.config.stateNames.scoreSheet,\n                false);\n            scoreSheet.decorator = Decorator.Persisted;\n        } else {\n            scoreSheet.decorator = Decorator.PersistedLocally;\n        }\n        // convert the scoresheet into the usual received format from the database\n        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    scoreSheetRemovedFromBoardGame(boardGame: any, scoreSheetId: string) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeScoreSheet.queryString,\n                {sheetId: scoreSheetId},\n                cb,\n                this.config.stateNames.scoreSheet,\n                false);\n        }\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(this.config.stateNames.boardGames, boardGame, true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            let scoreSheets = boardGame.scoresheets;\n                            delete boardGame.scoresheets;\n\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                this.config.stateNames.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                            boardGame.scoresheets = scoreSheets;\n\n\n                        } else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                this.config.stateNames.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private cleanupBoardGameState(boardGames: any[]): any[] { // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList: any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                } else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index, 1, boardGame);\n                    } else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            } else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.getMyBoardGameCollection.queryString, {userId: this.getLoggedInUserId()}, this.callbackGetCollection, this.config.stateNames.boardGames, false);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    private removeBoardGameFromState(boardGame: any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index, 1);\n            this.applicationView.setState({boardGames: currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentBoardGamesOnDisplay, false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private decorateScoreSheets(boardGame: any) {\n        if (boardGame) {\n            if (boardGame.scoresheets) {\n                boardGame.scoresheets.forEach((sheet: any) => {\n                    sheet.decorator = Decorator.Persisted;\n                })\n            } else {\n                boardGame.scoresheets = [];\n            }\n        }\n    }\n\n    private copyLocallySavedScoreSheetsToBoardGame(target: any, source: any) {\n        if (source.scoresheets) {\n            let toSave: any[] = [];\n            source.scoresheets.forEach((sheet: any) => {\n                // is the scoresheet already in the target?\n                let index = target.scoresheets.findIndex((item: any) => item.id === sheet.id);\n                if (index < 0) {\n                    sheet.decorator = Decorator.PersistedLocally;\n                    target.scoresheets.push(sheet);\n                    toSave.push(sheet);\n                }\n            });\n\n            // do we have any sheets to save?\n            if (toSave.length > 0) {\n                const cb = (data: any, status: number, associatedStateName: string) => {\n                };\n\n                toSave.forEach((sheetToSave: any) => {\n                    this.convertScoreSheetToApiCallFormat(sheetToSave);\n\n\n                    downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                        {userId: this.getCurrentUser(), boardGameId: target.id, sheet: sheetToSave},\n                        cb,\n                        this.config.stateNames.scoreSheet,\n                        false);\n\n                    this.convertScoreSheetToDatabaseFormat(sheetToSave);\n                    sheetToSave.decorator = Decorator.Persisted;\n                });\n            }\n        }\n    }\n\n    private convertScoreSheetToDatabaseFormat(scoreSheet: any) {\n        if (scoreSheet.players) {\n            if (scoreSheet.players.length >= 1) {\n                scoreSheet.player1 = scoreSheet.players[0];\n                scoreSheet.score1 = scoreSheet.scores[0];\n            }\n            if (scoreSheet.players.length >= 2) {\n                scoreSheet.player2 = scoreSheet.players[1];\n                scoreSheet.score2 = scoreSheet.scores[1];\n            }\n            if (scoreSheet.players.length >= 3) {\n                scoreSheet.player3 = scoreSheet.players[2];\n                scoreSheet.score3 = scoreSheet.scores[2];\n            }\n            if (scoreSheet.players.length >= 4) {\n                scoreSheet.player4 = scoreSheet.players[3];\n                scoreSheet.score4 = scoreSheet.scores[3];\n            }\n            if (scoreSheet.players.length >= 5) {\n                scoreSheet.player5 = scoreSheet.players[4];\n                scoreSheet.score5 = scoreSheet.scores[4];\n            }\n            if (scoreSheet.players.length >= 6) {\n                scoreSheet.player6 = scoreSheet.players[5];\n                scoreSheet.score6 = scoreSheet.scores[5];\n            }\n            if (scoreSheet.players.length >= 7) {\n                scoreSheet.player7 = scoreSheet.players[6];\n                scoreSheet.score7 = scoreSheet.scores[6];\n            }\n\n        }\n    }\n\n    private convertScoreSheetToApiCallFormat(scoreSheet: any) {\n        delete scoreSheet.decorator;\n        delete scoreSheet.player1;\n        delete scoreSheet.score1;\n        delete scoreSheet.player2;\n        delete scoreSheet.score2;\n        delete scoreSheet.player3;\n        delete scoreSheet.score3;\n        delete scoreSheet.player4;\n        delete scoreSheet.score4;\n        delete scoreSheet.player5;\n        delete scoreSheet.score5;\n        delete scoreSheet.player6;\n        delete scoreSheet.score6;\n        delete scoreSheet.player7;\n        delete scoreSheet.score7;\n    }\n\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.eventAction2Clicked = this.eventAction2Clicked.bind(this);\n        this.eventAction1Clicked = this.eventAction1Clicked.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected eventAction1Clicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    protected eventAction2Clicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    protected abstract getDragData(event: DragEvent): any;\n\n    protected abstract getIdForStateItem(name: string, item: any): string;\n\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n\n    protected abstract getBadgeValue(name: string, item: any): number;\n\n    protected abstract getBackgroundImage(name: string, item: any): string;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource: any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl: HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl: HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBackgroundImage) {\n                let imgEl = this.document.createElement(domConfig.imgElementType);\n                browserUtil.addRemoveClasses(imgEl, domConfig.imgClasses);\n                imgEl.setAttribute('src', this.getBackgroundImage(name, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonBadgeEl = this.document.createElement('div');\n            contentEl.appendChild(buttonBadgeEl);\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    buttonBadgeEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.extraAction1Classes) {\n                let action: HTMLElement = this.document.createElement('button');\n                action.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(action, domConfig.extraAction1Classes);\n                if (domConfig.extraAction1Text) {\n                    if (domConfig.extraAction1Text.trim().length > 0) {\n                        action.innerHTML = domConfig.extraAction1Text;\n                    }\n                }\n                if (domConfig.extraAction1IconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.extraAction1IconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    action.appendChild(iconEl);\n                }\n                action.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                action.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                action.setAttribute(domConfig.resultDataSourceId, dataSource);\n                action.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventAction1Clicked(event);\n                });\n                buttonBadgeEl.appendChild(action);\n            }\n            if (domConfig.extraAction2Classes) {\n                let action: HTMLElement = this.document.createElement('button');\n                action.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(action, domConfig.extraAction2Classes);\n                if (domConfig.extraAction2Text) {\n                    if (domConfig.extraAction2Text.trim().length > 0) {\n                        action.innerHTML = domConfig.extraAction1Text;\n                    }\n                }\n                if (domConfig.extraAction2IconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.extraAction2IconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    action.appendChild(iconEl);\n                }\n                action.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                action.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                action.setAttribute(domConfig.resultDataSourceId, dataSource);\n                action.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventAction2Clicked(event);\n                });\n                buttonBadgeEl.appendChild(action);\n            }\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl: HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length > 0) {\n                        deleteButtonEl.innerHTML = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                buttonBadgeEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name, item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n}\n","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        super(applicationView, htmlDocument, uiConfig, uiPrefs, stateManager);\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n    }\n\n    eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n    }\n\n    eventShow(event: Event | null) {//414,768,1024\n        let size = this.uiPrefs.view.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n        if (sidePanelEl === null) return;\n\n        switch (this.uiPrefs.view.location) {\n            case 'left': {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case 'right': {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case 'bottom': {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case 'top': {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv: HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone: HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv: HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone: HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event: Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event: Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {\n            vLogger('Dragged over');\n            event.preventDefault();\n        });\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {\n            vLogger('Dragged over');\n            event.preventDefault();\n        });\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        const roomName = NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event, roomName);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    deleteFavouriteUser(user: any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user: any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user: any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, user, isSame, true);\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    protected eventAction1Clicked(event: MouseEvent) {\n        super.eventAction1Clicked(event);\n        // add this user to the favourites\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        if (user) {\n            if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                vLogger(`${user.username} already in favourite list, ignoring`);\n                return;\n            }\n            // ok, so we have a new user to add to the favourite list\n            // add the user to the Chat Manager and we should get an event about it\n            ChatManager.getInstance().addUserToFavouriteList(user.username);\n        }\n    }\n\n    protected eventAction2Clicked(event: MouseEvent) {\n        super.eventAction2Clicked(event);\n        // add this user to the blocked list\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        if (user) {\n            if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                vLogger(`${user.username} already in blocked list, ignoring`);\n                return;\n            }\n            // ok, so we have a new user to add to the blocked list\n            // add the user to the Chat Manager and we should get an event about it\n            ChatManager.getInstance().addUserToBlockedList(user.username);\n        }\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users, user, this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users, user, this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {\n                    event.preventDefault();\n                });\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../socket/Types\";\nimport controller from \"../Controller\";\nimport notifier from \"../notification/NotificationManager\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.eventHide = this.eventHide.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    handleUserDrop(event: Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                notifier.show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('', {})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(this.uiConfig.dom.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.chatFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n\n        this.updateView('', {});\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        notifier.show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    public selectChatRoom(room: string) {\n        csLoggerDetail(`Chat Log with id ${room} selected`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // except for the users already in the chat\n            csLoggerDetail(`Updating the fast user search`)\n            csLoggerDetail(newState);\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.chatFastSearchUserNames}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            if (newState) {\n                newState.forEach((item: any) => {\n                    const searchValue = {\n                        label: item.username,\n                        value: item.id,\n                    };\n                    // @ts-ignore\n                    if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n                });\n                fastSearchEl.autocomplete({source: fastSearchValues});\n                fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n            }\n\n        } else {\n            csLoggerDetail(`Updating state with chat manager`);\n            newState = ChatManager.getInstance().getChatLogs();\n            csLoggerDetail(newState);\n            this.createResultsForState(name, newState);\n            this.checkCanComment();\n\n        }\n    }\n\n    getDragData(event: DragEvent) {\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('', {});\n    }\n\n    eventHide(event: Event | null) {\n        super.eventHide(event);\n        // deselect the selected chat\n        if (this.selectedChatLog) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog | null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('', {});\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSameGame} from '../util/EqualityFunctions';\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    private formEl: HTMLElement;\n    // @ts-ignore\n    private queryEl: HTMLInputElement;\n    // @ts-ignore\n    private buttonEl: HTMLButtonElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    public handleSearchResultsCB(data: any, status: number, associatedStateName: string): void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults, data.data.findBoardGames, true);\n        }\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit', this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame: any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSameGame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSameGame, true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    private changeSearchButton(enable: boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        } else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\", \"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event: Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, {queryString: queryText}, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler, startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!controller.isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!controller.isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2 w-100\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-info ml-1'\n                               onClick={showScoresHandler}>Scores: {scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n            const bggURL = `https://boardgamegeek.com/boardgame/${boardGame.gameId}`;\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href={bggURL} target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image}\n                                                              alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? favouriteIcon : ''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? scoreBadge : ''}<br/> {(controller.isLoggedIn()) ? ((boardGame.decorator === Decorator.Persisted) ? deleteButton : addButton) : deleteButton}\n                            </h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                            <p className=\"card-text\">Loading...</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Loading...\n                                </small>\n                            </p>\n                        </div>\n                        <div className={\"card-footer text-right text-muted\"}>\n                            Loading...\n                        </div>\n                    </div>\n                </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport moment from \"moment\";\nimport controller from \"../Controller\";\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetSidebarView extends SidebarView {\n    protected selectedBoardGame: any | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.scoreSheetSideBar, applicationView.state.uiPrefs.scoreSheetSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n\n        this.updateView('', {});\n    }\n\n\n    public setSelectedBoardGame(boardGame: any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.updateView('', boardGame);\n        }\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    /*\n        <h5 class=\"card-title\">Card title</h5>\n    <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n    <p class=\"card-text\">Last updated 3 mins ago</p>\n     */\n    getDisplayValueForStateItem(name: string, item: any) {\n        let buffer = '';\n        /*\n        type ScoreSheet {\n            id:Int!\n            players: [String],\n            scores: [Int],\n            jsonData: String,\n            createdOn: Int\n        }\n        */\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        if (item.players) {\n            for (let index = 0; index < item.players.length; index++) {\n\n            }\n\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    eventClickItem(event: MouseEvent) {\n    }\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with selected board game`);\n        if (newState) {\n            if (newState.scoresheets) {\n                this.createResultsForState(name, newState.scoresheets);\n            }\n        }\n\n    }\n\n    getDragData(event: DragEvent) {\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const sheetId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        csLogger(`Score Sheet ${event.target} with id ${sheetId} delete clicked from ${dataSource}`);\n\n\n        if (this.selectedBoardGame && confirm(\"Are you sure you want to delete this Score Sheet?\")) {\n            // remove the sheet from the selected board game\n            if (this.selectedBoardGame.scoresheets) {\n                let index = this.selectedBoardGame.scoresheets.findIndex((sheet: any) => sheet.id === sheetId);\n                if (index >= 0) {\n                    this.selectedBoardGame.scoresheets.splice(index, 1);\n                    // let the controller know to remove from the database if the user is logged in\n                    controller.scoreSheetRemovedFromBoardGame(this.selectedBoardGame, sheetId);\n                }\n            }\n            this.updateView('', this.selectedBoardGame);\n        }\n\n    }\n\n\n}\n\nexport default ScoreSheetSidebarView;\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSearchSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {ScoreSheetView} from \"./component/ScoreSheetView\";\nimport ScoreSheetSidebarView from \"./component/ScoreSheetSidebarView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener {\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n    // @ts-ignore\n    private scoreSheetView: ScoreSheetView;\n    // @ts-ignore\n    private scoresView: ScoreSheetSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            scoreSheet: {\n                room: '',\n                boardGameName: '',\n                sheetLayoutOptions: {},\n                timer: 0,\n                sheetData: {}\n            },\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults',\n                scoreSheet: 'scoreSheet'\n            },\n            apis: {\n                login: '/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n                bggSearchCallById: {\n                    queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n                    resultName: 'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {findUsers {id, username}}',\n                    resultName: 'findUsers',\n                },\n                addToMyCollection: {\n                    queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n                    resultName: 'addToMyCollection',\n                },\n                removeFromMyCollection: {\n                    queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n                getMyBoardGameCollection: {\n                    queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n                    resultName: 'getMyBoardGameCollection',\n                },\n                addScoreSheetToBoardGame: {\n                    queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n                    resultName: 'addScoreSheetToBoardGame'\n                },\n                removeScoreSheet: {\n                    queryString: 'mutation removeSheet($sheetId: String!) {removeScoreSheet(sheetId: $sheetId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyCollection: 'navigationItemMyCollection',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat',\n                    showScoreSheet: 'navigationItemScoreSheet',\n\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle bg-warning btn-sm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses: 'text-black fas fa-sign-out-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary mr-1',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat',\n                        chatFastSearchUserNames: 'chatFastSearchUserNames'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses: 'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                        extraAction1Classes: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                        extraAction1Text: '',\n                        extraAction1IconClasses: 'fas fa-user-plus',\n                        extraAction2Classes: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                        extraAction2Text: '',\n                        extraAction2IconClasses: 'fas fa-user-slash'\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n                scoreSheetSideBar: {\n                    dom: {\n                        sideBarId: 'scoreSheetSidebar',\n                        resultsId: 'scoreSheets',\n                        resultsElementType: 'div',\n                        resultsElementAttributes: [],\n                        resultsClasses: 'text-white bg-info col-sm-6 col-md-3 col-lg-2 score-card',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'scoreSheet',\n                        modifierClassNormal: '',\n                        modifierClassInactive: '',\n                        modifierClassActive: '',\n                        modifierClassWarning: '',\n                        iconNormal: ' ',\n                        iconInactive: ' ',\n                        iconActive: ' ',\n                        iconWarning: ' ',\n                        isDraggable: false,\n                        isClickable: false,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-rounded btn-warning ml-6 mt-4',\n                        deleteButtonText: 'Delete&nbsp;',\n                        deleteButtonIconClasses: 'fas fa-trash-alt',\n                        resultContentDivClasses: 'card-img-overlay',\n                        resultContentTextElementType: 'div',\n                        resultContentTextClasses: 'ml-2',\n                        hasBackgroundImage: true,\n                        imgElementType: 'img',\n                        imgClasses: 'score-card-img',\n                    },\n                },\n                scoreSheet: {\n                    dom: {\n                        dropZone: \"scoreSheetZone\",\n                        boardGame: \"selectedBoardGame\",\n                        startStopTimer: \"startStopTimer\",\n                        timer: \"timerDisplay\",\n                        end: \"leaveScoreSheet\",\n                        scoreSheet: \"scoreSheet\",\n                        iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n                        iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n                        iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n                        iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n                        ssFastSearchUserNames: 'ssFastSearchUserNames',\n                        webrtc: 'webrtc'\n\n                    }\n                }\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                scoreSheetSideBar: {\n                    view: {\n                        location: 'bottom',\n                        expandedSize: '30%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    public addBoardGameToDisplay(draggedObject: any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title: string, content: string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames: any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index: number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            controller.removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event: MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            } else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n    handleDeleteBoardGame(event: MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (controller.isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(this.state.controller.events.boardGames.eventDataKeyId, id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    } else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        controller.removeBoardGameFromDisplay(boardGame);\n\n                    }\n                } else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this, document, controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this, document, controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this, document, controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        this.scoresView = new ScoreSheetSidebarView(this, document, controller.getStateManager());\n        this.scoresView.onDocumentLoaded();\n\n\n        this.scoreSheetView = ScoreSheetView.getInstance();\n        this.scoreSheetView.setApplication(this);\n        this.scoreSheetView.onDocumentLoaded(this);\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(this.state.ui.navigation.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click', this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click', this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click', this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    handleShowCollection(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowScores(event: Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoresView.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(event: Event, roomName: string | null) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event: Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    private handleDragOver(event: DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event: Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection: boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', false);\n        } else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts template-manager' ;\nlocalStorage.debug = 'score-sheet-controller call-manager peer';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n"],"sourceRoot":""}