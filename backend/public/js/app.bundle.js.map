{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BlogEntryView.tsx","webpack:///./src/component/CommentSidebarView.ts","webpack:///./src/component/DetailsSidebarView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","entries","selectedEntry","applyUserFilter","stateNames","users","comments","apis","entry","login","ui","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyEntriesId","addNewEntryId","showAllEntriesId","blogEntry","entryDetailsSideBar","dom","sideBarId","formId","changedOnId","resultDataKeyId","isDraggable","isClickable","commentSideBar","headerId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultLegacyDataKeyId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","newFormId","commentId","submitCommentId","uiPrefs","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleShowMyEntries","handleSelectEntryComments","handleShowEditEntry","handleUpdateEntry","handleAddEntry","handleAddComment","handleDeleteEntry","handleDeleteComment","connectToApplication","window","localStorage","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","entriesToDisplay","filter","createdBy","blog","map","index","event","preventDefault","entryId","getAttribute","parseInt","getStateManager","findItemInState","id","isSame","deleteEntry","removeItemFromState","componentDidMount","commentView","CommentSidebarView","document","onDocumentLoaded","detailsView","DetailsSidebarView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","initialise","hideAllSideBars","eventHide","href","setState","handleAllEntries","creator","changedOn","moment","format","Comments","User","username","setStateByName","eventShow","getStateByName","length","commentEl","value","trim","comment","commentOn","addComment","target","setAttribute","deleteComment","updateEntry","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","BrowserStorageStateManager","socketListerDelegate","socketManager","getServerAPIURL","result","handleMessage","composeBlogEntry","user","allComments","composeAllBlogEntries","stateChangedItemAdded","updatedEntry","itemAdded","stateChangedItemRemoved","itemRemoved","stateChangedItemUpdated","stateChanged","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","stateObj","changedEntry","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventStartDrag","data","JSON","createResultsForState","domConfig","viewEl","browserUtil","newState","childEl","displayText","modifier","secondModifier","item","beLogger","BlogEntryView","showCommentsHandler","editEntryHandler","deleteEntryHandler","editButton","deleteButton","width","viewLogger","htmlDocument","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","createdOn","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","parentEl","updateView","getDragData","SidebarView","stateManager","sidePanelEl","closeButtonEl","showHide","apiLogger","ApiUtil","fetchJSON","fetch","response","callback","apiFetchJSONWithPost","request","postParameters","method","headers","body","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addApiRequest","isPriority","requestId","uuid","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","RequestType","downloader","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","sDebug","SocketManager","callbackForMessage","callbackForData","dataObj","setListener","io","sendMessage","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","name","stateObjForName","stateValueObj","informListeners","addNewItemToState","isPersisted","testForEqualityFunction","isItemInState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","getInstance","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","valueIndex","msManager","apiSMLogger","configuration","getConfiguredStateNames","results","config","hasCompletedRun","setCompletedRun","forceResetForGet","runsComplete","status","jsonRequest","url","type","params","associatedStateName","Error","StateChangedDelegate","suppressEventEmits","changeListenersForName","listener","ensureListenerSetupForName","listenersNameArrayPair","listeners","BrowserUtil","scrollSmoothToId","block","behavior","scrollSmoothTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","item1","item2","UUID","getUniqueId","r","Math","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvnSA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAEA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,aAAO,EAAE,EAHA;AAITC,mBAAa,EAAE,EAJN;AAKTC,qBAAe,EAAC,KALP;AAMTC,gBAAU,EAAE;AACRC,aAAK,EAAE,OADC;AAERJ,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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\nimport moment from 'moment';\n\nimport controller from './Controller';\nimport CommentSidebarView from \"./component/CommentSidebarView\";\nimport BlogEntryView from \"./component/BlogEntryView\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport DetailsSidebarView from \"./component/DetailsSidebarView\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            entries: [],\n            selectedEntry: {},\n            applyUserFilter:false,\n            stateNames: {\n                users: 'users',\n                entries: 'entries',\n                comments: 'comments',\n                selectedEntry: 'selectedEntry',\n            },\n            apis: {\n                users: '/users',\n                entries: '/blog',\n                entry: '/blog',\n                comments: '/comment',\n                login: '/login',\n            },\n            ui: {\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyEntriesId: 'navigationItemDashboard',\n                    addNewEntryId: 'navigationItemAddNewEntry',\n                    showAllEntriesId: 'navigationItemShowAll'\n                },\n                blogEntry: {},\n                entryDetailsSideBar: {\n                    dom: {\n                        sideBarId: 'detailsSideBar',\n                        formId: 'details',\n                        titleId: 'title',\n                        contentId: 'content',\n                        changedOnId: 'changedOn',\n                        resultDataKeyId: 'id',\n                        isDraggable: false,\n                        isClickable: true,\n                    },\n                },\n                commentSideBar: {\n                    dom: {\n                        sideBarId: 'commentSideBar',\n                        headerId: 'commentHeader',\n                        resultsId: 'comments',\n                        resultsElementType: 'button',\n                        resultsElementAttributes: [\n                            ['type', 'button'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'id',\n                        resultLegacyDataKeyId: 'id',\n                        modifierClassNormal: 'float-right list-group-item-primary text-right',\n                        modifierClassInactive: 'float-left list-group-item-dark text-left',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: 'list-group-item-warning',\n                        iconNormal: '<i class=\"fas fa-trash-alt\"></i>',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        newFormId: \"newComment\",\n                        commentId: \"comment\",\n                        submitCommentId: \"submitComment\",\n                    },\n                },\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                commentSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                entryDetailsSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                }\n            },\n            controller: {\n                events: {\n                    entry: {\n                        eventDataKeyId: 'entry-id',\n                    },\n                },\n                dataLimit: {\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n        this.handleShowMyEntries = this.handleShowMyEntries.bind(this);\n        this.handleSelectEntryComments = this.handleSelectEntryComments.bind(this);\n        this.handleShowEditEntry = this.handleShowEditEntry.bind(this);\n        this.handleUpdateEntry = this.handleUpdateEntry.bind(this);\n        this.handleAddEntry = this.handleAddEntry.bind(this);\n        this.handleAddComment = this.handleAddComment.bind(this);\n        this.handleDeleteEntry = this.handleDeleteEntry.bind(this);\n        this.handleDeleteComment = this.handleDeleteComment.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        logger(this.state.entries);\n        // @ts-ignore\n        logger(`User filter ${this.state.applyUserFilter}`);\n\n        // @ts-ignore\n        let entriesToDisplay = this.state.entries;\n        // @ts-ignore\n        if (this.state.applyUserFilter && controller.isLoggedIn() && (controller.getLoggedInUserId() > 0)) {\n            logger(`fitlering entries`);\n            entriesToDisplay = entriesToDisplay.filter((entry:any) => {\n                return (entry.createdBy === controller.getLoggedInUserId());\n            });\n        }\n        const blog = entriesToDisplay.map((entry:any, index:number) =>\n            <BlogEntryView\n                key={index}\n                entry={entry}\n                showCommentsHandler={this.handleSelectEntryComments}\n                editEntryHandler={this.handleShowEditEntry}\n                deleteEntryHandler={this.handleDeleteEntry}\n            />\n        );\n        return (\n            <div className=\"Root row ml-1\">\n                {blog}\n            </div>\n        );\n    }\n\n    cancelDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:Event) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let entryId = this.modalEl.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            if (entry) {\n                // delete the entry using the controller and remove the state manager\n                controller.deleteEntry(entry);\n                // @ts-ignore\n                controller.getStateManager().removeItemFromState(this.state.stateNames.entries,entry,isSame);\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n        // add the additional views and configure them\n        this.commentView = new CommentSidebarView(this, document,controller.getStateManager());\n        this.commentView.onDocumentLoaded(); // reset the view state\n\n        this.detailsView = new DetailsSidebarView(this,document,controller.getStateManager());\n        this.detailsView.onDocumentLoaded();\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.addNewEntryId).addEventListener('click', this.handleAddEntry);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyEntriesId).addEventListener('click', this.handleShowMyEntries);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // ok lets try get things done\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.commentView.eventHide(null);\n        this.detailsView.eventHide(null);\n    }\n\n    handleShowMyEntries(event:Event) {\n        logger('Handling Show My Entries');\n        this.hideAllSideBars();\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.setState({applyUserFilter:true});\n    }\n\n    handleAllEntries(event:Event) {\n        logger('Handling Show All Entries');\n        this.setState({applyUserFilter:false});\n        this.hideAllSideBars();\n    }\n\n    handleAddEntry(event:Event) {\n        logger('Handling Add Entry');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n             isSame);\n        logger(creator);\n        // create an empty entry\n        let entry = {\n            title: '',\n            content: '',\n            createdBy: creator.id,\n            changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n            Comments: [],\n            User: {\n                id: creator.id,\n                username: creator.username\n            }\n        }\n        logger(entry);\n        this.setState({selectedEntry:entry});\n        // @ts-ignore\n        controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n        this.detailsView.eventShow(event);\n    }\n\n    handleAddComment(event:Event) {\n        logger('Handling Add Comment');\n        event.preventDefault();\n        logger('entry comments');\n        // @ts-ignore\n        let entry = controller.getStateManager().getStateByName(this.state.stateNames.selectedEntry);\n        logger(entry.comments.length);\n\n        // get the comment element\n        // @ts-ignore\n        let commentEl:HTMLInputElement = document.getElementById(this.state.ui.commentSideBar.dom.commentId);\n        if (commentEl && commentEl.value.trim().length === 0) return;\n\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        // find the current user\n        // @ts-ignore\n        let creator = controller.getStateManager().findItemInState(this.state.stateNames.users,\n            {id: controller.getLoggedInUserId()},\n                  isSame);\n        logger('user');\n        logger(creator);\n        // find the selected entry\n        if (entry && commentEl) {\n            // create an empty comment\n            // @ts-ignore\n\n            let comment = {\n                createdBy: creator.id,\n                commentOn: entry.id,\n                changedOn: parseInt(moment().format('YYYYMMDDHHmmss')),\n                content: commentEl.value.trim()\n            }\n            commentEl.value = '';\n            logger('comment');\n            logger(comment);\n            controller.addComment(comment);\n\n        }\n    }\n\n    handleSelectEntryComments(event:MouseEvent) {\n        logger('Handling Select Entry Comments');\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.commentView.eventShow(event);\n            }\n        }\n    }\n\n    handleShowEditEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Show Edit Entry ${entryId}`);\n        if (entryId) {\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            logger(entry);\n            if (entry) {\n                // select the entry and open the details sidebar\n                this.setState({selectedEntry:entry});\n                // @ts-ignore\n                controller.getStateManager().setStateByName(this.state.stateNames.selectedEntry,entry);\n                this.detailsView.eventShow(event);\n            }\n        }\n    }\n\n    handleDeleteEntry(event:Event) {\n        event.preventDefault();\n        this.hideAllSideBars();\n        // @ts-ignore\n        let entryId = event.target.getAttribute(this.state.controller.events.entry.eventDataKeyId);\n        logger(`Handling Delete Entry ${entryId}`);\n        if (entryId) {\n            // @ts-ignore\n            this.modalEl.setAttribute(this.state.controller.events.entry.eventDataKeyId,entryId);\n            // find the entry from the state manager\n            entryId = parseInt(entryId);\n            // @ts-ignore\n            const entry = controller.getStateManager().findItemInState(this.state.stateNames.entries,{id:entryId},isSame);\n            this.alert(entry.title,\"Are you sure you want to delete this blog entry?\")\n        }\n    }\n\n    handleDeleteComment(id:number):void {\n        controller.deleteComment(id);\n    }\n\n    // @ts-ignore\n    handleUpdateEntry(entry:any) {\n        this.hideAllSideBars();\n        controller.updateEntry(entry);\n    }\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\nlocalStorage.debug = 'app controller-ts socket-ts api-ts state-manager-aggregate state-manager-api state-manager-aggregate state-manager-async socket-listener';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport IndexedDBStateManager from \"./state/IndexedDBStateManager\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.users,\n                isActive:true\n            },\n            {\n                stateName: this.config.stateNames.entries,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive:true\n            },\n            {\n                stateName: this.config.stateNames.comments,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive:true\n            }\n        ]);\n\n        // let indexedDBSM = IndexedDBStateManager.getInstance();\n        // indexedDBSM.initialise([\n        //     {\n        //         name:this.config.stateNames.users,\n        //         keyField:\"id\"\n        //     },\n        //     {\n        //         name:this.config.stateNames.entries,\n        //         keyField:\"id\"\n        //     },\n        //     {\n        //         name:this.config.stateNames.comments,\n        //         keyField:\"id\"\n        //     }\n        // ]);\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM,apiStateManager);\n\n        aggregateSM.addStateManager(memorySM,[],false);\n        aggregateSM.addStateManager(BrowserStorageStateManager.getInstance(),[],false);\n        //aggregateSM.addStateManager(indexedDBSM,[this.config.stateNames.selectedEntry],false );\n        aggregateSM.addStateManager(asyncSM,[this.config.stateNames.selectedEntry],false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.entries, this);\n        this.getStateManager().addChangeListenerForName(this.config.stateNames.comments, this);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise():void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // load the entries\n        this.getStateManager().getStateByName(this.config.stateNames.entries);\n        // load the users\n        this.getStateManager().getStateByName(this.config.stateNames.users);\n        // load the comments\n        this.getStateManager().getStateByName(this.config.stateNames.comments);\n    }\n    \n    public getStateManager():StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL():string {\n        let result = \"/api\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn():boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId():number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n\n\n    // Lets delete a comment\n    deleteComment(id:number) {\n        let entry = this.getStateManager().getStateByName(this.config.stateNames.selectedEntry);\n        if (entry) {\n            cLogger(`Handling delete comment for ${entry.id} and comment ${id}`);\n            this.getStateManager().removeItemFromState(this.config.stateNames.comments,{id:id},isSame,false)\n            // send the api call\n            //this.asyncSM.removeItemFromState(this.config.stateNames.comments,{id:id},isSame);\n        }\n    }\n\n    public deleteEntry(entry:any):void {\n        if (entry) {\n            cLogger(`Handling delete entry for ${entry.id}`);\n            // update the state manager\n            this.getStateManager().removeItemFromState(this.config.stateNames.entries, entry, isSame,false);\n            // send the api call\n            //this.asyncSM.removeItemFromState(this.config.stateNames.entries,{id:entry.id},isSame);\n        }\n    }\n\n    public updateEntry(entry:any):void {\n        if (entry) {\n            cLogger(entry);\n            if (entry.id) {\n                cLogger(`Handling update for entry ${entry.id}`);\n                // update the state manager\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame,false);\n                this.getStateManager().updateItemInState(this.config.stateNames.entries, entry, isSame,false);\n                // send the api call\n                //this.asyncSM.updateItemInState(this.config.stateNames.entries,entry,isSame);\n\n            } else {\n                cLogger(`Handling create for entry`);\n                // send the api call and let the completed entry with id come back asynchronously\n                this.getStateManager().addNewItemToState(this.config.stateNames.entries, entry, false);\n                //this.asyncSM.addNewItemToState(this.config.stateNames.entries,entry, false);\n            }\n        }\n    }\n\n    public addComment(comment:any):void  {\n        if (comment) {\n            cLogger(comment);\n            cLogger(`Handling create for comment`);\n            // send the api call and let the completed entry with id come back asynchronously\n            this.getStateManager().addNewItemToState(this.config.stateNames.comments,comment, false);\n            //this.asyncSM.addNewItemToState(this.config.stateNames.comments,comment, false);\n        }\n    }\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message:string):void {\n        cLogger(message);\n    }\n\n    public getCurrentUser():number{\n        return this.getLoggedInUserId();\n    }\n\n    /* Compositing Blod Entries from the state functions */\n    private composeBlogEntry(entry:any) {\n        if (!entry) return;\n        // find the user for the entry\n        let user:any = controller.getStateManager().findItemInState(this.config.stateNames.users,{id:entry.createdBy},isSame);\n        if (!user) user = { id:-1, username:'unknown'};\n\n        const allComments:any[] = controller.getStateManager().getStateByName(this.config.stateNames.comments);\n        // get the comments for the entry\n        let comments = allComments.filter((comment:any) => comment.commentOn === entry.id);\n        if (!comments) comments = [];\n\n        entry.user = user;\n        entry.comments = comments;\n    }\n\n    private composeAllBlogEntries() {\n        let entries = this.getStateManager().getStateByName(this.config.stateNames.entries);\n        entries.forEach((entry:any) => {\n            this.composeBlogEntry(entry);\n        });\n    }\n\n\n\n    //  State Management listening\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeBlogEntry(itemAdded);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        let updatedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries,{id:itemAdded.commentOn},isSame);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n                        cLogger(updatedEntry);\n                        this.composeBlogEntry(updatedEntry);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n                        cLogger(updatedEntry);\n                        this.composeBlogEntry(selectedEntry);\n                        cLogger(`updating comments for entry ${updatedEntry.id} = ${updatedEntry.comments.length}`);\n\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry,selectedEntry,true);\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        if (selectedEntry) {\n                            if (isSame(selectedEntry,itemRemoved)) {\n                                selectedEntry = {};\n                                this.applicationView.hideAllSideBars();\n                            }\n                        }\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry,selectedEntry,true);\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        let updatedEntry = this.getStateManager().findItemInState(this.config.stateNames.entries,{id:itemRemoved.commentOn},isSame);\n                        this.composeBlogEntry(updatedEntry);\n                        this.composeBlogEntry(selectedEntry);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        this.getStateManager().setStateByName(this.config.stateNames.selectedEntry,selectedEntry,true);\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                let selectedEntry = this.applicationView.state.selectedEntry;\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeBlogEntry(itemNewValue);\n                        this.composeBlogEntry(selectedEntry);\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: selectedEntry,\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName:string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        this.composeAllBlogEntries();\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        this.composeAllBlogEntries();\n                        cLogger(this.getStateManager().getStateByName(this.config.stateNames.entries));\n                        this.applicationView.setState({\n                            isLoggedIn: this.isLoggedIn(),\n                            loggedInUserId: this.getLoggedInUserId(),\n                            selectedEntry: {},\n                            entries: this.getStateManager().getStateByName(this.config.stateNames.entries)\n                        });\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n  protected applicationView:any;\n  protected document:HTMLDocument;\n  protected uiConfig:any;\n  protected uiPrefs:any;\n\n  protected config: any;\n\n  protected stateManager: StateManager;\n\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    this.applicationView = applicationView;\n    this.document = document;\n    this.uiConfig = uiConfig;\n    this.uiPrefs = uiPrefs;\n    this.config = applicationView.state;\n    this.stateManager = stateManager;\n\n    // state change listening\n    this.stateChanged = this.stateChanged.bind(this);\n\n    // event handlers\n    this.eventStartDrag = this.eventStartDrag.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n  }\n\n  public abstract onDocumentLoaded():void;\n\n\n  /* abstract */\n  protected abstract eventClickItem(event:MouseEvent):void;\n\n  protected abstract getDragData(event:DragEvent):any;\n\n  protected abstract getIdForStateItem(name:string, item:any):string;\n  protected abstract getLegacyIdForStateItem(name:string, item:any):string;\n  protected abstract getDisplayValueForStateItem(name:string, item:any):string;\n  protected abstract getModifierForStateItem(name:string, item:any):string;\n  protected abstract getSecondaryModifierForStateItem(name:string, item:any):string;\n  protected abstract updateView(name:string, newState:any):void;\n\n\n  protected eventStartDrag(event:DragEvent) {\n    avLogger('Abstract View : drag start', 10);\n    const data = JSON.stringify(this.getDragData(event));\n    avLogger(data, 10);\n    // @ts-ignore\n    event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n  }\n\n\n\n  protected createResultsForState(name:string, newState:any):void {\n    avLogger('Abstract View : creating Results', 10);\n    avLogger(newState);\n    const domConfig = this.uiConfig.dom;\n    // remove the previous items from list\n    const viewEl = document.getElementById(domConfig.resultsId);\n    if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n    // add the new children\n    newState.map((item:any, index:number) => {\n\n      const childEl = this.document.createElement(domConfig.resultsElementType);\n      browserUtil.addRemoveClasses(childEl,domConfig.resultsClasses);\n\n      // add the key ids for selection\n      childEl.setAttribute(domConfig.resultDataKeyId, this.getIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultLegacyDataKeyId, this.getLegacyIdForStateItem(name, item));\n      childEl.setAttribute(domConfig.resultDataSourceId, domConfig.resultDataSourceValue);\n      const displayText = this.getDisplayValueForStateItem(name, item);\n      // add modifiers for patient state\n      const modifier = this.getModifierForStateItem(name, item);\n      const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n      switch (modifier) {\n        case 'normal': {\n          avLogger('Abstract View: normal item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal);\n          if (domConfig.iconNormal !== '') {\n            childEl.innerHTML = displayText + domConfig.iconNormal;\n          } else {\n            childEl.innerText = displayText;\n          }\n\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n\n          break;\n        }\n        case 'active': {\n          avLogger('Abstract View: active item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassActive);\n          if (domConfig.iconActive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconActive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassNormal,false);\n              browserUtil.addRemoveClasses(childEl,domConfig.modifierClassWarning,true);\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n        case 'inactive': {\n          avLogger('Abstract View: inactive item', 10);\n          browserUtil.addRemoveClasses(childEl,domConfig.modifierClassInactive);\n          if (domConfig.iconInactive !== '') {\n            childEl.innerHTML = displayText + domConfig.iconInactive;\n          } else {\n            childEl.innerText = displayText;\n          }\n          switch (secondModifier) {\n            case 'warning': {\n              if (domConfig.iconWarning !== '') {\n                childEl.innerHTML += domConfig.iconWarning;\n              }\n              break;\n            }\n            case 'normal': {}\n          }\n          break;\n        }\n      }\n      // add draggable actions\n      if (domConfig.isDraggable) {\n        childEl.setAttribute('draggable', 'true');\n        childEl.addEventListener('dragstart', this.eventStartDrag);\n      }\n      // add selection actions\n      if (domConfig.isClickable) {\n        childEl.addEventListener('click', this.eventClickItem);\n      }\n      avLogger(`Abstract View: Adding child ${item.id}`);\n      if (viewEl) viewEl.appendChild(childEl);\n    });\n  }\n\n  public stateChanged(managerName:string, name: string, newValue: any): void {\n    this.updateView(name, newValue);\n  }\n\n  stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n  stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {\n    this.updateView(name, this.stateManager.getStateByName(name));\n  }\n\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\n\nconst beLogger = debug('view-ts:blogentry');\n\n\n// @ts-ignore\nexport default function BlogEntryView({entry, showCommentsHandler, editEntryHandler, deleteEntryHandler}) {\n    if (entry) {\n        beLogger(`Entry ${entry.createdBy} === ${controller.getLoggedInUserId()}`);\n\n        let editButton;\n        let deleteButton;\n        if (entry.user.id === controller.getLoggedInUserId()) {\n            editButton =\n                <button type=\"button\"\n                        className=\"btn-primary btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={editEntryHandler}>\n                    &nbsp;&nbsp;Edit &nbsp;\n                    <i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n                </button>\n            deleteButton =\n                <button type=\"button\"\n                        className=\"btn-warning btn-sm rounded p-1 mr-2\"\n                        entry-id={entry.id} onClick={deleteEntryHandler}>\n                    &nbsp;&nbsp;Delete &nbsp;\n                    <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n                </button>\n        } else {\n            editButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2 \"\n                                 disabled>&nbsp;&nbsp;Edit &nbsp;<i className=\"fas fa-edit\"></i>&nbsp;&nbsp;\n            </button>\n            deleteButton = <button type=\"button\" className=\"btn-outline-secondary btn-sm rounded p-1 mr-2\"\n                                   disabled>&nbsp;&nbsp;Delete &nbsp;\n                <i className=\"fas fa-trash-alt\"></i>&nbsp;&nbsp;\n            </button>\n        }\n\n\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className={\"card\"} style={{width: \"350px\"}}>\n                    <div className={\"card-header\"}>\n                        {entry.title}&nbsp;&nbsp;&nbsp;&nbsp;<a className=\"text-decoration-none\">\n                        <i className=\"fas fa-comments text-secondary\" entry-id={entry.id}\n                           onClick={showCommentsHandler}></i>&nbsp;&nbsp;\n                        <span className=\"badge badge-pill badge-primary text-right\" entry-id={entry.id}\n                              onClick={showCommentsHandler}>&nbsp;{entry.comments.length}&nbsp;</span></a>\n                    </div>\n                    <div className={\"card-body\"}>\n                        <p className={\"card-text\"}>{entry.content}</p>\n                        {editButton}\n                        {deleteButton}\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        {entry.user.username} on {moment(entry.changedOn, 'YYYYMMDDHHmmss').format('DD/MM/YYYY')}\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return (<div></div>);\n    }\n}\n\n\n","import debug from 'debug';\nimport moment from 'moment';\n\nimport controller from \"../Controller\";\nimport {isSame} from '../util/EqualityFunctions';\n\nimport SidebarView from './SidebarView';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst viewLogger = debug('view-ts:comments');\n\nclass CommentSidebarView extends SidebarView implements StateChangeListener{\n    protected commentHeaderEl:HTMLElement|null;\n    protected newCommentFormEl:HTMLElement|null;\n    protected newCommentTextEl:HTMLElement|null;\n    protected newCommentSubmitEl:HTMLElement|null;\n\n\n    constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.commentSideBar, applicationView.state.uiPrefs.commentSideBar,stateManager);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n\n        // elements\n        this.commentHeaderEl = htmlDocument.getElementById(this.uiConfig.dom.headerId);\n        this.newCommentFormEl = htmlDocument.getElementById(this.uiConfig.dom.newFormId);\n        if (this.newCommentFormEl) this.newCommentFormEl.addEventListener('submit', this.applicationView.handleAddComment);\n        this.newCommentTextEl = htmlDocument.getElementById(this.uiConfig.dom.commentId);\n        this.newCommentSubmitEl = htmlDocument.getElementById(this.uiConfig.dom.submitCommentId);\n\n        // register state change listening\n        this.stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n    }\n\n    getIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name:string, item:any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name:string, item:any) {\n        viewLogger(`Getting display value for comment ${item.id} with content ${item.content}`)\n        // find the user for the item from the createdBy attribute\n        const createdBy = this.stateManager.findItemInState(this.config.stateNames.users, {id: item.createdBy}, isSame);\n        const createdOn = moment(item.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm');\n        return `${item.content} - ${createdBy.username} on ${createdOn}  `;\n    }\n\n    getModifierForStateItem(name:string, item:any) {\n        let result = 'inactive'\n        if (item.createdBy === controller.getLoggedInUserId()) {\n            result = 'normal';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name:string, item:any) {\n        return 'normal';\n    }\n\n    eventClickItem(event:MouseEvent) {\n        event.preventDefault();\n        let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n\n        viewLogger(event.target);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        if (!id) {\n            //get the id from the containing element\n            // @ts-ignore\n            let parentEl = event.target.parentNode;\n            id = parentEl.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        }\n        // @ts-ignore\n        viewLogger(`Comment ${event.target.innerText} with id ${id} clicked`, 20);\n        if (id) {\n            id = parseInt(id);\n            // find the comment in the selected entry\n            let comment = entry.comments.find((comment:any) => comment.id === id);\n            if (comment) {\n                viewLogger(`Comment created by ${comment.createdBy} and current user is ${controller.getLoggedInUserId()}`);\n                // only able to delete if the comment was created by the current user\n                if (comment.createdBy === controller.getLoggedInUserId()) {\n                    this.applicationView.handleDeleteComment(parseInt(id));\n                }\n            }\n        }\n    }\n\n\n    updateView(name:string, newState:any) {\n        viewLogger('Updating view');\n        viewLogger(newState);\n        if (controller.isLoggedIn()) {\n            if (this.newCommentTextEl) this.newCommentTextEl.removeAttribute(\"readonly\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.removeAttribute(\"disabled\");\n        } else {\n            if (this.newCommentTextEl) this.newCommentTextEl.setAttribute(\"readonly\", \"true\");\n            if (this.newCommentSubmitEl) this.newCommentSubmitEl.setAttribute(\"disabled\", \"true\");\n        }\n\n        if (newState && newState.comments) {\n            if (this.commentHeaderEl) this.commentHeaderEl.innerHTML = newState.title;\n            viewLogger(newState.comments);\n            this.createResultsForState(name, newState.comments);\n        }\n    }\n\n    getDragData(event:DragEvent) {}\n\n}\n\nexport default CommentSidebarView;\n","import moment from 'moment';\nimport debug from 'debug';\n\nimport SidebarView from './SidebarView';\nimport {StateManager} from \"../state/StateManager\";\n\nconst viewLogger = debug('view-ts:details');\n\nclass DetailsSidebarView extends SidebarView{\n  protected formEl:HTMLElement|null;\n  protected titleEl:HTMLInputElement|null;\n  protected contentEl:HTMLTextAreaElement|null;\n  protected changeOnEl:HTMLLabelElement|null;\n\n  constructor(applicationView:any, htmlDocument:HTMLDocument,stateManager:StateManager) {\n    super(applicationView, htmlDocument, applicationView.state.ui.entryDetailsSideBar, applicationView.state.uiPrefs.entryDetailsSideBar,stateManager);\n\n    // handler binding\n    this.updateView = this.updateView.bind(this);\n    this.eventClickItem = this.eventClickItem.bind(this);\n\n    // field and form elements\n    this.formEl = document.getElementById(this.uiConfig.dom.formId);\n    this.titleEl = <HTMLInputElement>document.getElementById(this.uiConfig.dom.titleId);\n    this.contentEl = <HTMLTextAreaElement>document.getElementById(this.uiConfig.dom.contentId);\n    this.changeOnEl = <HTMLLabelElement>document.getElementById(this.uiConfig.dom.changedOnId);\n\n    // register state change listening\n    stateManager.addChangeListenerForName(this.config.stateNames.selectedEntry, this);\n\n    // listen for form submissions\n    if (this.formEl) { // @ts-ignore\n      this.formEl.addEventListener('submit',this.eventClickItem);\n    }\n  }\n\n  getIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  getLegacyIdForStateItem(name:string, item:any) {\n    return item.id;\n  }\n\n  eventClickItem(event:MouseEvent) {\n    event.preventDefault();\n    viewLogger('Handling submit Details Sidebar View');\n    viewLogger(event.target);\n    let entry = this.stateManager.getStateByName(this.config.stateNames.selectedEntry);\n    viewLogger(entry);\n    entry.title = (this.titleEl)?this.titleEl.value.trim():'';\n    entry.content = (this.contentEl)?this.contentEl.value.trim():'';\n    entry.changedOn = parseInt(moment().format('YYYYMMDDHHmmss'));\n    viewLogger(entry);\n    if (this.titleEl) this.titleEl.value = '';\n    if (this.contentEl) this.contentEl.value = '';\n    if (this.changeOnEl) this.changeOnEl.innerText = 'Last Changed On:';\n    this.applicationView.handleUpdateEntry(entry);\n  }\n\n\n  updateView(name:string, newState:any) {\n    viewLogger('Handling update of Details Sidebar View');\n    viewLogger(newState);\n    let entry = newState;\n    if (entry && entry.title) {\n      if (this.titleEl) this.titleEl.value = entry.title;\n      if (this.contentEl) this.contentEl.value = entry.content;\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \" + moment(entry.changedOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n    }\n    else {\n      if (this.titleEl) this.titleEl.value = '';\n      if (this.contentEl) this.contentEl.value = '';\n      if (this.changeOnEl) this.changeOnEl.innerText = \"Last Changed On: \";\n    }\n  }\n\n  protected getDisplayValueForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getDragData(event: DragEvent): any {\n  }\n\n  protected getModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n  protected getSecondaryModifierForStateItem(name: string, item: any): string {\n    return \"\";\n  }\n\n}\n\nexport default DetailsSidebarView;\n","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {\n    this.showHide(this.uiPrefs.view.expandedSize);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        // else {\n        //     callback(null, response.status,queueId, requestId);\n        //     throw new Error(\"no results\");\n        // }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n    }\n\n    private callbackForMessage(message:any):void {\n        sDebug(`Received message : ${message}`);\n        if (this.listener) this.listener.handleMessage(message);\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData)\n    }\n\n    public sendMessage(message:string):void {\n        this.socket.emit('message',message);\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager {\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  protected constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  protected constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}