{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/handsontable/node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/AppTypes.ts","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BoardGameSearchSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/ScoreSheetController.ts","webpack:///./src/component/ScoreSheetView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/socket/Types.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","boardGames","scoreSheet","room","boardGameName","sheetLayoutOptions","timer","sheetData","stateNames","users","scores","selectedEntry","recentUserSearches","bggSearchResults","apis","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","addToMyCollection","removeFromMyCollection","getMyBoardGameCollection","addScoreSheetToBoardGame","ui","draggable","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","chatSideBar","dom","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultDataKeyId","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","extra","fastSearchInputId","boardGameSearchSideBar","formId","queryId","buttonId","scoreSheetSideBar","hasBackgroundImage","imgElementType","imgClasses","dropZone","boardGame","startStopTimer","end","iconStart","iconInProgress","iconEnd","iconLeave","uiPrefs","blogEntry","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","connectToApplication","window","localStorage","event","preventDefault","draggedObjectJSON","dataTransfer","getData","draggedObject","JSON","parse","addBoardGameToDisplay","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","games","map","entry","index","addBoardGameToCollection","id","getAttribute","parseInt","currentBoardGamesOnDisplay","findIndex","game","gameId","removeBoardGameFromCollection","ScoreSheetController","getInstance","hasActiveScoreSheet","confirm","endScoreSheet","hideAllSideBars","target","startScoreSheet","switchBetweenCollectionAndScoreSheet","decorator","Decorator","Persisted","setAttribute","name","year","removeBoardGameFromDisplay","componentDidMount","chatView","ChatSidebarView","document","getStateManager","onDocumentLoaded","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","scoreSheetView","ScoreSheetView","getElementById","addEventListener","cancelBtnEl","confirmBtnEl","closeBtnEl","thisEl","scoreSheetEl","initialise","eventHide","showCollection","browserUtil","addRemoveClasses","href","eventShow","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","graphSM","apiURL","find","create","destroy","update","findAll","data","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncDBSM","asyncQLSM","socketListerDelegate","socketManager","chatManager","ChatManager","NotificationController","downloadAndSyncSavedBoardGameCollection","downloader","userId","getServerAPIURL","result","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","currentListOfGames","value","callbackBoardGameDetails","status","boardGameDetails","regex","removeBoardGameFromState","findBoardGameInStateFromEvent","callbackAddToCollection","currentGameList","updatingBoardGame","callbackRemoveFromCollection","callbackGetCollection","collectionData","boardGameId","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","changedEntry","commentOn","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventStartDrag","createResultForItem","dataSource","domConfig","legacyDataKeyId","childEl","textEl","imgEl","badgeValue","badgeEl","deleteButtonEl","iconEl","displayText","modifier","secondModifier","createResultsForState","viewEl","newState","item","vLogger","vLoggerDetail","changeSearchButton","enable","handleSearch","queryText","query","handleSearchResultsCB","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","updateView","getDragData","eventDeleteClickItem","getBadgeValue","getBackgroundImage","SidebarView","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","deleteButton","startScoreSheetButton","scoreCount","length","favouriteIcon","scoreBadge","Incomplete","image","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","csLogger","csLoggerDetail","selectedChatLog","handleNewInviteReceived","leaveChat","handleUserDrop","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","Priority","messageEl","checkCanComment","addChatMessage","chatMessageEl","messageSenderEl","moment","clearChatLog","reRenderChatMessages","chatLog","renderChatLog","handleChatLogsUpdated","handleChatStarted","handleOfflineMessagesReceived","handleInvitationDeclined","sscLogger","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","currentUsername","isRoomCreator","currentUsersInScoreSheet","intervalTimer","receiveLogin","receiveLogout","receiveInvitation","invite","InviteType","isFinished","timerGoing","askUserAboutInvitation","receiveQueuedMessages","messages","receiveQueuedInvites","receiveDecline","receiveJoinedRoom","receivedLeftRoom","receiveUserList","saveData","jsonData","createdOn","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","columnSummary","destinationRow","destinationColumn","reversedRowCoords","type","forceNumeric","uuid","tableData","created","setInterval","clearInterval","ssvLogger","boardGameTitleEl","timerEl","endOrLeaveEl","table","handleEndOrLeave","handleStartStopTimer","hours","Math","minutes","seconds","isPaused","row","sidePanelEl","closeButtonEl","showHide","size","stateManager","handleFavouriteUserDrop","handleBlockedUserDrop","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","fastSearchEl","$","eventUserSelected","label","reRenderView","myUsername","fastSearchValues","searchValue","source","disabled","minLength","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","fetch","response","fetchJSON","callback","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","parentEl","UserStatus","cmLogger","blockedList","favouriteList","loggedInUsers","listener","blocked","favourite","savedLogs","roomName","lastViewed","numOfNewMessages","ChatRoom","foundLog","joinDateTime","from","priority","didChatAlreadyExist","happyToProceed","receiveMessage","wasOffline","invites","joinChat","logout","declineInvite","sendInvite","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","chatLogKey","blockedListKey","favouriteListKey","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","SocketManager","addChatReceiver","chatReceivers","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","filter","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","newValue","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","configuration","results","config","setCompletedRun","runsComplete","dataAttribute","jsonRequest","Error","msManager","apiSMLogger","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","item1","item2","UUID","getUniqueId","r","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvuG;;;;;;;;;;;ACnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnSA;;AACA;AACA;AACA;AACA;AAEA;AAC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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/handsontable/node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSearchSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {ScoreSheetView} from \"./component/ScoreSheetView\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component{\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n    // @ts-ignore\n    private scoreSheetView: ScoreSheetView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            scoreSheet: {\n                room: '',\n                boardGameName: '',\n                sheetLayoutOptions: {},\n                timer: 0,\n                sheetData: {}\n            },\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults',\n                scoreSheet: 'scoreSheet'\n            },\n            apis: {\n                login: '/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n                bggSearchCallById: {\n                    queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n                    resultName:'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {findUsers {id, username}}',\n                    resultName: 'findUsers',\n                },\n                addToMyCollection: {\n                    queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n                    resultName: 'addToMyCollection',\n                },\n                removeFromMyCollection: {\n                    queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n                getMyBoardGameCollection: {\n                    queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scores {id, players, scores, jsonData, createdOn}}}',\n                    resultName: 'getMyBoardGameCollection',\n                },\n                addScoreSheetToBoardGame: {\n                    queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id,players,scores,jsonData,createdOn}',\n                    resultName: 'addScoreSheetToBoardGame'\n                }\n\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyCollection: 'navigationItemMyCollection',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat',\n                    showScoreSheet: 'navigationItemScoreSheet',\n\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle btn-xsm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses:'fas fa-trash-alt',\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n                scoreSheetSideBar: {\n                    dom: {\n                        sideBarId: 'scoreSheetSidebar',\n                        resultsId: 'scoreSheets',\n                        resultsElementType: 'div',\n                        resultsElementAttributes: [\n                        ],\n                        resultsClasses: 'card text-white',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'scoreSheet',\n                        modifierClassNormal: '',\n                        modifierClassInactive: '',\n                        modifierClassActive: '',\n                        modifierClassWarning: '',\n                        iconNormal: ' ',\n                        iconInactive: ' ',\n                        iconActive: ' ',\n                        iconWarning: ' ',\n                        isDraggable: false,\n                        isClickable: false,\n                        isDeleteable: false,\n                        resultContentDivClasses: 'card-img-overlay',\n                        resultContentTextElementType: 'div',\n                        resultContentTextClasses: 'ml-2',\n                        hasBackgroundImage: true,\n                        imgElementType: 'img',\n                        imgClasses: 'card-img',\n                    },\n                },\n                scoreSheet: {\n                    dom: {\n                        dropZone: \"scoreSheetZone\",\n                        boardGame: \"selectedBoardGame\",\n                        startStopTimer: \"startStopTimer\",\n                        timer: \"timerDisplay\",\n                        end: \"leaveScoreSheet\",\n                        scoreSheet: \"scoreSheet\",\n                        iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n                        iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n                        iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n                        iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n\n\n                    }\n                }\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                scoreSheetSideBar: {\n                    view: {\n                        location: 'bottom',\n                        expandedSize: '25%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    private handleDragOver(event:DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event:Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    public addBoardGameToDisplay(draggedObject:any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title:string,content:string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames:any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index:number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={() => {}}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event:MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            controller.removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event:MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            }\n            else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n\n    handleDeleteBoardGame(event:MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game:any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (controller.isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(this.state.controller.events.boardGames.eventDataKeyId,id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    }\n                    else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        controller.removeBoardGameFromDisplay(boardGame);\n\n                    }\n                }\n                else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this,document,controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this,document,controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this,document,controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        this.scoreSheetView = ScoreSheetView.getInstance();\n        this.scoreSheetView.onDocumentLoaded(this);\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.chatId).addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click',this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click',this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click',this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection:boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-none',false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl,'d-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl,'d-block', false);\n        }\n        else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n    handleShowCollection(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event:MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event:Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowChat(event:Event) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n    }\n\n    handleShowBGGSearch(event:Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\nlocalStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","export enum Decorator  {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any|null;\n    timer: number,\n    data: any[]|null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {Invitation, Message} from \"./socket/Types\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            chatManager.login();\n\n\n            // load the users\n            this.getStateManager().getStateByName(this.config.stateNames.users);\n        }\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: this.displayedBoardGamesStateManager.getStateByName(this.config.stateNames.boardGames)});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.getMyBoardGameCollection.queryString, {userId:this.getLoggedInUserId()}, this.callbackGetCollection, this.config.stateNames.boardGames, false);\n        }\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.bggSearchCallById.queryString, {gameId:boardGame.gameId}, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentListOfGames,false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    private removeBoardGameFromState(boardGame:any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index,1);\n            this.applicationView.setState({boardGames:currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentBoardGamesOnDisplay,false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n\n\n\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game:any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n                this.applicationView.setState({boardGames:currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(this.config.stateNames.boardGames,updatingBoardGame,isSameGame,false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[this.config.apis.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame:any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n                let index = currentGameList.findIndex((game:any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >=0}`);\n                if (index >= 0) {\n                    cLoggerDetail(`in current state, replacing`);\n                    // replace the current entry\n                    currentGameList.splice(index,1,boardGame);\n                }\n                else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames:currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames,currentGameList,false);\n        }\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(this.config.stateNames.boardGames,boardGame,true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                this.config.stateNames.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                        }\n                        else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                this.config.stateNames.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config:any;\n\n    public constructor(config:any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message:any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments,stateObj,true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj,true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj,true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments,stateObj,isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame,true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected abstract getDragData(event: DragEvent): any;\n    protected abstract getIdForStateItem(name: string, item: any): string;\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n    protected abstract getBadgeValue(name:string, item:any): number;\n    protected abstract getBackgroundImage(name:string,item:any) :string;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource:any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl:HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl:HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBackgroundImage) {\n                let imgEl = this.document.createElement(domConfig.imgElementType);\n                browserUtil.addRemoveClasses(imgEl,domConfig.imgClasses);\n                imgEl.setAttribute('src',this.getBackgroundImage(name,item));\n            }\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name,item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    contentEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl:HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type','button');\n                browserUtil.addRemoveClasses(deleteButtonEl,domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length() > 0) {\n                        domConfig.innerText = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl,domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click',(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                contentEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name,item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n}\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameGame} from '../util/EqualityFunctions';\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    // @ts-ignore\n    private formEl:HTMLElement;\n    // @ts-ignore\n    private queryEl:HTMLInputElement;\n    // @ts-ignore\n    private buttonEl:HTMLButtonElement;\n\n\n    private changeSearchButton(enable:boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        }\n        else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\",\"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event:Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, {queryString:queryText}, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n    public handleSearchResultsCB(data:any,status:number,associatedStateName:string):void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults,data.data.findBoardGames,true);\n        }\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit',this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n    return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults,{gameId:parseInt(boardGameId)},isSameGame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame:any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSameGame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSameGame,true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler,startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 ml-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n            </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!controller.isLoggedIn()?'Browser':''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-1\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scores) {\n            scoreCount = boardGame.scores.length;\n        }\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-primary' onClick={showScoresHandler}>{scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src={boardGame.image} alt=\"Card image cap\"></img>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?favouriteIcon:''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally))?scoreBadge:''}<br/>  {(controller.isLoggedIn())?((boardGame.decorator === Decorator.Persisted)?deleteButton:addButton):deleteButton}</h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                    <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                        <p className=\"card-text\">Loading...</p>\n                        <p className=\"card-text\">\n                            <small className=\"text-muted\">\n                                Loading...\n                            </small>\n                        </p>\n                    </div>\n                    <div className={\"card-footer text-right text-muted\"}>\n                        Loading...\n                    </div>\n                </div>\n            </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../socket/Types\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    private leaveChat(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('',{});\n    }\n\n    handleUserDrop(event:Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username,this.selectedChatLog.roomName);\n            }\n        }\n\n    }\n\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('',{})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage:Message|null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent,Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {csLoggerDetail('Dragged over'); if (this.selectedChatLog) event.preventDefault();});\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click',this.leaveChat);\n\n        this.checkCanComment();\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        }\n        else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl:HTMLElement|null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        this.createResultsForState(name, newState);\n        this.checkCanComment();\n    }\n\n    getDragData(event: DragEvent) {}\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog|null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('',{});\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../socket/Types\";\nimport {ChatReceiver} from \"../socket/ChatReceiver\";\nimport notifier from \"../notification/NotificationManager\";\nimport {ScoreSheetView} from \"./ScoreSheetView\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport uuid from \"../util/UUID\";\nimport socketManager from \"../socket/SocketManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport moment from \"moment\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n\n    private applicationView: any | null = null;\n    private scoreSheetView: ScoreSheetView|null = null;\n    private currentScoreRoom: string|null = null;\n    private currentlySelectedBoardGame: any|null = null;\n    private currentScoreSheet: ScoreSheet|null = null;\n    private currentUsername:string = '';\n    private isRoomCreator:boolean = false;\n    private stateManager:StateManager;\n    private currentUsersInScoreSheet:string[] = [];\n    private intervalTimer:number = -1;\n\n\n    private constructor() {\n        this.stateManager = new BrowserStorageStateManager(true);\n        socketManager.addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    private reset():void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    receiveLogin(username: string): void {}\n    receiveLogout(username: string): void {}\n\n    public setCurrentUser(username:string):void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView:any) {\n        this.applicationView = applicationView;\n    }\n\n    private isLoggedIn():boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreRoom) {\n            // are we already in this score sheet?\n            if (this.currentScoreRoom !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                socketManager.sendDeclineInvite(invite.room,this.getCurrentUser());// user declines to join the scoresheet\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!this.askUserAboutInvitation(invite)) {\n                socketManager.sendDeclineInvite(invite.room,this.getCurrentUser());// user declines to join the scoresheet\n            };\n        }\n        // notify the user of the new chat\n        notifier.show('Score Sheet',`Joining score sheet`,'info',7000);\n        socketManager.joinChat(this.getCurrentUser(),invite.room);\n        this.currentScoreRoom = invite.room;\n        this.currentScoreSheet = {\n            room: invite.room,\n            boardGameName: '',\n            data: [],\n            sheetLayoutOptions: {},\n            timer: 0,\n            isFinished: false,\n            timerGoing: false\n        }\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    askUserAboutInvitation(invite:Invitation):boolean {\n        return confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`);\n    }\n\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message:Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n\n    receiveQueuedInvites(invites: any): void {\n        // not implemented, the user needs to be online for a scoresheet\n    }\n\n    receiveDecline(room: string, username: string): void {\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                notifier.show('Score Sheet',`User ${username} declined the invitation.`,'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n            this.addUserToScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index,1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n    }\n\n    receiveUserList(users: string[]): void {} // will be managed in the transfer of sheet data\n\n\n    public endScoreSheet():void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet,true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet:ScoreSheet) {\n        sscLogger('Handling save');\n        let saveData = {\n            jsonData:JSON.stringify(scoreSheet),\n            createdOn:parseInt(moment().format('YYYYMMDDHHmmss'))\n        }\n        sscLogger(scoreSheet);\n        alert('implement save');\n\n\n    }\n\n\n    private getDefaultScoreSheetTemplate(boardGame:any):any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders:false,\n            rowHeaders:true,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize:false,\n            manualRowResize:false,\n            selectionMode:'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn:0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn:6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric:true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame:any):any[] {\n        return [\n            ['P 1','P 2','P 3','P 4','P 5','P 6','P 7'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n            ['0','0','0','0','0','0','0'],\n        ];\n    }\n\n\n    private getScoreSheetTemplate(boardGame:any):any|null {\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    private getScoreSheetStartingData(boardGame:any):any[]|null {\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public startScoreSheet(boardGame:any):void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: this.getScoreSheetTemplate(boardGame),\n                timer:0,\n                timerGoing:false,\n                data: this.getScoreSheetStartingData(boardGame),\n                isFinished:false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet,this.currentScoreSheet,true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) socketManager.joinChat(this.getCurrentUser(),this.currentScoreRoom);\n\n        }\n    }\n\n    public hasActiveScoreSheet():boolean {\n        let result = false;\n        if (this.currentScoreRoom) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username:string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame) && (this.isRoomCreator)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            socketManager.sendInvite(this.getCurrentUser(),username,this.currentScoreRoom,InviteType.ScoreSheet,true,this.currentlySelectedBoardGame.name);\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet:ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n                    // only update the scoresheet if the timer value is higher from the attachement\n                    // @ts-ignore\n                    if (scoreSheet.timer > this.currentScoreSheet.timer) {\n                        if (this.currentScoreSheet) {\n                            this.currentScoreSheet.room = message.room;\n                            this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                            this.currentScoreSheet.data = scoreSheet.data;\n                            this.currentScoreSheet.timer = scoreSheet.timer;\n                            this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                            this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                            this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n                        }\n                    }\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner():boolean {\n        return this.isRoomCreator;\n    }\n\n    private saveCurrentScoreSheet(scoreSheet:ScoreSheet) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet,this.currentScoreSheet,false);\n    }\n\n    public createScoreSheetFromTable():ScoreSheet|null {\n        let scoreSheet:ScoreSheet|null = null;\n        let tableData = ScoreSheetView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet:ScoreSheet,isFinished:boolean = false):void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            socketManager.sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    protected addUserToScoreSheet(username:string):void {\n        // TO DO\n    }\n\n    protected removeUserFromScoreSheet(username:string):void {\n        // TO DO\n    }\n\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer ++;\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer,!this.currentScoreSheet.timerGoing);\n            }\n            else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer,!this.currentScoreSheet.timerGoing);\n                }\n            }\n        },1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet,false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet,false);\n            }\n        }\n    }\n\n    public userChangedValue(value:any) {\n        let scoreSheet:ScoreSheet|null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            this.saveCurrentScoreSheet(scoreSheet);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet,false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                socketManager.leaveChat(this.getCurrentUser(),this.currentScoreRoom);\n            }\n        }\n    }\n}\n","import StateChangeListener from \"../state/StateChangeListener\";\nimport {ScoreSheetController} from \"./ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport debug from 'debug';\nimport {ScoreSheet} from \"../AppTypes\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetView implements StateChangeListener{\n    private static _instance: ScoreSheetView;\n\n    public static getInstance(): ScoreSheetView {\n        if (!(ScoreSheetView._instance)) {\n            ScoreSheetView._instance = new ScoreSheetView();\n        }\n        return ScoreSheetView._instance;\n    }\n\n    private applicationView:any|null = null;\n\n    private thisEl:HTMLDivElement|null = null;\n    private boardGameTitleEl:HTMLHeadingElement|null = null;\n    private startStopTimer:HTMLButtonElement|null = null;\n    private timerEl:HTMLDivElement|null = null;\n    private endOrLeaveEl:HTMLButtonElement|null = null;\n    private scoreSheetEl:HTMLDivElement|null = null;\n\n    private table:Handsontable|null = null;\n\n    private controller:ScoreSheetController;\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n    }\n\n    public onDocumentLoaded(applicationView:any) {\n        this.applicationView = applicationView;\n        this.resetDisplay();\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(this.applicationView.state.stateNames.scoreSheet,this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click',this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click',this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover',(event) => {event.preventDefault()});\n            this.thisEl.addEventListener('drop',this.handleUserDrop);\n        }\n    }\n\n    handleEndOrLeave(event:MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        }\n        else {\n            // leavingg the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event:MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        }\n        else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event:Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.applicationView.state.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[this.applicationView.state.ui.draggable.draggedType] === this.applicationView.state.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    private resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) this.startStopTimer.innerHTML = 'Start ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n        if (this.startStopTimer) this.startStopTimer.setAttribute(\"disabled\", \"true\");\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = this.applicationView.state.ui.scoreSheet.dom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n    }\n\n    private createTimerDisplay(timer:number):string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        }\n        else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer/3600);\n                let minutes = Math.floor(timer/60);\n                let seconds = timer - (hours*3600) - (minutes*60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    }\n                    else {\n                        result += `${minutes}:`\n                    }\n                }\n                else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    }\n                    else {\n                        result += `${seconds}`;\n                    }\n                }\n            }\n            else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    }\n                    else {\n                        result += `${timer}`;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n\n    public updateTimer(time:number, isPaused:boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n            }\n            else {\n                this.startStopTimer.innerHTML = 'Pause   ' + this.applicationView.state.ui.scoreSheet.dom.iconInProgress;\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        let scoreSheet:ScoreSheet = newValue;\n        ssvLogger(`Processing new state`);\n        ssvLogger(scoreSheet);\n        if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n        // update the board game name\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n        // update the table\n        if (this.table) {\n            // process the data in the state change, will be array of array (rows) into what the table wants\n            let tableData:any = [];\n            // @ts-ignore\n            scoreSheet.data.forEach((row:any[],rowIndex:number) => {\n                row.forEach((column:any, columnIndex:number) => {\n                    tableData.push([rowIndex, columnIndex, column]);\n                });\n            });\n            ssvLogger(`Table data is `);\n            ssvLogger(tableData);\n            // @ts-ignore\n            this.table.setDataAtCell(tableData);\n\n        }\n        else {\n            // create a new table\n\n            if (this.scoreSheetEl) {\n                scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                this.table = new Handsontable(\n                    this.scoreSheetEl,\n                    scoreSheet.sheetLayoutOptions);\n                // @ts-ignore\n                this.table.addHook('afterChange',this.controller.userChangedValue);\n            }\n        }\n\n\n        // update the timer\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n\n\n    }\n\n    public getTableData():any[] {\n        if (this.table) {\n            return this.table.getData();\n        }\n        else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n}","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n  protected constructor(applicationView:any, htmlDocument:HTMLDocument, uiConfig:any, uiPrefs:any,stateManager:StateManager) {\n    super(applicationView, htmlDocument, uiConfig, uiPrefs,stateManager);\n    // event handlers\n    this.eventHide = this.eventHide.bind(this);\n    this.eventShow = this.eventShow.bind(this);\n  }\n\n  onDocumentLoaded() { // this should be called once at startup\n    // hide the side bar panel\n    this.eventHide(null);\n\n    // add the event listener for the close button\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    const closeButtonEl = sidePanelEl.querySelector('.close');\n    if (closeButtonEl) {\n      closeButtonEl.addEventListener('click', this.eventHide);\n    }\n  }\n\n  private showHide(newStyleValue:string):void {\n    const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n    if (sidePanelEl === null) return;\n\n    switch (this.uiPrefs.view.location) {\n      case 'left': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'right': {\n        sidePanelEl.style.width = newStyleValue;\n        break;\n      }\n      case 'bottom': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n      case 'top': {\n        sidePanelEl.style.height = newStyleValue;\n        break;\n      }\n    }\n  }\n\n  eventHide(event:Event|null) {\n    if (event) event.preventDefault();\n    this.showHide('0%');\n  }\n\n  eventShow(event:Event|null) {//414,768,1024\n    let size = this.uiPrefs.view.expandedSize;\n    console.log(window.innerWidth);\n    if (window.innerWidth < 769) {\n      size = '50%';\n    }\n    if (window.innerWidth < 415) {\n      size = '100%';\n    }\n    console.log(size);\n    this.showHide(size);\n  }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv:HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone:HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event:Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n             switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event:Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user:any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users,user,this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {event.preventDefault();});\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {vLogger('Dragged over'); event.preventDefault();});\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event);\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    deleteFavouriteUser(user:any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user:any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user:any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches,user,isSame,true);\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\n\nclass ApiUtil {\n\n  public async postFetchJSON(url:string,query:any) {\n      const postParameters = {\n        method: \"POST\",\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({query})\n      };\n\n      const response = await fetch(url, postParameters);\n      return response.json();\n  }\n\n  private fetchJSON(url:string, parameters:any,callback:ManagerCallbackFunction,queueType:queueType,requestId:string) {\n    fetch(url, parameters)\n      .then((response) => {\n        apiLogger(`Response code was ${response.status}`);\n        if (response.status >= 200 && response.status <= 299) {\n          return response.json();\n        }\n        if (response.status === 400) {\n          apiLogger(response.json());\n        }\n      })\n      .then((data) => {\n        apiLogger(data);\n        callback(data, 200, queueType, requestId);\n      })\n      .catch((error) => {\n        apiLogger(error);\n        callback(null, 500, queueType, requestId);\n      });\n  }\n\n  /*\n      Utility function for calling JSON POST requests\n      Parameters:\n      1.  URL to send the POST request too;\n      2.  parameters object whose attribute (name/values) are the request parameters; and\n      3.  A function to receive the results when the fetch has completed\n          The callback function should have the following form\n          callback (jsonDataReturned, httpStatusCode)\n          a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n          b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n          c)  A server error will give that code and no data\n    */\n  public apiFetchJSONWithPost(request:managerRequest):void {\n    apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n    try {\n      JSON.stringify(request.originalRequest.params );\n    } catch (error) {\n      apiLogger('Unable to convert parameters to JSON');\n      apiLogger(request.originalRequest.params, 100);\n      request.callback(null, 404, request.queueType, request.requestId);\n    }\n    const postParameters = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n\n    this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithGet(request:managerRequest):void {\n    apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const getParameters = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithDelete(request:managerRequest):void {\n    apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const delParameters = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n  }\n\n  public apiFetchJSONWithPut(request:managerRequest) {\n    apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n    const putParameters = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...request.originalRequest.params }),\n    };\n    if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n    this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n  }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {managerRequest, jsonRequest, queueType, RequestType, RequestCallBackFunction} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n  protected backgroundQueue : managerRequest[];\n  protected priorityQueue: managerRequest[];\n  protected inProgress: managerRequest[];\n  protected backgroundChangeListener:QueueListener|null;\n  protected priorityChangeListener:QueueListener|null;\n\n  constructor() {\n    this.backgroundQueue = [];\n    this.priorityQueue = [];\n    this.inProgress = [];\n    this.backgroundChangeListener = null;\n    this.priorityChangeListener= null;\n\n    this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n  }\n\n  public setBackgroundChangeListener(uiChangeListener:QueueListener) {\n    this.backgroundChangeListener = uiChangeListener;\n  }\n\n  public setPriorityChangeListener(uiChangeListener:QueueListener) {\n    this.priorityChangeListener = uiChangeListener;\n  }\n\n  public getPriorityQueueCount() {\n    return this.priorityQueue.length;\n  }\n\n  public getBackgroundQueueCount() {\n    return this.backgroundQueue.length;\n  }\n\n  public addQLApiRequest(url:string, query:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {query:query, variables: variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n  public addQLMutationRequest(url:string, mutation:string, variables:any, callback: RequestCallBackFunction, state:string, isPriority = false) {\n    let request:jsonRequest = {\n      url: url,\n      type: RequestType.POST,\n      params: {mutation:mutation, variables:variables},\n      callback: callback,\n      associatedStateName: state\n    }\n\n    downloader.addApiRequest(request,isPriority);\n  }\n\n  public addApiRequest(jsonRequest:jsonRequest, isPriority = false) {\n    // add a new requestId to the request for future tracking\n    const requestId = uuid.getUniqueId();\n    dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n    dlLogger(jsonRequest, 200);\n\n    if (isPriority) {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.PRIORITY,\n        callback: this.callbackForQueueRequest,\n      }\n      this.priorityQueue.push(managerRequest);\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n    } else {\n      let managerRequest:managerRequest = {\n        originalRequest: jsonRequest,\n        requestId : requestId,\n        queueType : queueType.BACKGROUND,\n        callback: this.callbackForQueueRequest,\n      }\n      this.backgroundQueue.push(managerRequest);\n      if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n    }\n    this.processQueues();\n  }\n\n  private async processPriorityQueue() {\n    const queueItem:managerRequest|undefined = this.priorityQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processBackgroundQueue() {\n    const queueItem:managerRequest|undefined = this.backgroundQueue.shift();\n    if (queueItem !== undefined) this.inProgress.push(queueItem);\n    if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n  }\n\n  private async processQueues() {\n    let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    while (totalQueuedItems > 0) {\n      dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n      // priority queue takes priority\n      if (this.priorityQueue.length > 0) {\n        await this.processPriorityQueue();\n      } else if (this.backgroundQueue.length > 0) {\n        await this.processBackgroundQueue();\n      }\n      totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n    }\n  }\n\n  private callbackForQueueRequest(jsonData:any, httpStatus:number, queueId:number, requestId:string) {\n    // let the listeners know about the completion\n    if (queueId === queueType.PRIORITY) { // priority\n      if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n    }\n    else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n    dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n    // find the item in the in progress\n    const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n    if (foundIndex >= 0) {\n      // remove from in progress\n      const queueItem = this.inProgress[foundIndex];\n      this.inProgress.splice(foundIndex, 1);\n      dlLogger(queueItem);\n      dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n      // let the callback function know\n      queueItem.originalRequest.callback(jsonData, httpStatus,queueItem.originalRequest.associatedStateName);\n    }\n  }\n\n  private initiateFetchForQueueItem(item:managerRequest) {\n    dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n    dlLogger(item);\n    if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n      switch (item.originalRequest.type) {\n        case RequestType.POST: {\n          apiUtil.apiFetchJSONWithPost(item);\n          break;\n        }\n        case RequestType.GET: {\n          apiUtil.apiFetchJSONWithGet(item);\n          break;\n        }\n        case RequestType.DELETE: {\n          apiUtil.apiFetchJSONWithDelete(item);\n          break;\n        }\n        case RequestType.PUT: {\n          apiUtil.apiFetchJSONWithPut(item);\n          break;\n        }\n      }\n    }\n  }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET ,\n    PUT,\n    DELETE\n};\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url:string,\n    type: RequestType,\n    params:any,\n    callback: RequestCallBackFunction,\n    associatedStateName:string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data:any,status:number,queueId:number,requestId:string) => void;\nexport type RequestCallBackFunction = (data:any,status:number,associatedStateName:string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n  constructor(notificationManager:NotificationManager) {\n     super(notificationManager);\n  }\n\n  // Make the notification visible on the screen\n  public show(title:string, message:string, topOffset:number = 0, context:string = 'info', duration:number = 3000):HTMLElement {\n    let containerId = this.notificationManager.getContainerId();\n    // convert the context to a background colour\n    let bgColorClass = '';\n    switch (context) {\n      case 'info': {\n        bgColorClass = 'bg-info';\n        break;\n      }\n      case 'warning': {\n        bgColorClass = 'bg-warning';\n        break;\n      }\n      case 'message': {\n        bgColorClass = 'bg-primary';\n        break;\n      }\n      case 'priority': {\n        bgColorClass = 'bg-danger';\n        break;\n      }\n      default: {\n        bgColorClass = \"bg-info\";\n      }\n\n    }\n    // Creating the notification container div\n    const containerNode = document.createElement('div');\n    containerNode.className = 'notification toast';\n    containerNode.style.top = `${topOffset}px`;\n    containerNode.setAttribute(\"role\",\"alert\");\n    containerNode.setAttribute(\"data-autohide\",\"false\");\n\n    // Adding the notification title node\n    const titleNode = document.createElement('div');\n    titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n    const titleTextNode = document.createElement('strong');\n    titleTextNode.className = \"mr-auto\";\n    titleTextNode.textContent = title;\n\n    // Adding a little button on the notification\n    const closeButtonNode = document.createElement('button');\n    closeButtonNode.className = 'ml-2 mb-1 close';\n    closeButtonNode.textContent = 'x';\n    closeButtonNode.addEventListener('click', () => {\n      this.notificationManager.remove(containerNode);\n    });\n\n\n    // Adding the notification message content node\n    const messageNode:HTMLElement = document.createElement('div');\n    messageNode.className = 'toast-body';\n    messageNode.textContent = message;\n\n\n    // Appending the container with all the elements newly created\n    titleNode.appendChild(titleTextNode);\n    titleNode.appendChild(closeButtonNode);\n    containerNode.appendChild(titleNode);\n    containerNode.appendChild(messageNode);\n    containerNode.classList.add(`is-${context}`);\n\n    // Inserting the notification to the page body\n    const containerEl:HTMLElement|null = document.getElementById(containerId);\n    if (containerEl) containerEl.appendChild(containerNode);\n\n    // activate it\n    // @ts-ignore\n    $(\".notification\").toast('show');\n\n    // Default duration delay\n    if (duration <= 0) {\n      duration = 2000;\n    }\n    setTimeout(() => {\n      this.notificationManager.remove(containerNode);\n    }, duration);\n    return containerNode;\n  }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n  protected notificationManager:NotificationManager;\n  protected containerId:string;\n\n  protected constructor(notificationManager:NotificationManager) {\n    this.show = this.show.bind(this);\n\n    this.notificationManager = notificationManager;\n\n    // Create DOM notification structure when instantiated\n    this.containerId = this.notificationManager.getContainerId();\n  }\n\n  // Make the notification visible on the screen\n  public abstract show(title:string, message:string, topOffset:number, context:string, duration:number):HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager:NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n  protected notifications:Node[];\n  protected currentCount:number;\n  protected offsetPerNotification:number;\n  protected containerId:string;\n\n  constructor() {\n    this.notifications = [];\n    this.currentCount = 0;\n    this.offsetPerNotification = 120;\n    this.containerId = 'notifications';\n\n    this.show = this.show.bind(this);\n  }\n\n  public getContainerId():string {\n    return this.containerId;\n  }\n\n  public show(title:string, message:string, context:string = 'info', duration:number = 5000) {\n    const notification = notificationFactory.createNotification(this);\n    const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n    this.currentCount++;\n    this.notifications.push(notificationNode);\n  }\n\n  public remove(notificationNode:HTMLElement) {\n    const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n    if (foundIndex >= 0) {\n      this.notifications.splice(foundIndex, 1);\n      // re-arrange the remaining notifications\n      this.notifications.map((notificationNode, index) => {\n        // @ts-ignore\n        notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n      });\n    }\n    const parentEl = notificationNode.parentElement;\n    if (parentEl !== null) parentEl.removeChild(notificationNode);\n    this.currentCount--;\n    if (this.currentCount < 0) this.currentCount = 0;\n  }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport socketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver,ChatEmitter {\n    private static _instance: ChatManager;\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage:StateManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private currentUsername = '';\n    protected blockedList: string[] = [];\n    private static blockedListKey = 'im-board-blocked-list';\n    protected favouriteList: string[] = [];\n    private static favouriteListKey = 'im-board-favourite-list';\n\n\n    protected loggedInUsers: string[] = [];\n\n\n    protected chatListeners:ChatEventListener[];\n    protected chatUserListeners:ChatUserEventListener[];\n\n    public addChatEventHandler(receiver:ChatEventListener):void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver:ChatUserEventListener):void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public isUserLoggedIn(username:string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    private saveLogs():void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey+this.currentUsername,this.chatLogs,false);\n    }\n\n    private saveBlockedList():void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey+this.currentUsername,this.blockedList, false);\n    }\n\n    private saveFavouriteList():void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey+this.currentUsername,this.favouriteList, false);\n    }\n\n    public addUserToBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username:string):void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index,1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username:string):boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n\n    public addUserToFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username:string):void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index,1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username:string):boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList():string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList():string[] {\n        return [...this.blockedList];\n    }\n\n\n    public setCurrentUser(username:string):void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey+this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey+this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey+this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser():string {\n        return this.currentUsername;\n    }\n\n    private ensureChatLogExists(room:string):ChatLog {\n        let log:ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        }\n        else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username:string):ChatLog {\n        let foundLog:ChatLog|null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(),username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.username === this.currentUsername) return;\n\n        let log:ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message:Message = {\n            from:'',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log,false));\n    }\n\n    private doesChatRoomExist(room:string) {\n        let index = this.chatLogs.findIndex((log:ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                socketManager.joinChat(this.getCurrentUser(), invite.room);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        }\n        else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index,1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room,username));\n        }\n\n    }\n\n\n    private addMessageToChatLog(log:ChatLog, message:Message) {\n        log.numOfNewMessages ++;\n        log.messages.push(message);\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        }\n        else {\n            this.saveLogs();\n        }\n    }\n\n    public touchChatLog(room:string):void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n        this.saveLogs();\n    }\n\n    public getChatLog(room:string):ChatLog|null {\n        let log:ChatLog|null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog:ChatLog, sender:string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    receiveMessage(message: Message,wasOffline:boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,wasOffline));\n        }\n        else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite:Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message:Message) => {\n           this.receiveMessage(message,true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(),room);\n    }\n\n    private removeChatLog(room:string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index,1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(),room);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            socketManager.joinChat(this.currentUsername,log.roomName);\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    declineInvite(room:string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.sendDeclineInvite(room, this.getCurrentUser());\n\n    }\n\n    sendInvite(to: string, room: string,type:InviteType = InviteType.ChatRoom,requiresAcceptDecline:boolean = false, subject:string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log:ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) =>  user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(),to, room,type,requiresAcceptDecline,subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority:Priority = Priority.Normal, attachment:any|undefined): Message|null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(),room, content, created,InviteType.ChatRoom, Priority.Normal,{});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent:Message = {\n            from:this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs():ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n\n    public startChatWithUser(username:string) {\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog,false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName,InviteType.ChatRoom,false,'');\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName);\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport controller from \"../Controller\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        notifier.show('Room',`User ${username} has declined the invitation to join you.`,'info',7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            result = controller.askUserAboutInvitation(invite);\n\n        }\n        else {\n            // notify the user of the new chat\n            notifier.show('Chat Room',`User ${invite.from} has invited you.`,'info',7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener:ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n    public addUserListener(listener:ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username:string, isBlackedListed:boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        }\n        else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username:string, isFavourited:boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        }\n        else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username:string):boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username:string):boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog,wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from,displayMessage.message,'message',3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged in.`,'warning',5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username,`User ${username} has logged out.`,'priority',4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username:string) {\n        ChatManager.getInstance().startChatWithUser(username);\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\",`You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {Invitation, InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener:SocketListener|null;\n    protected socket:any|null;\n    protected chatReceivers:ChatReceiver[] = [];\n\n    public addChatReceiver(receiver:ChatReceiver):void {\n        this.chatReceivers.push(receiver);\n    }\n\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n    }\n\n    private callbackForMessage(content:any):void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        }\n        catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    private callbackForLogin(message:any):void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n\n    private callbackForUserList(message:any):void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message:any):void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data:any):void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data:any):void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data:any):void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data:any):void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content:any):void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data:any):void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message:any):void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            }\n            else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        }\n        catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    public setListener(listener:SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message',this.callbackForMessage);\n        this.socket.on('data',this.callbackForData);\n        this.socket.on('login',this.callbackForLogin);\n        this.socket.on('logout',this.callbackForLogout);\n        this.socket.on('joinroom',this.callbackForJoinRoom);\n        this.socket.on('exitroom',this.callbackForExitRoom);\n        this.socket.on('invite',this.callbackForInvite);\n        this.socket.on('declineinvite',this.callbackForDeclineInvite);\n        this.socket.on('chat',this.callbackForChat);\n        this.socket.on('queue',this.callbackForQueue);\n        this.socket.on('userlist',this.callbackForUserList);\n    }\n\n    public login(username:string): void {\n        this.socket.emit('login',{username});\n    }\n\n    public logout(username:string):void {\n        this.socket.emit('logout',{username});\n    }\n\n    public joinChat(username:string, room:string):void {\n        this.socket.emit('joinroom',{username,room});\n    }\n\n    public leaveChat(username:string, room:string):void {\n        this.socket.emit('exitroom', {username,room});\n    }\n\n    public sendInvite(from:string, to:string, room:string, type:InviteType = InviteType.ChatRoom, requiresAcceptDecline:boolean = false,subject:string = '') {\n        let inviteObj:any = {\n            from:from,\n            to:to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject:subject\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from:string, room:string, message:string,created:number,type:number,priority: Priority = Priority.Normal, attachment:any = {}) {\n        let messageObj:Message = {\n            from: from,\n            room: room,\n            message:message,\n            created:created,\n            priority:priority,\n            type:type,\n            attachment: attachment\n        }\n        this.socket.emit('chat',messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room:string,from:string) {\n        this.socket.emit('declineinvite',{room,from});\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","export type Invitation = {\n    from:string,\n    room:string,\n    message:string,\n    created:number,\n    userList:string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject:string\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type:number,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[]\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves:boolean = true;\n    protected managerName:string = '';\n    protected delegate:StateChangeInformer;\n\n    protected constructor(managerName:string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    public abstract _ensureStatePresent(name:string):void;\n    public abstract _addNewNamedStateToStorage(state:stateValue):void;\n    public abstract _replaceNamedStateInStorage(state:stateValue):void;\n    public abstract _getState(name:string):stateValue;\n    public abstract _saveState(name:string,stateObj:any):void;\n    public abstract _addItemToState(name:string,stateObj:any,isPersisted:boolean):void;\n    public abstract _removeItemFromState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    public abstract _updateItemInState(name:string,stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n    public addStateByName(name:string, stateObjForName:any):any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state:stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name,stateObjForName,stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name,item,testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem:any = this.findItemInState(name,item,testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction,isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateManager} from \"./StateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager:StateManager,\n    filters:string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private stateManagers: managerWithFilters[];\n    private static _instance: AggregateStateManager;\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents:boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj,isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n}","import {stateEventType, stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM:AsynchronousStateManager;\n    protected topLevelSM:AbstractStateManager;\n\n    public constructor(topLevelSM:AbstractStateManager, wrappedSM:AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n           this.wrappedSM.addChangeListenerForName(stateName,this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name,stateObj,isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name:name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name,stateObj,testForEqualityFunction,isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {}// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {} // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {} // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {} // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName:string, name: string, itemRemoved: any): void {} // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName:string, name: string, itemUpdated: any, itemNewValue: any): void {} // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName:string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name,newValue);\n    }\n\n    stateChangedItemAdded(managerName:string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name,itemAdded,true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager{\n  protected storage:Storage;\n  private static _instance:BrowserStorageStateManager;\n\n  public static getInstance(useLocalStorage:boolean = false) {\n    if (!(BrowserStorageStateManager._instance)) {\n      BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n    }\n    return BrowserStorageStateManager._instance;\n  }\n\n\n  public constructor(useLocalStorage:boolean = false) {\n    super('browser');\n    this.storage = window.sessionStorage;\n    if (useLocalStorage) this.storage = window.localStorage;\n    this.forceSaves = true;\n  }\n\n  public  _ensureStatePresent(name:string):void {\n    if (this.storage.getItem(name) === null) {\n      this._addNewNamedStateToStorage({name:name, value:[]});\n    }\n  }\n\n  public  _addNewNamedStateToStorage(state:stateValue):void {\n    lsLogger(`Local Storage: Saving with key ${state.name}`);\n    lsLogger(state);\n    const stringifiedSaveData:string = JSON.stringify(state.value);\n    lsLogger(stringifiedSaveData);\n    this.storage.setItem(state.name, stringifiedSaveData);\n\n  }\n  public  _replaceNamedStateInStorage(state:stateValue):void {\n    this._addNewNamedStateToStorage(state);\n  }\n\n  public  _getState(name:string):stateValue {\n    let savedResults = [];\n    lsLogger(`Local Storage: Loading with key ${name}`);\n    const savedResultsJSON = this.storage.getItem(name);\n    lsLogger(savedResultsJSON);\n    if (savedResultsJSON !== null) {\n      savedResults = JSON.parse(savedResultsJSON);\n    }\n    return {name:name, value:savedResults};\n  }\n\n  public  _saveState(name:string,newValue:any):void {\n    this._addNewNamedStateToStorage({name:name,value:newValue});\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n     if (!isPersisted) return;\n\n     let state:stateValue = this._getState(name);\n     lsLogger(`adding item to state ${name}`);\n     lsLogger(stateObj);\n     state.value.push(stateObj);\n     this._replaceNamedStateInStorage(state);\n  }\n\n  _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      lsLogger(`removing item from state ${name}`);\n      lsLogger(stateObj);\n      state.value.splice(valueIndex, 1);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n    let state:stateValue = this._getState(name);\n    const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n    if (valueIndex >= 0) {\n      state.value.splice(valueIndex, 1,stateObj);\n      lsLogger(`updating item in state ${name}`);\n      lsLogger(stateObj);\n    }\n    this._replaceNamedStateInStorage(state);\n  }\n\n  forceResetForGet(stateName: string): void {\n  }\n\n  getConfiguredStateNames(): string[] {\n    return this.configuration;\n  }\n\n  hasCompletedRun(stateName: string): boolean {\n    return false;\n  }\n\n  // @ts-ignore\n  private configuration:string[] = [];\n\n  public initialise(config:string[]) {\n    this.configuration = config;\n  }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config:QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation:any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n  private static _instance:MemoryBufferStateManager;\n\n  public static getInstance() {\n    if (!(MemoryBufferStateManager._instance)) {\n      MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n    }\n    return MemoryBufferStateManager._instance;\n  }\n\n\n\n  protected applicationState:stateValue[];\n\n  public constructor() {\n    super('memory');\n    this.applicationState = [];\n    this.forceSaves = true;\n  }\n\n  public _ensureStatePresent(name:string) {\n    let foundIndex = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex < 0) {\n      let state:stateValue = {\n        name:name,\n        value:[]\n      };\n      this.applicationState.push(state);\n    }\n  }\n\n  public _addNewNamedStateToStorage(state:stateValue):void {\n    msManager(`Adding new complete state ${name}`);\n    msManager(state.value);\n    this.applicationState.push(state);\n  }\n\n  public _replaceNamedStateInStorage(state:stateValue):void {\n     let foundIndex:number = this.applicationState.findIndex(element => element.name === state.name);\n     if (foundIndex >= 0) {\n       msManager(`replacing complete state ${name}`);\n       msManager(state.value);\n       this.applicationState.splice(foundIndex,1,state);\n     }\n  }\n\n  public _getState(name:string):stateValue {\n    // @ts-ignore\n    let state:stateValue = this.applicationState.find(element => element.name === name);\n    msManager(`getting complete state ${name}`);\n    msManager(state.value);\n    return state;\n  }\n\n  public _saveState(name:string,stateObject:any):void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`SAVING complete state ${name}`);\n      msManager(state.value);\n      state.value = stateObject;\n    }\n  }\n\n  _addItemToState(name: string, stateObj: any,isPersisted:boolean = false): void {\n    if (!isPersisted) return; // dont add incomplete objects to the state\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      msManager(`adding item to state ${name}`);\n      msManager(stateObj);\n      state.value.push(stateObj);\n    }\n  }\n\n  _removeItemFromState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        msManager(`removing item from state ${name}`);\n        msManager(stateObj);\n        state.value.splice(valueIndex, 1);\n      }\n    }\n  }\n\n  _updateItemInState(name: string, stateObj: any,testForEqualityFunction:equalityFunction, isPersisted: boolean): void {\n    let foundIndex:number = this.applicationState.findIndex(element => element.name === name);\n    if (foundIndex >= 0) {\n      let state:stateValue = this.applicationState[foundIndex];\n      const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n      if (valueIndex >= 0) {\n        state.value.splice(valueIndex, 1,stateObj);\n        msManager(`updating item in state ${name}`);\n        msManager(stateObj);\n      }\n    }\n    else {\n      this._addItemToState(name,stateObj,true);\n    }\n  }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate:StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName:string):void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged,null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded,null);\n        }\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name,listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name,item,isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,stateObjValue,eventType,previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {}\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name,item,testForEqualityFunction,isPersisted);\n        return true;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits:boolean = false;\n    protected managerName:string;\n\n    public constructor(managerName:string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n\n    private ensureListenerSetupForName(name:string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any};\nexport type stateListeners = {name:string, listeners: StateChangeListener[]};\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state:stateValue): void;\n    _getState(name:string):stateValue;\n    _ensureStatePresent(name:string):void;\n    _replaceNamedStateInStorage(state:stateValue):void;\n    _saveState(name:string,stateObj:any):void;\n    _addItemToState(name:string, stateObj:any,isPersisted:boolean):void;\n    _removeItemFromState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n    _updateItemInState(name:string, stateObj:any,testForEqualityFunction:equalityFunction, isPersisted: boolean):void;\n\n}","class BrowserUtil {\n  constructor() {\n  }\n\n  scrollSmoothToId(elementId:string):void {\n    const element:HTMLElement|null = document.getElementById(elementId);\n    if (element !== null) {\n      element.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n      });\n    }\n  }\n\n  scrollToBottomNow (element:HTMLElement):void {\n    if (element) {\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollToBottomSmooth (element:HTMLElement):void {\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n      });\n      element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n    }\n  }\n\n  scrollSmoothTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth',\n    });\n  }\n\n  scrollTo(element:HTMLElement):void {\n    element.scrollIntoView({\n      block: 'start',\n    });\n  }\n\n  removeAllChildren(element:HTMLElement):void {\n    if (element && element.firstChild) {\n      while (element.firstChild) {\n        const lastChild:ChildNode|null = element.lastChild;\n        if (lastChild) element.removeChild(lastChild);\n      }\n    }\n  }\n\n  addRemoveClasses(element:HTMLElement,classesText:string,isAdding:boolean = true):void {\n    const classes = classesText.split(' ');\n    classes.forEach((classValue) => {\n        if (classValue.trim().length > 0) {\n          if (isAdding) {\n            element.classList.add(classValue);\n          } else {\n            element.classList.remove(classValue);\n          }\n        }\n    });\n  }\n\n  addAttributes(element:HTMLElement, attributes:any[]|undefined) {\n     if (attributes) {\n       attributes.forEach((attribute:any) => {\n          element.setAttribute(attribute[0],attribute[1]);\n       });\n     }\n  }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1:any, item2:any) => boolean;\n\nexport function isSame(item1:any, item2:any):boolean {\n  return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1:any, item2:any):boolean {\n  return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1:any, item2:any):boolean {\n  return (item1.gameId === item2.gameId);\n}\n","class UUID {\n  constructor() {\n  }\n\n  getUniqueId():string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}